# Sprint 2.5: Auditor√≠a estructural ALMA_RESIST

## Objetivo
Reorganizar, limpiar y optimizar la estructura documental del proyecto ALMA_RESIST, asegurando el cumplimiento total de convenciones internas.

## Fase 1: Preparaci√≥n
- [x] Crear branch o copia local (`sprint_2.5_auditoria`)
- [x] Realizar backup completo (`zip` o similar)
- [x] Leer y repasar metodolog√≠a de sprints (`metodologia_sprints_v2.md`)

## Fase 2: Eliminaci√≥n de redundancias
- [x] Eliminar carpetas vac√≠as o innecesarias:
  - [x] `backup_metadata/`
  - [x] `backup_linked_to/`
  - [x] `backup_snakecase/`
  - [x] `commands/`
  - [x] `venv/`
- [x] Consolidar pruebas:
  - [x] Mover contenido √∫til de `testing/` a `tests/`
  - [x] Eliminar `testing/` y `test_kits/`
- [x] Unificar auditor√≠as:
  - [x] Trasladar contenido de `docs/auditorias/` a `logs/auditorias/`
  - [x] Eliminar carpeta vac√≠a (`docs/auditorias/`)

## Fase 3: Correcci√≥n de estructura documental
- [x] Corregir nombres incorrectos:
  - [x] Renombrar `docs/resgistros/` a `docs/registros/`
  - [x] Renombrar `logs_histo‚ï†√ºricos/` a `logs_historicos/`
- [x] Aplicar `snake_case` uniforme en todos los archivos
- [x] Verificar y corregir prefijo de versionado (`ideas_base_legacy` ‚Üí `v0.0.0.0_legacy`)
- [x] Reubicar archivos clave:
  - [x] `CONTEXT.md` ‚Üí `docs/introduccion/context.md`
  - [x] `version.md` ‚Üí `docs/introduccion/version.md`
- [ ] Crear o actualizar `README.md` en cada carpeta principal

## Fase 4: Validaci√≥n de metadatos YAML
- [x] A√±adir o corregir bloque YAML `frontmatter` en todos los `.md` importantes
  - Campos obligatorios:
    - [x] `module`
    - [x] `type`
    - [x] `status`
    - [x] `created`
- [x] Ejecutar script de validaci√≥n YAML (si aplica)

## Fase 5: Organizaci√≥n modular de carpetas
- [x] Organizar documentaci√≥n dentro de `docs/` por m√≥dulos claros:
  - [x] `introduccion/`
  - [x] `arquitectura/`
  - [x] `metodologias/`
  - [x] `control/` (auditor√≠as, bit√°coras)
  - [x] `utilidades/`
- [x] Consolidar y ordenar carpetas cronol√≥gicamente dentro de `versiones/`
- [x] Trasladar respaldos relevantes a `archive/`

## Fase 6: Automatizaci√≥n y Scripts
- [x] Centralizar scripts y herramientas:
  - [x] Mover automatizaciones de otras carpetas a `scripts/`
  - [x] Actualizar `README.md` en `scripts/`

## Fase 7: Control de calidad y revisi√≥n final
- [x] Ejecutar revisi√≥n cruzada:
  - [x] Verificaci√≥n manual de estructura
  - [x] Validar checklist con script autom√°tico (si aplica)
- [x] Generar √°rbol visual actualizado (`tree`)
- [x] Realizar commit detallado describiendo cambios realizados
- [x] Actualizar `CHANGELOG.md` con acciones del Sprint 2.5

## Fase 8: Cierre del Sprint
- [x] Solicitar revisi√≥n t√©cnica interna o externa
- [x] Documentar aprendizajes o ajustes metodol√≥gicos
- [x] Integrar cambios definitivos a rama principal
- [x] Comunicar cierre del Sprint 2.5 al equipo



## üìå Principios rectores

- **Minimalismo estructural:** menos carpetas, m√°s significado. Toda redundancia debe eliminarse o fusionarse.
- **Modularidad estricta:** cada carpeta/documento debe responder a una funci√≥n, no a una ocurrencia ca√≥tica.
- **Nombrado determinista:** los nombres deben permitir inferir su funci√≥n y nivel jer√°rquico sin abrir los archivos.
- **Versionado sem√°ntico:** ning√∫n archivo o carpeta sin una raz√≥n de versi√≥n clara debe sobrevivir.
- **YAML como contrato sem√°ntico:** todo archivo Markdown relevante debe iniciar con metadatos YAML claros, v√°lidos y coherentes.
- **Separaci√≥n de contextos:** documentaci√≥n no es c√≥digo, c√≥digo no es bit√°cora, bit√°cora no es auditor√≠a. Cada tipo de contenido tiene su lugar y reglas.


## üß≠ Criterios de √©xito

- Estructura final reduce el n√∫mero total de carpetas innecesarias sin p√©rdida de significado.
- Todos los `.md` clave tienen un bloque YAML v√°lido con al menos los campos: `module`, `type`, `status`, `created`.
- Los `README.md` existen en todas las carpetas de primer y segundo nivel con explicaci√≥n funcional del contenido.
- El √°rbol de carpetas puede visualizarse de forma clara en una sola pantalla (m√°ximo 3 niveles).
- Se puede ejecutar un script y validar que no hay archivos mal ubicados, sin prefijos, ni carpetas vac√≠as.


## ‚ö†Ô∏è Errores a evitar

- Reorganizar sin respaldo previo.
- Borrar contenido sin verificar si es redundante o s√≥lo mal ubicado.
- No dejar trazabilidad de los cambios: todo cambio debe ser registrado en `CHANGELOG.md` y el commit debe ser descriptivo.
- Romper rutas relativas usadas en scripts, si a√∫n no fueron modularizadas.


# üß© Ap√©ndice para Auditor√≠a T√©cnica Futura ‚Äì Sprint 2.6 o superior (2025-05-25)

Este ap√©ndice documenta ideas de mejora y expansi√≥n para futuras auditor√≠as estructurales o t√©cnicas dentro de ALMA_RESIST, basadas en la experiencia del Sprint 2.5.

## üîß Propuestas de mejora para `validate_docs.py`

- **Autocompletado de YAML faltante:** Opci√≥n `--fix-missing` para insertar un bloque m√≠nimo si no existe.
    
- **Validaci√≥n de nombre de archivo:** Comprobar que el nombre del archivo `.md` siga `snake_case`.
    
- **Salida estructurada JSON:** Agregar opci√≥n `--json` para integraci√≥n con CI/CD o IA.
    
- **Generaci√≥n de reporte Markdown:** Crear `docs/reportes/validacion_sprint_X.md` al finalizar la validaci√≥n.
    
- **Validaci√≥n cruzada de ubicaci√≥n real del archivo con su campo** `**module**`**.**
    

## üß† Oportunidades para extensi√≥n IA

- **An√°lisis sem√°ntico del frontmatter**: Sugerir autom√°ticamente cambios si el m√≥dulo, tipo o estado no coinciden con el contenido.
    
- **Clasificaci√≥n autom√°tica de archivos nuevos sin YAML.**
    
- **Sugerencias de mejora estil√≠stica para documentos `.md` incompletos o con errores.
  

## üîÅ Tareas complementarias sugeridas

1. **Normalizaci√≥n profunda del campo `module` en YAML**  
   Detectar y corregir rutas incompletas o inconsistentes dentro del campo `module` del frontmatter. Muchos archivos s√≥lo declaran un subnivel (ej. `estructura_doc/plantilla_documento`) sin incluir el m√≥dulo ra√≠z (`arquitectura/estructura_doc/...`).

2. **Revisi√≥n cruzada de campos `linked_to`**  
   Varios archivos YAML no incluyen el campo `linked_to`, o hacen referencia a rutas obsoletas. Deber√≠a implementarse validaci√≥n sem√°ntica cruzada para alinear cada documento con su versi√≥n, bit√°cora o checklist correspondiente.

3. **Detecci√≥n de archivos hu√©rfanos fuera de m√≥dulos**  
   Se encontraron archivos en la ra√≠z de `docs/` y en `ideas/` que no encajan en ning√∫n m√≥dulo ni est√°n registrados en `scripts_index.md` o README. Deber√≠an reubicarse o archivarse si no cumplen con funciones activas.

4. **Autoetiquetado de documentos hist√≥ricos**  
   Proponer una pol√≠tica para marcar autom√°ticamente los documentos obsoletos o legacies con `status: archived` o similar, y separarlos del flujo operativo actual. Podr√≠a automatizarse en el futuro con un script de `curado_archivos.py`.

5. **Validaci√≥n de consistencia sem√°ntica entre YAML y contenido real**  
   Varios documentos declaran en su frontmatter `type: core` pero no contienen contenido central, sino propuestas, pruebas o plantillas. Se recomienda implementar an√°lisis IA para detectar esta inconsistencia y sugerir reclasificaci√≥n.

6. **Control de duplicidad de scripts entre `scripts/` y `core/`**  
   Algunos scripts antiguos a√∫n est√°n presentes en `core/` o `commands/` pese a haber sido migrados a `docs/utilidades/scripts/`. Se recomienda forzar verificaci√≥n de duplicados por hash y eliminar los residuales.

7. **Versi√≥n snapshot Sprint 2.5 faltante en `docs/versiones/`**  
   El snapshot correspondiente a este sprint a√∫n no se encuentra registrado formalmente. Se sugiere generar la carpeta `v0.0.0.5_snapshot_sprint_2.5` y documentar su estructura resultante.


Este ap√©ndice complementa el checklist de Sprint 2.5 como insumo t√©cnico para el Sprint 2.6.


## ‚úÖ Diagn√≥stico de Orden General

### üß± Estructura principal

- ‚úÖ `docs/introduccion/` est√° bien organizada: contiene `context.md`, `version.md`, y `changelog.md` (si segu√≠s con esta l√≥gica, va perfecta para uso IA directo).
    
- ‚úÖ `docs/control/` funciona como **centro de mando** operativo. Est√° alineado con tu visi√≥n (sprints, bit√°coras, checklists, logs).
    
- ‚úÖ `docs/arquitectura/` aparece bien dividida (aunque puede refinarse m√°s con las tres secciones que hablamos: `idea_base/`, `whitepaper/`, `prompt_tecnico/`).
    
- ‚úÖ `docs/utilidades/scripts/` est√° consolidado, y tiene README e √≠ndice.
    
- ‚ö†Ô∏è `backup_*` tiene mucha redundancia y peso muerto sem√°ntico (ver sugerencia).
    


## ‚úÖ Recomendaciones finales para dejar el sistema robusto

### üîß Paso 1: Reordenar y fusionar la arquitectura

```bash
docs/arquitectura/
‚îú‚îÄ‚îÄ idea_base/
‚îÇ   ‚îî‚îÄ‚îÄ idea_base_0.0.1.md
‚îú‚îÄ‚îÄ whitepaper/
‚îÇ   ‚îî‚îÄ‚îÄ whitepaper_v1.md
‚îú‚îÄ‚îÄ prompt_tecnico/
‚îÇ   ‚îî‚îÄ‚îÄ prompt_tecnico_base.md
‚îî‚îÄ‚îÄ README.md  ‚Üê explica la relaci√≥n entre los 3
```

### üîß Paso 2: Mantener `CHANGELOG.md`, `version.md`, `context.md` en `introduccion/`

Es correcto y √∫til para IA externas.

### üîß Paso 3: Eliminar (o archivar comprimido) todo `backup_snakecase`, `backup_metadata`, `backup_linked_to`

Dej√° solo un zip por backup si realmente quer√©s conservarlos.

### üîß Paso 4: Crear README.md en cada subcarpeta importante de `control/`, `sprints_activos/`, `registros/`, `logs/`, `planificacion/`

### üîß Paso 5: Etiquetar todos los archivos con campos YAML v√°lidos (`module`, `type`, `status`, `created`) si a√∫n no se hizo tras `fix_metadata.py`

----
### ‚úÖ **Checklist para el Snapshot v0.0.0.5**

1. üìÅ Crear carpeta: `docs/versiones/v0.0.0.5/`
    
2. üìÑ Copiar dentro:
    
    - `README.md` ra√≠z
        
    - `docs/introduccion/version.md`
        
    - `docs/introduccion/changelog.md`
        
    - `docs/introduccion/context.md`
        
3. üì¶ Comprimir `ALMA_RESIST/` completo como `snapshot_v0.0.0.5.zip`
    
4. üìÑ Guardar changelog resumen dentro del zip
    
5. üîñ Dejar registro en `docs/versiones/index.md` si us√°s √≠ndice de versiones
    
6. üß† Probarlo en GPT local con: ‚Äú¬øQu√© es ALMA_RESIST y c√≥mo funciona?‚Äù