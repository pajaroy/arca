# ðŸ§  api/v1/memorias.py â€“ Endpoint de ingreso de memorias ALMA_LOADER

"""
Este mÃ³dulo define el endpoint REST POST /v1/memorias para registrar nuevas memorias en el sistema ALMA_LOADER.

âœ… Requisitos funcionales:
1. Usar FastAPI y definir un `APIRouter()`
2. Endpoint: POST /v1/memorias
3. Entrada: JSON con estructura validada por Pydantic (modelo `MemoriaIn`)
   - Debe incluir obligatoriamente: `id`, `contenido`, `categoria`, `tags`, `visibilidad`, `owner_id`
4. LÃ³gica:
   - Validar que el JSON cumpla el esquema
   - Llamar a `guardar_memoria()` del mÃ³dulo `core/memoria_saver.py`
   - Devolver el resultado como JSON
5. Respuesta:
   - CÃ³digo 200 si fue exitoso
   - CÃ³digo 400 si hubo error de validaciÃ³n o de guardado
6. El mÃ³dulo debe ser desacoplado para poder incluirse con `include_router()` en `main.py`

ðŸ“¦ Estructura de carpetas:
- Este archivo debe estar en `api/v1/memorias.py`
- La funciÃ³n `guardar_memoria` se importa desde `core.memoria_saver`

ðŸ“Ž Extras:
- Usar modelos de Pydantic para validaciÃ³n (`MemoriaIn`, `MemoriaOut`)
- Agregar `summary` y `description` en el decorador del endpoint
- Anotar tipos para OpenAPI y compatibilidad con documentaciÃ³n automÃ¡tica

ðŸ”’ Nota:
AÃºn no incluir autenticaciÃ³n real, pero el campo `owner_id` es obligatorio.
"""

# Ejemplo de entrada JSON esperada:
# {
#     "id": "mem-001",
#     "contenido": "Hoy operÃ© BTC y aprendÃ­ sobre correlaciones",
#     "categoria": "trading",
#     "tags": ["#btc", "#estrategia"],
#     "visibilidad": "privada",
#     "owner_id": "user-123"
# }
