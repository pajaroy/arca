
# üì° PROMPT BASE ‚Äì Investigaci√≥n Profunda GPT-4.5 (v0.7)

## üéØ Objetivo General

Desarrollar un roadmap t√©cnico ejecutable y antifr√°gil para **ALMA_RESIST**, priorizando:

- Cifrado y privacidad extrema desde el Sprint 1.
- M√≥dulo de chat persistente, optimizado para bajo consumo.
- Logging autom√°tico, documentaci√≥n embebida, y pruebas automatizadas.
- Recuperaci√≥n completa incluso ante corrupci√≥n parcial de datos.


## ‚öôÔ∏è Especificaciones del Entorno

- SO: Linux x86_64 (Debian 12+ / Ubuntu 22.04+)
- RAM m√≠nima: 8GB
- CPU: 4 n√∫cleos
- Python: 3.10.12+ (venv)
- Sin acceso a internet
- TPM o archivo cifrado disponible


## üîÑ Metodolog√≠a

- Ciclos semanales (sprints)
- Pruebas automatizadas: pytest + Locust
- TDD con validaci√≥n cruzada
- Documentaci√≥n embebida (Google docstrings)


## ‚úÖ Checklists Cr√≠ticos

### ALMA_LOADER
- [ ] Logging JSON con metadata cifrada
- [ ] Backup autom√°tico con verificaci√≥n SHA-256
- [ ] Restauraci√≥n parcial si DB est√° corrupta (reconstrucci√≥n desde logs)

### CHAT
- [ ] Solo los √∫ltimos 100 mensajes en RAM (paginaci√≥n)
- [ ] Almacenamiento comprimido en disco (LZ4)
- [ ] Comando `alma --clear-chat` elimina con `shred -u`

### PRUEBAS
- [ ] `run_tests.sh` automatiza pruebas unitarias (pytest)
- [ ] Validaci√≥n de cifrado con OpenSSL
- [ ] Simulaci√≥n de carga con Locust


## üß† Pol√≠ticas de Recuperaci√≥n

- Si falla la restauraci√≥n de la DB: regenerar desde logs cifrados
- Si fallan los logs: usar backup diario anterior + checksum validado
- CLI debe notificar y registrar intentos fallidos en `logs/errors.md`


## üìù Instrucci√≥n Final para GPT-4.5

> Utilizando `ALMA_LIBRE/` y `idea_base_0.0.9.md`, gener√° un sistema que:
- Inicie con logging cifrado desde el Sprint 1
- Implemente chat persistente optimizado
- Cuente con backup restaurable incluso tras fallos cr√≠ticos
- Genere documentaci√≥n embebida y estructurada
- Incluya pruebas automatizadas con cobertura real

