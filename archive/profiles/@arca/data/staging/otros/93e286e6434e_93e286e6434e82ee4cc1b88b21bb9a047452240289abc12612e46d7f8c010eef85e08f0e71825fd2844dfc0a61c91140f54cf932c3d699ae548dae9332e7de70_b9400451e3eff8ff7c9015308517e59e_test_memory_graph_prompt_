---
module: prompts/test_memory_graph_prompt
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# ‚úÖ Solicitud de Test ‚Äì `test_memory_graph.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `memory_graph.py`, el cual implementa un grafo sem√°ntico orientado con nodos √∫nicos y aristas ponderadas para representar relaciones entre prompts, respuestas y conceptos derivados de interacciones previas.

---

## üìò M√©todos clave a testear

- `add_node(content: str) -> int`
- `add_edge(from_id: int, to_id: int, weight: float = 1.0) -> None`
- `get_related(node_id: int, threshold: float = 0.1) -> List[str]`
- `export(format: str = "json") -> str`
- `get_node_id(content: str) -> Optional[int]`
- `clear() -> None`

---

## üß™ Casos de prueba sugeridos

| Caso                                             | Resultado esperado                                 |
|--------------------------------------------------|----------------------------------------------------|
| Inserci√≥n de nodos nuevos                        | Devuelve ID √∫nico, evita duplicados               |
| B√∫squeda de ID por contenido                     | Devuelve ID correcto o None si no existe          |
| Creaci√≥n de aristas con peso                     | Aparecen en exportaci√≥n con peso correcto         |
| Recuperaci√≥n de nodos relacionados               | Devuelve nodos conectados por encima del threshold|
| Exportaci√≥n en JSON                              | Formato v√°lido, contiene nodos y edges            |
| Exportaci√≥n en GraphML                           | Salida con estructura est√°ndar                    |
| Borrado del grafo (`clear`)                      | Estado limpio, sin nodos ni relaciones            |
| Robustez con datos repetidos                     | No rompe relaciones, no duplica nodos             |
| Validaci√≥n de errores                            | Lanza excepci√≥n si se conecta nodo inexistente    |

---

## üîß Consideraciones t√©cnicas

- Usar `pytest`
- Validar que `add_node()` sea idempotente
- Validar exportaci√≥n como string JSON y/o XML
- Simular un grafo de 3‚Äì5 nodos con varias conexiones para cobertura completa
- Comparar salida con estructuras esperadas

---

## üìÇ Archivos relacionados

- `memory_graph.py` (m√≥dulo implementado)
- `context_tracker.py` (integraci√≥n sugerida)
- `test_context_tracker.py` (ya implementado)

---

¬øPod√©s generar el archivo `test_memory_graph.py` con todos estos casos, bien estructurado con `pytest`?
