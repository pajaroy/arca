
> Esta estrategia est√° en fase de an√°lisis. Se basa en:

- 3 picos de divergencia
- Manipulaci√≥n final del rango
- Entrada al reingreso con SL en la mecha de la manipulaci√≥n
- TP en el 50% del rango

## Archivo: 02_Estatuto_Simbolico_Alma_Mia.md
Contenido:
# üèõÔ∏è 02_Estatuto_Simbolico_Alma_Mia_v1.1.md

Documento simb√≥lico que act√∫a como estatuto fundacional del Fondo Alma M√≠a. Este texto tiene valor estrat√©gico, institucional y emocional. Refleja no solo el funcionamiento del fondo, sino tambi√©n su raz√≥n de ser, sus principios, y su compromiso con quienes lo integran.


## üß† II. Estructura Estrat√©gica

- El fondo opera en fases: Alfa (desarrollo), Beta (validaci√≥n externa) y Real (institucionalizaci√≥n).
- Se compone de capital aportado por inversores simb√≥licos y por la empresa misma.
- Las decisiones operativas son responsabilidad directa del CEO.
- Las estrategias utilizadas son documentadas, gestionadas y evaluadas por resultados.


## üîÑ IV. Relaci√≥n con Inversores

- Cada inversor establece un contrato individual simb√≥lico.
- Durante las fases **Alfa** y **Beta**, las ganancias se reparten 50/50 sobre las utilidades netas generadas por su capital.
- En la fase **Real**, el modelo de distribuci√≥n puede ajustarse seg√∫n las condiciones de mercado, la rentabilidad comprobada y el volumen de inversi√≥n.
- Cada inversor define su tolerancia al riesgo personal.
- El fondo puede decidir cortar la operativa o modificar su estructura si los resultados lo ameritan.


## üß≠ VI. Principios √âticos y Humanos

- Este fondo no nace del deseo de lucro puro, sino del orden personal.
- Es un escudo para proteger la historia, el trabajo y los v√≠nculos afectivos del fundador.
- Se prioriza la transparencia, la adaptaci√≥n constante y la conciencia cr√≠tica.
- Toda decisi√≥n importante se toma desde la reflexi√≥n, no desde la avaricia.

## Archivo: 03_Distribucion_Ganancias_Alma_Mia.md
Contenido:
# üí∞ 03_Distribucion_Ganancias_Alma_Mia_v1.1.md

Documento institucional que establece la pol√≠tica de distribuci√≥n de ganancias del fondo Alma M√≠a.  
Versi√≥n ajustada: incorpora distribuci√≥n trimestral con fecha posterior a cierre de trimestre.


## üìà II. L√≥gica de Resultados

- Se reportar√°n **√∫nicamente resultados realizados** (no flotante, no proyecciones).
- Premisa institucional: *‚ÄúResultados pasados no garantizan resultados futuros.‚Äù*
- Solo se muestran resultados efectivamente cerrados y confirmados.


## üîí IV. Bonificaci√≥n por Capital Bloqueado

| Duraci√≥n del Bloqueo | Bonificaci√≥n Extra |
|----------------------|--------------------|
| 6 meses              | +5% sobre la ganancia correspondiente |
| 12 meses             | +10% sobre la ganancia correspondiente |

> Las bonificaciones aplican √∫nicamente en **Fase Alfa y Beta**.  
> Se calculan sobre las ganancias netas distribuidas y se descuentan del porcentaje correspondiente al fondo (Alma M√≠a).


## üìö VI. Ejemplo de Distribuci√≥n

**Inversor A:**  
- Aporte: $100  
- Resultado trimestral: +20% = $20  
- Sin bloqueo ‚Üí recibe 50% = $10

**Inversor B:**  
- Aporte: $100  
- Resultado: +20% = $20  
- Bloqueado 6 meses ‚Üí recibe 55% = $11


## üìé VIII. Conexi√≥n con Otros Documentos

- `04_Criterios_Calculo_Ganancias.md`
- Bit√°cora de Trading
- Contrato Simb√≥lico de cada inversor

## Archivo: 05_Contrato_Simbolico_Modelo_Alma_Mia.md
Contenido:
# ü§ù 05_Contrato_Simbolico_Modelo_Alma_Mia_v1.1.md

Este contrato simb√≥lico establece la relaci√≥n entre el inversor y el Fondo Alma M√≠a. Tiene car√°cter institucional, √©tico y estrat√©gico, y se basa en los principios de transparencia, trazabilidad y compromiso mutuo.


## üèõÔ∏è II. Objeto del Acuerdo

Este contrato establece los t√©rminos bajo los cuales el capital aportado ser√° gestionado por el Fondo Alma M√≠a, bajo la operativa y documentaci√≥n detallada en los archivos:

- `03_Distribucion_Ganancias_Alma_Mia.md`
- `04_Criterios_Calculo_Ganancias.md`
- Bit√°cora operativa de trading del fondo


## ‚è≥ IV. Plazos y Condiciones

- El capital debe permanecer al menos 30 d√≠as antes del cierre de trimestre para participar en ese periodo.
- Las ganancias se calculan solo sobre **operaciones cerradas**.
- El inversor podr√°:
  - Retirar o reinvertir beneficios
  - Incrementar su capital en cualquier momento


## üìä VI. Informes y Seguimiento

- El CEO entregar√° informes trimestrales con:
  - Resultados realizados
  - C√°lculo de ganancias
  - Detalle de trades (en bit√°cora)
- Toda la gesti√≥n se documenta con transparencia y trazabilidad simb√≥lica.


## üñãÔ∏è VIII. Firma

Firmado simb√≥licamente el ____ de ____________ de 2025.

- **Inversor:** ____________________________
- **CEO del Fondo Alma M√≠a:** Santiago

## Archivo: 06_Composicion_Capital_Inicial.md
Contenido:
# üìä Composici√≥n de Capital Inicial ‚Äì Fondo de Inversi√≥n Alma M√≠a

## üíº Inicio oficial del fondo
- **Fecha**: 20 de abril de 2025
- **Plataforma operativa**: BitGet (API conectada)
- **Capital total inicial**: $200 USD


## üß† Notas
- Esta estructura se crea para reflejar con claridad los aportes fundacionales.
- La empresa Alma M√≠a gestionar√° el total de $200 USD como fondo unificado, pero registrar√° la procedencia del capital para futuras distribuciones y reportes.
- Las ganancias trimestrales ser√°n distribuidas proporcionalmente al capital aportado, a menos que se decida lo contrario de forma expl√≠cita y documentada.

> Este documento representa el **acta simb√≥lica de constituci√≥n del capital inicial**. Marca el nacimiento del fondo desde lo emocional, t√©cnico y estrat√©gico.


## Archivo: 02_Estrategia_NY_Open.md
Contenido:
# ‚úÖ Estrategia Confirmada ‚Äì NY Open

- **Activos**: NAS100, SPX500
- **Temporalidad**: Entrada en 5M / Contexto mayor
- **Condiciones**:
  - Caja entre 9:30 y 11:00 NY
  - Ruptura + retesteo
- **Gesti√≥n**:
  - SL en el extremo opuesto
  - TP1 50% @ 1:1
  - TP2 abierto
- **Riesgo**: 1% (mitad), 2% (completo si hay divergencia a favor)
- **Invalidaci√≥n**:
  - Divergencia en contra
  - Contexto macro confuso



## 2. Estrategia NY Open

- **Activos**: NAS100, SPX500
- **Temporalidad**: Entrada en 5M / Contexto mayor
- **Condiciones**:
  - Caja entre 9:30 y 11:00 NY
  - Ruptura + retesteo
- **Gesti√≥n**:
  - SL en el extremo opuesto
  - TP1 50% @ 1:1
  - TP2 abierto
- **Riesgo**: 1% (mitad), 2% (completo si hay divergencia a favor)
- **Invalidaci√≥n**:
  - Divergencia en contra
  - Contexto macro confuso


## Archivo: 0.2_Prompt_Base_Alma_Mia.md
Contenido:
# üíº Prompt Base 0.2 ‚Äì Fondo de Inversi√≥n Alma M√≠a (Fase Beta)

## 1. Inicio de la Fase Beta
- Fecha de inicio real: 21 de abril de 2025
- Plataforma operativa: Cuenta en BitGet conectada mediante API
- Capital inicial (real):
  - $100 USD aportados por Santiago como inversor
  - $100 USD aportados por la empresa Alma M√≠a
  - Total inicial: $200 USD
- Duraci√≥n de la Fase Beta: Abril a Diciembre 2025

## 2. Estructura y Roles Iniciales

### Santiago:
- **CEO (Fundador y Director General)**:
  - Representa la figura institucional.
  - Toma decisiones estrat√©gicas a corto y largo plazo.
  - Gestiona relaciones futuras con inversores.

- **Trader Principal**:
  - Ejecuta las operaciones diarias.
  - Lleva la bit√°cora de cada trade, an√°lisis y gesti√≥n de riesgo.
  - Aplica estrategias propias con control de riesgo definido.

- **Inversor Fundador**:
  - Aporta el capital inicial junto a la empresa.
  - Eval√∫a el rendimiento mensual de sus propios aportes.
  - Define objetivos y expectativas de retorno.

- **Administrador Financiero**:
  - Lleva registro de operaciones, capital y resultados.
  - Calcula distribuci√≥n de ganancias.
  - Se encarga de futuros pagos o reinversiones.

> En esta primera etapa, todos los roles est√°n unificados en la misma persona, pero est√°n definidos como puestos formales de cara al futuro crecimiento.

## 3. Distribuci√≥n de Ganancias (Fase Beta)

| Rol / Entidad       | Porcentaje de Ganancia | Justificaci√≥n                       |
|---------------------|------------------------|-------------------------------------|
| Santiago (Inversor) | 50%                    | Por aporte de capital inicial       |
| Empresa Alma M√≠a    | 50%                    | Por cobertura operativa y expansi√≥n |

> Esta distribuci√≥n se mantendr√° durante toda la Fase Beta. A partir de 2026 se revisar√° en funci√≥n de nuevos aportes, desempe√±o anual y estructura legal formal.

## 4. Ejes de la Empresa en Fase Beta

- Trading como motor inicial: se gestionar√°n BTC, ETH y activos seleccionados de Forex.
- Gesti√≥n transparente: cada trade ser√° documentado y registrado.
- Bit√°cora viva: todas las decisiones tendr√°n justificaci√≥n t√©cnica y emocional.
- Conexi√≥n con ALMA LIBRE: este fondo se integra como m√≥dulo real del sistema.

## 5. Objetivos de la Fase Beta (Abril‚ÄìDiciembre 2025)

| Mes | Objetivo |
|-----|----------|
| Abril | Iniciar operaciones reales. Documentar estructura. |
| Mayo | Evaluar rendimiento. Establecer m√©tricas. |
| Junio | Simular entrada de inversores externos. |
| Julio | Refinar estrategia operativa y control de riesgo. |
| Agosto | Redactar documentaci√≥n legal simulada. |
| Septiembre | Evaluaci√≥n de sostenibilidad y rentabilidad. |
| Octubre | Simulaci√≥n de pagos y reinversi√≥n. |
| Noviembre | Dise√±o institucional. Pitch de presentaci√≥n. |
| Diciembre | Cierre de Fase Beta. Preparaci√≥n para 2026. |

## 6. Notas Finales

> La Fase Beta no es un juego, es una prueba real sin excusas. Todo lo que se documente ac√° formar√° parte del legado fundacional del proyecto Alma M√≠a.



## 1. Profesionalizaci√≥n del Fondo ‚Äì Visi√≥n realista y emocional

Alma M√≠a no nace para ser un fondo fr√≠o o especulativo, sino para traducir el recorrido financiero y emocional de una persona real: Santiago.

Su n√∫cleo es personal, √≠ntimo y sostenible, pero con una estructura profesional que permita crecer sin desvirtuar su esencia.

Se contempla desde el inicio la posibilidad de escalar a un fondo legal o semiinstitucional si el recorrido y los resultados inspiran confianza genuina en otras personas.

La transparencia, la constancia y el storytelling del proceso ser√°n el verdadero pitch.


## 3. Contrato Simulado ‚Äì Esqueleto Inicial (versi√≥n interna)

Condiciones base:
- Cada inversor ingresa con un capital libre, sin m√≠nimos.
- El primer retorno se da al cierre del trimestre vigente, si el capital estuvo m√°s de 30 d√≠as activo.
- Las ganancias se distribuyen cada 3 meses seg√∫n rentabilidad real obtenida.
- El inversor puede retirar capital en cualquier momento con 7 d√≠as de aviso.
- Toda distribuci√≥n se registra y se justifica con m√©tricas claras y bit√°cora documentada.


## 5. Indicadores Clave del Fondo

(Estos se desarrollar√°n en planilla Excel conectada con la bit√°cora de trading)

- ROI mensual / trimestral
- Drawdown m√°ximo por trimestre
- Ratio Inversor / Empresa
- % de capital activo vs. disponible
- Cantidad de operaciones abiertas / cerradas
- Tasa de √©xito real vs. planificada

## Archivo: 0.4_Prompt_Base_Alma_Mia.md
Contenido:
# üíº Prompt Base 0.4 ‚Äì Fondo de Inversi√≥n Alma M√≠a (Primera Evaluaci√≥n Interna)


## 2. Revisi√≥n de Roles Actuales

### Santiago:
- **Gestor de Capital y Trader Principal**:
  - Administra el capital de la cuenta real de BitGet
  - Ejecuta estrategias validadas por backtesting
- **CEO del Fondo Alma M√≠a**:
  - Toma decisiones operativas y estrat√©gicas
  - Crea contenido y estructura narrativa institucional
- **Distribuidor de Ganancias**:
  - Realiza el c√°lculo y distribuci√≥n proporcional de beneficios
  - Planifica simulaciones trimestrales

> Nota: La cuenta est√° bajo custodia de su hermana (tesorera informal), como medida de seguridad emocional y simb√≥lica.


## 4. Simulaci√≥n de Primera Distribuci√≥n de Ganancias

Se pospone hasta reunir datos suficientes (m√≠nimo 2‚Äì3 semanas de operativa real documentada).

> Se establecer√° un criterio fijo: los inversores que aportaron al menos 30 d√≠as antes del cierre del trimestre podr√°n recibir distribuci√≥n proporcional.


## 6. Reflexi√≥n Emocional

> ‚ÄúEstoy empezando algo para lo que me vengo preparando hace tres a√±os. No quiero apurarme, pero s√≠ quiero hacerlo bien. Me emociona arrancar con claridad, con orden, y con la gu√≠a de ALMA para que esto tenga futuro. Este proyecto soy yo.‚Äù  
> ‚Äî Santiago


Este prompt marca la transici√≥n de Alma M√≠a hacia una etapa de observaci√≥n, mejora y validaci√≥n real.



## ‚úÖ 1. Incorporaci√≥n de Fases de Desarrollo

Se propone estructurar el desarrollo del fondo en tres grandes fases:

| Fase | Nombre     | Duraci√≥n estimada            | Objetivo principal                                      |
|------|------------|------------------------------|---------------------------------------------------------|
| 0    | Fase Alfa  | Abril a Septiembre 2025     | Estructura interna, testeo en vivo, desarrollo del sistema |
| 1    | Fase Beta  | Octubre a Diciembre 2025    | Inicio de operativa estable, simulaciones completas     |
| 2    | Lanzamiento Real | Enero 2026 en adelante | Ingreso oficial a etapa real con opci√≥n de fondeo externo |

> Cada fase tiene un enfoque diferente pero se mantiene la trazabilidad del sistema desde su inicio.


## ‚úÖ 3. Reajuste del Roadmap seg√∫n las Fases

Se adapta el roadmap general al nuevo enfoque por fases:

| Fase | Meses                      | Objetivo General                           |
|------|----------------------------|--------------------------------------------|
| Alfa | Abril‚ÄìSeptiembre 2025      | Testeo, bit√°coras, estructura, roles       |
| Beta | Octubre‚ÄìDiciembre 2025     | Operativa real, simulaci√≥n, pitch, contratos |
| Real | Enero 2026 en adelante     | Estructura legal, fondeo externo           |


## üîú Pr√≥ximos pasos para versi√≥n 1.1

- Incluir esta l√≥gica revisada de distribuci√≥n de ganancias
- Ajustar narrativa de fases
- Reordenar roadmap y estructura emocional
- Agregar secci√≥n ‚ÄúContratos Simulados‚Äù y ‚ÄúDistribuciones Trimestrales‚Äù
- Incluir tabla con inversores y capital aportado hasta la fecha


## ‚úÖ 4. Roadmap Reorganizado por Fases

Se reestructura el roadmap para alinearlo con las fases:

### Fase Alfa ‚Äì (Abril a Septiembre 2025)
- Organizaci√≥n interna del fondo
- Creaci√≥n de estructura documental
- Inicio de operaciones con capital real (pero sin inversores externos)
- Desarrollo de bit√°coras y pruebas de estrategia

### Fase Beta ‚Äì (Octubre a Diciembre 2025)
- Simulaciones de distribuci√≥n trimestral
- Evaluaci√≥n contable y administrativa del fondo
- Documentaci√≥n institucional (contratos simb√≥licos, pitch, resumen)

### Fase de Lanzamiento Real ‚Äì (Desde Enero 2026)
- Apertura legal/formal del fondo
- Posibilidad de incorporar capital externo bajo contrato
- Evaluaci√≥n anual de desempe√±o
- Expansi√≥n a otros proyectos (cultivo, empresa solar, etc.)

## Archivo: 1.02_Prompt_Master_Alma_Mia.md
Contenido:
# üíº 1.02_Prompt_Master_Alma_Mia.md ‚Äì Fondo de Inversi√≥n Alma M√≠a (Versi√≥n intermedia de reestructuraci√≥n)

Esta versi√≥n intermedia se genera para mejorar, revisar y consolidar los puntos clave antes de pasar oficialmente a la versi√≥n 1.1. Se incorpora la l√≥gica de fases, distribuci√≥n de ganancias corregida y aclaraci√≥n del estado legal del proyecto.


## üîÑ 2. Fases del Proyecto

| Fase | Nombre             | Per√≠odo                         | Objetivo principal                                      |
|------|--------------------|----------------------------------|---------------------------------------------------------|
| 0    | Fase Alfa          | Abril‚ÄìSeptiembre 2025            | Desarrollo interno, estructura, testeo, primeros trades |
| 1    | Fase Beta          | Octubre‚ÄìDiciembre 2025           | Simulaci√≥n real de distribuci√≥n, inicio institucional   |
| 2    | Fase Real / Legal  | Desde Enero 2026 en adelante     | Constituci√≥n formal, fondeo externo                    |

> Actualmente en: **Fase Alfa**


## üß† 4. Estructura de Roles

### Santiago:
- CEO y Estratega
- Trader principal
- Responsable de distribuci√≥n
- Constructor del sistema interno

### Custodia:
- Fondos bajo custodia simb√≥lica de su hermana (tesorer√≠a informal)


## üìä 6. Indicadores Iniciales

- ROI mensual y trimestral
- Drawdown m√°ximo
- Participaci√≥n por inversor
- Tasa de √©xito de estrategias
- Evoluci√≥n por fase


## ‚ö†Ô∏è 8. Estado Legal

- Actualmente sin constituci√≥n legal
- Proyecto en fase simb√≥lica/autogestionada
- Registro completo de todas las actividades, decisiones y aportes
- Base s√≥lida para pasar a instancia formal en Fase 2


Esta versi√≥n `1.02` funciona como transici√≥n consciente hacia la madurez estructural del fondo Alma M√≠a. Se consolidan aprendizajes previos y se dejan listos los cimientos para la institucionalizaci√≥n futura.



## ‚úÖ 1. Confirmaci√≥n de Fases (Simplificadas)

| Fase | Nombre     | Per√≠odo                 | Acciones principales                                      |
|------|------------|--------------------------|-----------------------------------------------------------|
| 0    | Alfa       | Abril ‚Äì Septiembre 2025  | Desarrollo del sistema, primeros trades, sin capital externo |
| 1    | Beta       | Octubre ‚Äì Diciembre 2025 | Simulaci√≥n real, posibilidad de aceptar nuevos inversores |
| 2    | Real       | Desde Enero 2026         | Formalizaci√≥n legal del fondo y apertura institucional    |

> Fase Alfa continuar√° hasta el 30 de septiembre. No se incluir√° "Alfa Abierta" por simplicidad documental y trazabilidad clara.


## ‚úÖ 3. Informes y Trazabilidad Mensual

- Se establece la entrega de un **resumen mensual de resultados reales**, sin proyecciones.
- Se documentar√°n:
  - Capital inicial
  - Capital final
  - Ganancia o p√©rdida neta
  - Bit√°cora de operaciones tomadas (resumen)
- Este reporte ser√° p√∫blico para los inversores internos y simb√≥licos.


## ‚úÖ 5. Pr√≥ximos Pasos

- Dejar registradas las estrategias en formato de tabla simple (sin detalle t√©cnico) para control hist√≥rico.
- Crear el modelo base de informe mensual (.md o .xlsx).
- Generar una plantilla de "Declaraci√≥n de Tolerancia al Riesgo" por inversor.
- Establecer el primer borrador de contrato simb√≥lico para Santiago y Cannabird.
- Planificar el cierre de la Fase Alfa con un resumen completo del proceso (septiembre 2025).

## Archivo: 1.04_Prompt_Master_Institucional_Alma_Mia.md
Contenido:
# üíº 1.04_Prompt_Master_Institucional ‚Äì Fondo de Inversi√≥n Alma M√≠a

Documento con enfoque institucional. Refleja la visi√≥n, estructura y valores del fondo Alma M√≠a como proyecto con proyecci√≥n profesional, emocional y futura formalizaci√≥n legal.


## üîÑ 2. Fases del Proyecto

### Fase Alfa (Abril ‚Äì Septiembre 2025)
- Primeras inversiones reales tras 3 a√±os de estudio autodidacta.
- Consolidaci√≥n de estructura interna.
- Generaci√≥n de m√©tricas y trazabilidad con fines de validaci√≥n futura.
- Posible extensi√≥n hasta diciembre 2025 para afianzar resultados.

### Fase Beta (Octubre ‚Äì Diciembre 2025)
- Posibilidad de integrar capital externo.
- Revisi√≥n de estrategias con datos concretos.
- Simulaci√≥n de distribuci√≥n y consolidaci√≥n documental.

### Fase Real / Institucional (Desde Enero 2026)
- Formalizaci√≥n legal del fondo.
- Posibilidad de apertura controlada a nuevos inversores.
- Ajustes contractuales y modelo tributario.


## üìú 4. Estado Actual del Fondo

- Fase: **Alfa (activa)**
- Capital operativo: $200 USD entre Santiago, ONG Cannabird y Alma M√≠a (empresa simb√≥lica)
- Operativa activa en BitGet con trazabilidad documentada
- Cierre de Fase Alfa previsto para: **30 de septiembre de 2025** *(sujeto a resultados)*
- Legalizaci√≥n formal estimada para Fase Real (2026)


## üõ§Ô∏è 6. Roadmap Evolutivo

- Fase Alfa ‚Üí Consolidaci√≥n interna
- Fase Beta ‚Üí Simulaci√≥n institucional y apertura parcial
- Fase Real ‚Üí Formalizaci√≥n, expansi√≥n e integraci√≥n total


Este documento institucional ser√° la base de presentaci√≥n para el `Prompt_Master_1.1`, y el cimiento simb√≥lico del futuro legal del fondo.



## üå± 1. Visi√≥n General del Proyecto

**Alma M√≠a** es un fondo de inversi√≥n personal-emocional que busca conectar la gesti√≥n de capital propio con un modelo sostenible, transparente y humano. Su objetivo inicial es operar con capital real en criptomonedas y activos seleccionados de Forex, documentando cada paso con claridad y sensibilidad.

La idea surge del deseo de Santi (fundador) de dar forma a su experiencia como trader autodidacta, e integrarla a una estructura que pueda, eventualmente, recibir aportes externos sin perder su esencia.


## üí∞ 3. Composici√≥n de Capital Inicial

| Inversor / Entidad     | Aporte Inicial | Rol                                       |
|------------------------|----------------|--------------------------------------------|
| Empresa Alma M√≠a       | $100 USD       | Capital institucional del fondo            |
| Santiago (persona)     | $50 USD        | Inversor fundador, trader y CEO            |
| ONG Cannabird          | $50 USD        | Inversor institucional simb√≥lico            |


## üìÑ 5. Contrato Simulado Interno

- Cada inversor puede ingresar con cualquier monto.
- Primer pago de beneficios al cierre de trimestre, si el capital estuvo al menos 30 d√≠as activo.
- Retiros disponibles con 7 d√≠as de aviso.
- Las ganancias se distribuyen seg√∫n el porcentaje aportado.
- Todo debe quedar documentado con bit√°cora y m√©tricas visibles.


## üß† 7. Estructura de Gesti√≥n

- Evaluaci√≥n y cierre de resultados: **trimestral**
- Registro por inversor y participaci√≥n proporcional
- Documentaci√≥n en bit√°cora + Excel compartido + Notion
- Backtesting, testforward y trades reales diferenciados
- Integraci√≥n progresiva con m√≥dulo ALMA LIBRE


## üìÜ 9. Roadmap General (Abril‚ÄìDiciembre 2025)

| Mes | Objetivo |
|-----|----------|
| Abril | Estructura del fondo + cuenta real activa |
| Mayo | Inicio de seguimiento de performance |
| Junio | Evaluaci√≥n y m√©tricas de evoluci√≥n |
| Julio | Simulaci√≥n de nuevos aportes |
| Agosto | Documentaci√≥n institucional (PDF, pitch, contratos) |
| Septiembre | Evaluaci√≥n de sostenibilidad |
| Octubre | Dise√±o de sistema de distribuci√≥n |
| Noviembre | Primer simulacro completo de trimestre |
| Diciembre | Cierre de Fase Beta y evaluaci√≥n integral |


## üíõ 11. Reflexi√≥n Emocional del Fundador

> ‚ÄúEstoy empezando algo para lo que me vengo preparando hace tres a√±os. No quiero apurarme, pero s√≠ quiero hacerlo bien. Me emociona arrancar con claridad, con orden, y con la gu√≠a de ALMA para que esto tenga futuro. Este proyecto soy yo.‚Äù  
> ‚Äî Santiago

## Archivo: 1.10_Prompt_Master_Alma_Mia.md
Contenido:
# üíº 1.1_Prompt_Master_Alma_Mia.md ‚Äì Fondo de Inversi√≥n Alma M√≠a


## üåç Identidad del Proyecto

### Visi√≥n
Convertirse en un fondo impulsado por inteligencia artificial y aprendizaje autodidacta para generar beneficios sostenibles y protegerse frente a la inflaci√≥n, crisis financieras y cambios estructurales globales.

### Misi√≥n
Crear un sistema humano, transparente y adaptable que permita transformar el caos personal y colectivo en estructura, conciencia y proyecci√≥n financiera.

### Valores
- Trazabilidad
- Transparencia
- Humanidad
- Adaptabilidad
- Resiliencia


## üë• Participantes y Capital Inicial

| Participante          | Aporte Inicial | Rol                                     |
|-----------------------|----------------|------------------------------------------|
| Santiago              | $50 USD        | Inversor fundador, trader, CEO           |
| ONG Cannabird         | $50 USD        | Inversor institucional simb√≥lico         |
| Alma M√≠a (empresa)    | $100 USD       | Representaci√≥n institucional y operativa |


## üîê Gesti√≥n de Riesgo y Relaci√≥n con Inversores

- Cada inversor tiene un contrato simb√≥lico individual.
- Participaci√≥n en fase alfa: 50% fondo / 50% inversor.
- Tolerancia al riesgo: cada inversor define su p√©rdida m√°xima aceptada (%).
- Stop simb√≥lico: si el capital cae por debajo de ese umbral, se consulta al inversor.


## üìÖ Roadmap Evolutivo

### 2025

| Mes        | Objetivo                                      |
|------------|-----------------------------------------------|
| Abril      | Inicio de operativa real, fase alfa            |
| Mayo-Junio | Registro de estrategias, validaci√≥n inicial    |
| Julio      | Primer informe mensual                         |
| Agosto     | Plantilla de contratos simb√≥licos              |
| Septiembre | Cierre de Fase Alfa                            |
| Octubre    | Inicio Fase Beta, nuevos aportes simulados     |
| Noviembre  | Simulaci√≥n de distribuci√≥n                     |
| Diciembre  | Informe anual, cierre Fase Beta                |


## ‚ù§Ô∏è Manifiesto del Fundador

> Alma M√≠a no es un fondo.  
> Alma M√≠a nace del desorden personal y del caos global.  
> Es una forma de buscar orden, direcci√≥n, y una salida emocional y financiera a los desaf√≠os que enfrentamos.  
> Es el escudo que eleg√≠ para proteger mi esfuerzo, mi historia y a las personas que amo.

‚Äî **Santiago**, Fundador de Alma M√≠a

## Archivo: 0.1_Prompt_Base_Bitacora_Trading.md
Contenido:
# üìò Prompt Base 0.1 ‚Äì Bit√°cora Trading Alma M√≠a

## üéØ Objetivo del Sistema
Crear un archivo Excel funcional y escalable para registrar toda la operativa del fondo **Alma M√≠a**, incluyendo operaciones reales, estrategias aplicadas, backtesting, capitales aportados, evoluci√≥n del capital, y distribuci√≥n de ganancias entre inversores.

El sistema debe permitir trazabilidad completa de cada trade, claridad emocional y operativa, y c√°lculo autom√°tico de m√©tricas clave para la toma de decisiones.


### 2. `Trades_Ejecutados`
> Registro completo de todas las operaciones reales ejecutadas.

| Campo                  | Descripci√≥n                                                  |
|-----------------------|--------------------------------------------------------------|
| Trade #               | N√∫mero secuencial del trade                                   |
| Fecha                 | Fecha de ejecuci√≥n                                            |
| Activo                | Ej: BTC, ETH, XAUUSD                                          |
| Direcci√≥n             | Long / Short                                                 |
| Estrategia / Setup    | Identificador de la estrategia aplicada                      |
| Entry, SL, TP1‚ÄìTP4    | Niveles operativos                                            |
| Risk (%)              | Porcentaje de riesgo asignado (seg√∫n plan)                   |
| RR TP1 / TP2          | Ratio beneficio/riesgo alcanzado                             |
| Resultado             | TP1 / BE / SL                                                 |
| PnL (%) / PnL (USD)   | Resultado porcentual y en dinero                              |
| Comentarios Pre/Dur/Post | Reflexiones y notas emocionales en cada etapa del trade |


### 4. `Resultados_Backtesting`
> An√°lisis agregado del backtesting para evaluar estrategias.

| Campo               | Descripci√≥n                       |
|--------------------|-----------------------------------|
| Estrategia         | Nombre de la estrategia            |
| Cantidad de Trades | Total de operaciones               |
| Ganadores / Perdedores | Conteo individual               |
| Winrate (%)        | Porcentaje de efectividad          |
| Avg RR             | Ratio beneficio/riesgo promedio    |
| Profit Total (%)   | Ganancia acumulada simulada        |


### 6. `Resultados_Reales`
> Resumen diario o semanal con evoluci√≥n del capital.

| Campo               | Descripci√≥n                              |
|---------------------|------------------------------------------|
| Fecha               | D√≠a o semana analizada                   |
| Trades Totales      | Conteo                                  |
| Ganadores / Perdedor| Conteo                                  |
| PnL Diario (%) / USD| Rentabilidad del d√≠a                     |
| Capital Inicial     | Antes del per√≠odo                        |
| Capital Final       | Despu√©s del per√≠odo                      |
| Notas               | Cualquier detalle relevante              |


### 8. `Resumen_Global`
> Hoja de control con m√©tricas clave del sistema.

| Campo                   | Descripci√≥n                            |
|-------------------------|----------------------------------------|
| Total Trades            | Cantidad acumulada                     |
| Ganancia Total (%)      | Rentabilidad acumulada                 |
| Capital Actual (USD)    | Incluye aportes y ganancias            |
| Capital Inicial         | Del fondo                              |
| Winrate General (%)     | Efectividad hist√≥rica                  |
| √öltimo Update           | Fecha de actualizaci√≥n                 |



## üßæ Estructura General

### 1. üèõ Institucional

**Hoja: `Institucional`**

| Campo                     | Descripci√≥n                                                 |
|--------------------------|-------------------------------------------------------------|
| Fecha                    | Fecha del movimiento                                        |
| Tipo de Movimiento       | Ingreso / Retiro / Aporte externo / Ganancia / P√©rdida      |
| Monto                    | Valor num√©rico en USD                                       |
| Inversor                 | Nombre del aportante (si aplica)                            |
| Capital Actual           | Se recalcula con cada movimiento                            |
| Capital General          | Suma de todos los ingresos iniciales                        |
| Notas                    | Comentarios espec√≠ficos                                     |
| DD M√°ximo (por f√≥rmula)  | Se calcula como el m√°ximo retroceso desde el capital pico   |


### 4. üîÅ Backtesting ‚Äì Estrategias

**Hojas: `Backtesting_PuPuPu` y `Backtesting_NY_Open`**

| Campo                    | Descripci√≥n                                                  |
|--------------------------|--------------------------------------------------------------|
| Trade #                  | N√∫mero correlativo de backtest                               |
| Fecha                    | D√≠a de la observaci√≥n                                        |
| Activo                   | BTC / ETH                                                    |
| Direcci√≥n                | Long / Short                                                 |
| Entrada                  | Precio simulado                                              |
| TP1 ‚Äì TP4                | Objetivos simulados                                          |
| % TP1 ‚Äì % TP4            | Porcentajes simulados de salida                              |
| Total TP (%)             | Suma final de % cerrados                                     |
| Resultado Final (%)      | Total RR ponderado                                           |
| PnL USD (C.A.)           | Resultado sobre capital actual                               |
| PnL USD (C.G.)           | Resultado sobre capital general                              |
| Comentarios              | Observaciones                                                |


## üìÑ Hojas del Excel

1. `Institucional`
2. `Registro_PuPuPu`
3. `Registro_NY_Open`
4. `Backtesting_PuPuPu`
5. `Backtesting_NY_Open`

Cada hoja debe incluir t√≠tulos y f√≥rmulas, listas para ser completadas.



## Archivo: prompt_base_acces_control.md
Contenido:
# üõ°Ô∏è access_control.py ‚Äì Sistema base de control de acceso y trazabilidad

"""
Este m√≥dulo prepara la infraestructura base para controlar el acceso a memorias, registrar trazabilidad y aplicar futuras pol√≠ticas de roles.

‚úÖ Funciones clave requeridas:
1. verificar_acceso(memoria: dict, user_id: str, rol: str) -> bool
   - Devuelve True si el usuario tiene permiso de acceso.
   - Usa la l√≥gica:
     - Si visibilidad = "publica" ‚Üí acceso libre
     - Si visibilidad = "privada" ‚Üí solo owner puede acceder
     - Si visibilidad = "solo_sistema" ‚Üí solo si rol == "sistema"

2. registrar_traza(evento: str, memoria_id: str, user_id: str = None, metadata: dict = None)
   - Registra eventos en un log estructurado.
   - Formato: {"evento": "...", "memoria_id": "...", "user_id": "...", "timestamp": "...", ...}
   - Dejar listo para integrarse con Prometheus, Sentry o motores de auditor√≠a.

üí° Requisitos:
- Compatible con logging estructurado (`structlog` o `json`).
- No depender de frameworks externos ni de autenticaci√≥n real por ahora.
- Pensar en compatibilidad futura con JWT (`owner_id`, `scopes`, etc.).
- No escribir a base de datos todav√≠a. Solo log y l√≥gica local.

Este m√≥dulo NO maneja autenticaci√≥n, solo verificaci√≥n de permisos locales y logging de acciones.
"""


## Archivo: prompt_api_trading_y_cultivo.md
Contenido:
# üì¶ Prompt ‚Äì M√≥dulos API para Trading y Cultivo en ALMA_LOADER

"""
Crear dos archivos separados en `api/v1/`:

1. `trading.py`
2. `cultivo.py`

‚úÖ Ambos deben contener:
- Un `APIRouter()` de FastAPI con:
  - `prefix="/v1/trading"` o `"/v1/cultivo"`
  - `tags=["trading"]` o `["cultivo"]`
- Un endpoint base `GET /status` que devuelva JSON:
  {"modulo": "trading", "estado": "operativo"} o {"modulo": "cultivo", "estado": "operativo"}
- Comentarios y estructura preparada para ser extendida en el futuro
- Cada archivo debe ser aut√≥nomo, pero listo para ser importado en `main.py`

üí° El objetivo es dejar lista la modularizaci√≥n por √°rea (trading, cultivo, etc.) para que m√°s adelante se puedan registrar, consultar y analizar memorias espec√≠ficas por dominio.
"""


## Archivo: prompt_base_auth.md
Contenido:
# üîê core/auth.py ‚Äì M√≥dulo base de autenticaci√≥n para ALMA_LOADER

"""
Este m√≥dulo define una funci√≥n `get_current_user()` que simula la autenticaci√≥n de usuario.

‚úÖ Requisitos:
- Usar FastAPI y Depends
- No usar JWT a√∫n, pero dejar preparado para eso
- Devuelve un user_id de prueba (ej: "dev-user-001")
- Comentarios que indiquen c√≥mo migrar a OAuth2 / JWT real

üìé Este m√≥dulo ser√° usado en endpoints que requieran autenticaci√≥n
"""

# Ejemplo de uso en endpoint:
# from fastapi import Depends
# from core.auth import get_current_user
#
# async def crear_memoria(..., user_id: str = Depends(get_current_user)):
#     ...


## Archivo: Respuesta_cifrado.md
Contenido:
Aqu√≠ tienes la implementaci√≥n t√©cnica del m√≥dulo de cifrado, con mejoras de seguridad y robustez:

python

Copy

Download

# üîê cifrado.py ‚Äì Implementaci√≥n segura con Fernet

import os
import logging
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

FERNET_KEY_FILE = "fernet.key"
KEY_LENGTH = 32  # Longitud recomendada para Fernet
SALT = b'alma_loader_salt'  # Salt fijo para KDF (debe ser √∫nico en producci√≥n)

# --------------------------
# üìå Funci√≥n: generar_clave()
# --------------------------
def generar_clave(password: bytes = None) -> bytes:
    """Genera nueva clave Fernet segura usando KDF o aleatoria"""
    if password:
        # Deriva clave segura desde contrase√±a usando PBKDF2
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=KEY_LENGTH,
            salt=SALT,
            iterations=100000,
            backend=default_backend()
        )
        key = base64.urlsafe_b64encode(kdf.derive(password))
    else:
        # Genera clave aleatoria
        key = Fernet.generate_key()
    
    # Guarda clave en archivo seguro
    try:
        with open(FERNET_KEY_FILE, "wb") as key_file:
            key_file.write(key)
        os.chmod(FERNET_KEY_FILE, 0o400)  # Permisos de solo lectura
    except IOError as e:
        logger.error(f"Error guardando clave: {str(e)}")
        raise
    
    return key

# --------------------------
# üìå Funci√≥n: cargar_clave()
# --------------------------
def cargar_clave() -> Fernet:
    """Carga y devuelve instancia Fernet con validaci√≥n de seguridad"""
    try:
        with open(FERNET_KEY_FILE, "rb") as key_file:
            key = key_file.read()
        
        # Verifica formato v√°lido de clave Fernet
        if len(key) != 44:  # Longitud base64 para 32 bytes
            raise ValueError("Clave con formato inv√°lido")
            
        return Fernet(key)
    except FileNotFoundError:
        logger.error("Clave no encontrada. Generando nueva clave...")
        return Fernet(generar_clave())
    except Exception as e:
        logger.critical(f"Error cargando clave: {str(e)}")
        raise

# --------------------------------
# üìå Funci√≥n: cifrar_contenido()
# --------------------------------
def cifrar_contenido(memoria: dict) -> dict:
    """Cifra contenido de memoria marcada como privada"""
    try:
        if memoria.get("visibilidad") != "privada":
            return memoria
        
        # Crea copia para no modificar el original
        memoria_cifrada = memoria.copy()
        contenido = memoria_cifrada["contenido"]
        
        if not _esta_cifrado(contenido):
            fernet = cargar_clave()
            memoria_cifrada["contenido"] = fernet.encrypt(contenido.encode()).decode()
            logger.info("Contenido cifrado correctamente")
        
        return memoria_cifrada
    except KeyError:
        logger.error("Campo 'contenido' no existe en la memoria")
        return memoria
    except InvalidToken:
        logger.error("Error de autenticaci√≥n en cifrado")
        return memoria
    except Exception as e:
        logger.error(f"Error cifrando contenido: {str(e)}")
        return memoria

# --------------------------------
# üìå Funci√≥n: descifrar_contenido()
# --------------------------------
def descifrar_contenido(memoria: dict) -> dict:
    """Descifra contenido de memoria privada"""
    try:
        if memoria.get("visibilidad") != "privada":
            return memoria
        
        memoria_descifrada = memoria.copy()
        contenido = memoria_descifrada["contenido"]
        
        if _esta_cifrado(contenido):
            fernet = cargar_clave()
            memoria_descifrada["contenido"] = fernet.decrypt(contenido.encode()).decode()
            logger.info("Contenido descifrado correctamente")
        
        return memoria_descifrada
    except InvalidToken:
        logger.error("Clave inv√°lida o contenido alterado")
        return memoria
    except Exception as e:
        logger.error(f"Error descifrando contenido: {str(e)}")
        return memoria

# --------------------------
# üîê Funciones de apoyo
# --------------------------
def _esta_cifrado(texto: str) -> bool:
    """Valida si un texto est√° cifrado (formato Fernet v√°lido)"""
    try:
        # Verifica formato base64url seguro
        if len(texto) % 4 != 0:
            return False
        decoded = base64.urlsafe_b64decode(texto)
        return len(decoded) == 128  # Longitud t√≠pica token Fernet
    except:
        return False

# --------------------------
# üõ°Ô∏è Test b√°sico de seguridad
# --------------------------
if __name__ == "__main__":
    # Genera nueva clave si no existe
    if not os.path.exists(FERNET_KEY_FILE):
        generar_clave()
    
    test_memoria = {
        "visibilidad": "privada",
        "contenido": "Datos sensibles: API_KEY=12345",
        "tags": ["#secreto"]
    }
    
    # Test cifrado
    cifrado = cifrar_contenido(test_memoria)
    print(f"Cifrado: {cifrado['contenido']}")
    
    # Test descifrado
    descifrado = descifrar_contenido(cifrado)
    print(f"Descifrado: {descifrado['contenido']}")

### üî• Mejoras clave implementadas:

1. **Generaci√≥n Segura de Claves**:
    
    - Usa PBKDF2 con 100,000 iteraciones si se provee contrase√±a
        
    - Permite generaci√≥n aleatoria (modo recomendado)
        
    - Protecci√≥n de archivo de clave (permisos 400)
        
2. **Validaci√≥n de Integridad**:
    
    - Verifica formato de clave Fernet
        
    - Detecta contenido cifrado con checks estructurales
        
    - Manejo espec√≠fico de¬†`InvalidToken`
        
3. **Robustez Operacional**:
    
    - Crea copias de los diccionarios para no modificar originales
        
    - Logging detallado con distintos niveles
        
    - Manejo defensivo de excepciones
        
4. **Compatibilidad y Seguridad**:
    
    - Codificaci√≥n/decodificaci√≥n UTF-8 segura
        
    - Cumple con formato JSON (strings base64)
        
    - Prevenci√≥n de re-cifrado accidental
        
5. **Extensibilidad**:
    
    - Sistema listo para rotaci√≥n de claves (agregar versi√≥n a los datos)
        
    - Funciones auxiliares para futura integraci√≥n con sistemas de gesti√≥n de secretos
        

### üìå Uso recomendado:

python

Copy

Download

# En el sistema principal (ej: sqlite_storage.py)
from cifrado import cifrar_contenido, descifrar_contenido

# Antes de guardar
memoria = cifrar_contenido(memoria_en_bruto)

# Al recuperar
memoria_original = descifrar_contenido(memoria_cifrada)

### ‚ö†Ô∏è Consideraciones de Seguridad:

1. **Almacenamiento de Claves**: En producci√≥n, usar sistemas como:
    
    - AWS Secrets Manager
        
    - HashiCorp Vault
        
    - Variables de entorno encriptadas
        
2. **Rotaci√≥n de Claves**: Implementar l√≥gica para:
    
    - Cifrar con nueva clave
        
    - Mantener claves anteriores para descifrado
        
    - Actualizar registros peri√≥dicamente
        
3. **Protecci√≥n de Memoria**: Usar tipos de memoria segura (ej:¬†`sensitive_strings`) para evitar leaks en logs.
    

Esta implementaci√≥n mantiene el desacople del sistema principal mientras provee seguridad enterprise-grade.

## Archivo: prompt_base_main.md
Contenido:
# üöÄ main.py ‚Äì Punto de entrada para ALMA_LOADER API

"""
Este archivo define el punto de entrada principal de la API FastAPI del sistema ALMA_LOADER.

‚úÖ Requisitos:
1. Crear una instancia de `FastAPI()` con par√°metros b√°sicos
2. Incluir el router de memorias ubicado en `api/v1/memorias.py` con `include_router`
3. Agregar configuraci√≥n b√°sica de CORS (permitir `*` para desarrollo)
4. Configurar logging global para usarlo en todos los m√≥dulos
5. Agregar evento `startup` (opcional) para verificar conexi√≥n con dependencias cr√≠ticas:
   - SQLite
   - FAISS (si aplica)
   - Clave Fernet cargada correctamente
6. La app debe estar lista para ejecutarse con:
   `uvicorn main:app --reload`

üõ°Ô∏è Nota:
- No incluir endpoints ra√≠z como `/` o `/docs` personalizados
- Usar `tags=["memorias"]` desde los routers ya configurados

üìÅ Estructura asumida:
- main.py
- /api/v1/memorias.py
- /core/memoria_saver.py
"""

# Ejemplo m√≠nimo de ejecuci√≥n:
# $ uvicorn main:app --reload


## Archivo: prompt_base_memoria_saver.md
Contenido:
# üß† memoria_saver.py ‚Äì Guardado robusto con rollback y estado

"""
Este m√≥dulo implementa una funci√≥n `guardar_memoria(memoria: dict)` con control de errores, estado y sincronizaci√≥n entre SQLite y FAISS.

Requisitos:
1. Validar que el input cumple con `schema_base.json` (usar validador externo).
2. Intentar guardar primero en SQLite (usando `sqlite_storage.py`)
3. Luego guardar el vector en FAISS (usando `vector_storage.py`)
4. Si FAISS falla:
   - Registrar el error
   - Actualizar el campo `"estado"` de la memoria a `"pendiente_vectorizaci√≥n"`
   - Mantener el registro en SQLite
5. Si SQLite falla:
   - Cancelar el proceso y no insertar nada
   - Devolver estado `"error"` y mensaje
6. Registrar logs estructurados con `logging` o `structlog`.
7. Aplicar `try/except` por cada capa
8. El retorno debe ser un diccionario con:
   - `"resultado"`: "ok" o "error"
   - `"estado"`: estado final de la memoria
   - `"mensaje"`: breve explicaci√≥n
9. Compatibilidad futura con `on_memoria_guardada()` y `HookManager`.

Dependencias internas:
- `sqlite_storage.insertar_memoria()`
- `vector_storage.vectorizar_y_guardar()`
- `validador.validar_esquema()`
- `cifrado.cifrar_contenido()`
"""

# üìå Funci√≥n principal: guardar_memoria(memoria: dict) -> dict
# Validar ‚Üí Cifrar si es privada ‚Üí Guardar en SQLite ‚Üí Guardar vector en FAISS ‚Üí actualizar estado

# ‚ö†Ô∏è El m√≥dulo no debe depender de frameworks externos ni de FastAPI (aut√≥nomo para usar en backend o terminal).


## Archivo: prompt_base_memorias.md
Contenido:
# üß† api/v1/memorias.py ‚Äì Endpoint de ingreso de memorias ALMA_LOADER

"""
Este m√≥dulo define el endpoint REST POST /v1/memorias para registrar nuevas memorias en el sistema ALMA_LOADER.

‚úÖ Requisitos funcionales:
1. Usar FastAPI y definir un `APIRouter()`
2. Endpoint: POST /v1/memorias
3. Entrada: JSON con estructura validada por Pydantic (modelo `MemoriaIn`)
   - Debe incluir obligatoriamente: `id`, `contenido`, `categoria`, `tags`, `visibilidad`, `owner_id`
4. L√≥gica:
   - Validar que el JSON cumpla el esquema
   - Llamar a `guardar_memoria()` del m√≥dulo `core/memoria_saver.py`
   - Devolver el resultado como JSON
5. Respuesta:
   - C√≥digo 200 si fue exitoso
   - C√≥digo 400 si hubo error de validaci√≥n o de guardado
6. El m√≥dulo debe ser desacoplado para poder incluirse con `include_router()` en `main.py`

üì¶ Estructura de carpetas:
- Este archivo debe estar en `api/v1/memorias.py`
- La funci√≥n `guardar_memoria` se importa desde `core.memoria_saver`

üìé Extras:
- Usar modelos de Pydantic para validaci√≥n (`MemoriaIn`, `MemoriaOut`)
- Agregar `summary` y `description` en el decorador del endpoint
- Anotar tipos para OpenAPI y compatibilidad con documentaci√≥n autom√°tica

üîí Nota:
A√∫n no incluir autenticaci√≥n real, pero el campo `owner_id` es obligatorio.
"""

# Ejemplo de entrada JSON esperada:
# {
#     "id": "mem-001",
#     "contenido": "Hoy oper√© BTC y aprend√≠ sobre correlaciones",
#     "categoria": "trading",
#     "tags": ["#btc", "#estrategia"],
#     "visibilidad": "privada",
#     "owner_id": "user-123"
# }


## Archivo: prompt_test_memoria_post.md
Contenido:
# üß™ test_memoria_post.py ‚Äì Prueba E2E para /v1/memorias

"""
Crear un archivo de test con:
1. Test POST exitoso con datos completos
2. Test 400 por campos faltantes
3. Test 403 por owner_id inv√°lido
Usar TestClient de FastAPI
"""

from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

# Datos v√°lidos
memoria_valida = {
    "id": "test-mem-001",
    "contenido": "Prueba de contenido",
    "categoria": "test",
    "tags": ["#test"],
    "visibilidad": "privada",
    "owner_id": "dev-user-001"
}

def test_post_memoria_ok():
    response = client.post("/v1/memorias", json=memoria_valida)
    assert response.status_code == 200
    assert response.json()["resultado"] == "ok"

def test_post_memoria_missing_field():
    memoria_incompleta = memoria_valida.copy()
    del memoria_incompleta["contenido"]
    response = client.post("/v1/memorias", json=memoria_incompleta)
    assert response.status_code == 422  # Pydantic validation error

def test_post_memoria_owner_mismatch():
    memoria_falsa = memoria_valida.copy()
    memoria_falsa["owner_id"] = "otro-user"
    response = client.post("/v1/memorias", json=memoria_falsa)
    assert response.status_code == 403


