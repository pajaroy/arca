import json
import argparse
from pathlib import Path
from datetime import datetime
from colorama import Fore, Style, init

# Inicializar colorama
init(autoreset=True)

SEVERITY_COLORS = {
    'high': Fore.RED,
    'medium': Fore.YELLOW,
    'low': Fore.GREEN
}

def cargar_alertas(ruta_alertas: Path):
    try:
        with open(ruta_alertas, 'r', encoding='utf-8') as f:
            datos = json.load(f)
        if 'alertas' not in datos or 'total' not in datos:
            raise ValueError("Estructura del archivo de alertas invÃ¡lida")
        return datos
    except FileNotFoundError:
        print(f"{Fore.RED}Error: Archivo de alertas no encontrado en {ruta_alertas}")
        return None
    except json.JSONDecodeError:
        print(f"{Fore.RED}Error: Archivo de alertas con formato invÃ¡lido")
        return None

def determinar_severidad(score: float) -> tuple:
    if score >= 0.8:
        return (SEVERITY_COLORS['high'], 'ðŸ”´')
    elif 0.6 <= score < 0.8:
        return (SEVERITY_COLORS['medium'], 'ðŸŸ¡')
    else:
        return (SEVERITY_COLORS['low'], 'ðŸŸ¢')

def mostrar_alertas_consola(alertas: list, filtro_tipo: str = None):
    alertas_filtradas = [a for a in alertas if not filtro_tipo or a['tipo_alerta'] == filtro_tipo]
    if not alertas_filtradas:
        print(f"{Fore.YELLOW}No hay alertas para mostrar{Style.RESET_ALL}")
        return
    print(f"\n{Fore.CYAN}ðŸ”” ALERTAS DETECTADAS ({len(alertas_filtradas)}):{Style.RESET_ALL}\n")
    for alerta in sorted(alertas_filtradas, key=lambda x: x['score'], reverse=True):
        color, simbolo = determinar_severidad(alerta['score'])
        header = f"{color}{simbolo} {alerta['memoria_origen']} â†” {alerta['memoria_conflictiva']}{Style.RESET_ALL}"
        print(f"{header}")
        print(f"   Tipo: {alerta['tipo_alerta']}")
        print(f"   Score: {color}{alerta['score']:.2f}{Style.RESET_ALL}")
        print(f"   DescripciÃ³n: {alerta['descripcion']}\n")

def exportar_alertas_md(alertas: list, ruta_salida: Path):
    fecha_actual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    contenido = [
        "# ðŸ”” Resumen de Alertas â€“ ALMA_FEEDBACK",
        f"ðŸ“… **Fecha:** {fecha_actual}",
        f"**Total de alertas:** {len(alertas)}\n",
        "---"
    ]
    for alerta in alertas:
        bloque = [
            f"### {alerta['memoria_origen']} â†” {alerta['memoria_conflictiva']}",
            f"- **Tipo:** `{alerta['tipo_alerta']}`",
            f"- **Score:** `{alerta['score']:.2f}`",
            f"- **DescripciÃ³n:** {alerta['descripcion']}",
            "---"
        ]
        contenido.extend(bloque)
    with open(ruta_salida, 'w', encoding='utf-8') as f:
        f.write('\n'.join(contenido))

def main():
    parser = argparse.ArgumentParser(description='Visualizador de alertas ALMA')
    parser.add_argument('--filtro', type=str, help='Filtrar por tipo de alerta')
    args = parser.parse_args()
    script_dir = Path(__file__).parent
    ruta_alertas = script_dir.parent.parent / 'logs' / 'alertas.json'
    ruta_md = script_dir.parent.parent / 'logs' / 'alertas_resumen.md'
    datos = cargar_alertas(ruta_alertas)
    if datos:
        mostrar_alertas_consola(datos['alertas'], args.filtro)
        exportar_alertas_md(datos['alertas'], ruta_md)
        print(f"{Fore.GREEN}Resumen exportado a: {ruta_md}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()