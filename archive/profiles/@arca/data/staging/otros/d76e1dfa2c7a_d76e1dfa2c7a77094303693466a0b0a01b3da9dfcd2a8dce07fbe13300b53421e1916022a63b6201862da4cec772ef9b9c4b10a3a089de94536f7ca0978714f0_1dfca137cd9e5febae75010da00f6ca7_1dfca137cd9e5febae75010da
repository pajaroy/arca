# üåÄ Metodolog√≠a de Sprints ‚Äì ALMA_RESIST (v2)

üìÖ Versi√≥n: 2.0  
üìÅ Archivo: metodologia_sprints_v2.md  
üéØ Objetivo: Establecer un flujo de trabajo modular, trazable y sem√°ntico para gestionar sprints dentro del sistema ALMA_RESIST, optimizado para una persona con soporte de IA y automatizaci√≥n futura.


## üîÅ Ciclo de Vida del Sprint

### Estados posibles y transiciones

| Estado     | Acci√≥n Requerida                                                                 |
|------------|-----------------------------------------------------------------------------------|
| Activo     | Sprint en ejecuci√≥n                                                              |
| Cerrado    | Checklist validado, changelog actualizado, metadatos `exit_criteria` cumplidos   |
| Archivado  | Sprint movido a carpeta `docs/versiones/`, registrado en `Methodology_Index.md`  |

sprint_id: 2.3
topic: "Integraci√≥n de modelo LLM"
status: "active"
started: "2025-05-21"
tags: ["llm", "ia", "memoria"]
exit_criteria: ["changelog_updated", "docs_generated"]
linked_modules:
  - name: "core/cli.py"
    version: ">=2.3"
  - name: "resumen.py"
    version: "0.5"
blocks: ["Sprint_3.1_LLM_Integration"]

## üìù Estructura del Archivo de Sprint

```markdown
# Sprint X ‚Äì T√≠tulo

üìÖ Inicio: YYYY-MM-DD  
üåÄ Estado: activo / cerrado / archivado  
üì¶ Versi√≥n asociada: vX.X.X


## üìã Checklist de tareas
- [x] Implementar comando `!ayuda` en CLI
- [ ] Migrar loader a modelo LLM local
- [ ] Escribir test en `scripts/test_loader.py`


## üóÇÔ∏è Progreso del Sprint
| Tarea                              | Estado | Responsable   |
|------------------------------------|--------|----------------|
| Implementar validaci√≥n IA inicial  | üü°     | Operador + IA |
| Crear script de resumen autom√°tico | üî¥     | IA             |


## üìé Archivos relacionados
- `core/cli.py`
- `changelog.md`
- `docs/sprints_activos/Sprint_2.3_LLM.md`


## üß† IA como Asistente de Sprint

Casos de uso:

- Verificaci√≥n autom√°tica de `exit_criteria`
- Generaci√≥n del resumen para hitos.md
- Validaci√≥n de consistencia entre YAML y archivos afectados


## üìò Referencias

- `metodologia_estructura_modular_v2.md`
- `Methodology_Index.md`
- `Sprint_2.2_Metodologias_Base.md`



### üßæ Ap√©ndice: Registro Final Detallado (Sprint Closure)

> Este ap√©ndice detalla los pasos concretos que deben ejecutarse al cerrar cualquier sprint, para garantizar trazabilidad, documentaci√≥n formal y empaquetado versionado.


#### üì¶ 2. Archivos requeridos para cierre

Mover o copiar a `docs/versiones/vX.X.X_NOMBRE/`:

- `README.md`, `version.md` (explicaci√≥n y control)
- `changelog.md` (entrada espec√≠fica del sprint)
- `hitos.md`, `lecciones_aprendidas.md`, `TODO.md`
- `mapeo_sprint_archivos.md`, `log_integracion.md`
- Bit√°cora con la fecha del cierre: `bitacoras/bitacora_YYYY-MM-DD.md`
- `CONTEXT.md`, `index.md` actualizados si corresponde


#### üîÅ 4. Registro en la historia

Actualizar:

- `hitos.md`: Nuevo hito con ID y descripci√≥n clara
- `lecciones_aprendidas.md`: Reflexi√≥n t√©cnica del sprint
- `changelog.md`: Con `## [vX.X.X] - YYYY-MM-DD`
- `mapeo_sprint_archivos.md`: Relaci√≥n entrada/salida
- `log_integracion.md`: Qu√© se agreg√≥, archiv√≥ o reemplaz√≥


Esta rutina debe aplicarse sistem√°ticamente al finalizar cualquier sprint para evitar deuda t√©cnica, documentaci√≥n inconexa o trazabilidad incompleta.
