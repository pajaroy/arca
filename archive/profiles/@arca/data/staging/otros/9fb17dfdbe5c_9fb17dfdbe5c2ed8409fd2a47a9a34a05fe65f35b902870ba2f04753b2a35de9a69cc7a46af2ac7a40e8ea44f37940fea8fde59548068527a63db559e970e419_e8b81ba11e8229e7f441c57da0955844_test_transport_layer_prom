---
module: prompts/test_transport_layer_prompt
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# âœ… Solicitud de Test â€“ `test_transport_layer.py` â€“ ALMA_RESIST Sprint 2.6

Este test debe validar el correcto funcionamiento del mÃ³dulo `transport_layer.py`, el cual se encarga de:

- Validar datos contra contratos JSON Schema
- Guardar prompts y respuestas en disco como `.json`
- Recuperar entradas previas
- Mantener una rotaciÃ³n de archivos mÃ¡xima

---

## ğŸ“˜ Requisitos del mÃ³dulo

### MÃ©todos clave a testear

- `send(data: dict, endpoint: str)`
- `receive(endpoint: str) -> dict`
- `list_entries(endpoint: str) -> list[Path]`
- `purge_old_entries(endpoint: str, max_files: int)`

Los esquemas a validar estÃ¡n en:

- `docs/contracts/schema_prompt.json`
- `docs/contracts/schema_respuesta.json`

---

## ğŸ§ª Casos de prueba sugeridos

| Caso                                               | Resultado esperado                        |
|----------------------------------------------------|-------------------------------------------|
| EnvÃ­o de prompt vÃ¡lido                             | Archivo `.json` creado correctamente      |
| EnvÃ­o de respuesta vÃ¡lida                          | Archivo `.json` creado y validado         |
| EnvÃ­o de prompt malformado (sin campo requerido)   | Lanza `jsonschema.ValidationError`        |
| RecuperaciÃ³n de Ãºltima entrada                     | `receive()` devuelve JSON esperado        |
| Listado de entradas                                | `list_entries()` devuelve lista ordenada  |
| RotaciÃ³n de archivos (`purge_old_entries`)         | Borra archivos antiguos, mantiene mÃ¡ximo  |
| Directorio inexistente                             | Se crea automÃ¡ticamente                   |
| Contratos corruptos o ausentes                     | Lanza `RuntimeError`                      |

---

## ğŸ”§ Consideraciones tÃ©cnicas

- Usar `pytest`
- Usar `tmp_path` o `tmp_path_factory` para trabajar en disco temporal
- Crear contratos mock o usar los reales si estÃ¡n disponibles
- Testear tanto `prompt` como `respuesta` como tipos de entrada
- Validar que la escritura sea estructurada y no genere corrupciÃ³n

---

## ğŸ“‚ Archivos relacionados

- `transport_layer.py` (mÃ³dulo a testear)
- `schema_prompt.json`
- `schema_respuesta.json`
- `test_model_wrapper.py`, `test_api_responder.py` (ya implementados)

---

Â¿PodÃ©s generar el archivo `test_transport_layer.py` siguiendo esta estructura y casos sugeridos?
