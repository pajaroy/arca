## üöÄ Recomendaciones para integraci√≥n futura

- Automatizar lectura YAML ‚Üí `metadata_memorias.csv`
- Usar estas memorias como fuente para `alma_chat.py` o `alma_sync.py`
- Permitir filtros por `tipo`, `prioridad`, `estado`, `fecha`, etc.
- Sincronizar estas carpetas como origen oficial del sistema ALMA LIBRE

## Archivo: 1.0.1_mapa_relaciones_memorias.md
Contenido:

# üåê Mapa de Relaciones ‚Äì Sistema de Memorias ALMA LIBRE

Este documento describe c√≥mo se relacionan entre s√≠ las carpetas de memorias, m√≥dulos, cuadernos y empresas dentro del ecosistema ALMA LIBRE.


## üè¢ Conexiones Institucionales

| Empresa           | Relacionada con...                                                |
|------------------|--------------------------------------------------------------------|
| `fondo_alma_mia` | `gestor_trading`, `finanzas_personales`, `trading`, `fondo_inversion`, `bitacora_central` |
| `cannabird`      | `canavir_cultivo`, `medicina_alternativa`, `reflexion`, `programacion`, `creatividad_y_empresa` |


## üìò Ejemplo de memoria conectada:

```yaml
```

## Archivo: 1.0.2_Sistema_de_Memoria.md
Contenido:

# üß† Sistema de Memorias Vivas ‚Äì ALMA LIBRE v1.0.2 (memoria_ampliada)

Este documento define la estructura actualizada de carpetas para almacenar memorias escritas manualmente en formato `.md`, con encabezado YAML. Estas memorias componen el sistema nervioso del proyecto ALMA LIBRE: su base de conocimiento emocional, t√©cnico, estrat√©gico y ahora tambi√©n institucional.


## üîó Relaciones entre Carpetas

- `alma_general` ‚Üí con todos los cuadernos y `bitacora_central`
- `reflexion` ‚Üí con `alma_general`, `psicolog√≠a_trading`, `medicina_alternativa`
- `medicina_alternativa` ‚Üí con `salud_RPL`, `bitacora_central`
- `geopol√≠tica_actualidad` ‚Üí con `noticias_globales`, `bitacora_central`
- `fondo_inversion` ‚Üí con `gestor_trading`, `finanzas_personales`, `creatividad_y_empresa`, `fondo_alma_mia`
- `gestor_trading` ‚Üí con `trading`, `fondo_alma_mia`, `noticias_globales`, `finanzas_personales`
- `programacion` ‚Üí con `fondo_inversion`, `gestor_trading`, `finanzas_personales`, `creatividad_y_empresa`, `cannabird`
- `canavir_cultivo` ‚Üí con `cannabird`, `medicina_alternativa`, `reflexion`, `programacion`
- `bitacora_central` ‚Üí espejo y nodo central del sistema

tipo: memoria
titulo: "T√≠tulo descriptivo"
fecha: 2025-04-24
conectada_a: ["modulo_x", "cuaderno_y", "empresa_z"]
prioridad: alta
estado: activa

## üöÄ Recomendaciones para integraci√≥n futura

- Automatizar lectura YAML ‚Üí `metadata_memorias.csv`
- Visualizaci√≥n tipo red en `MAPA_INTERACTIVO.md`
- Sincronizar estas carpetas con Obsidian, Notion y terminal
- Crear validador de integridad de relaciones cruzadas

## Archivo: 1.0.3_mapa_relaciones_memorias.md
Contenido:

# üåê Mapa de Relaciones ‚Äì Sistema de Memorias ALMA LIBRE v1.0.3

Este documento describe c√≥mo se relacionan entre s√≠ las carpetas de memorias, m√≥dulos, cuadernos y empresas dentro del ecosistema ALMA LIBRE.


## üè¢ Conexiones Institucionales

| Empresa           | Relacionada con...                                                |
|------------------|--------------------------------------------------------------------|
| `fondo_alma_mia` | `gestor_trading`, `finanzas_personales`, `trading`, `fondo_inversion`, `bitacora_central`, `geopol√≠tica_actualidad` |
| `cannabird`      | `canavir_cultivo`, `medicina_alternativa`, `reflexion`, `programacion`, `creatividad_y_empresa` |


## üìò Ejemplo de memoria conectada:

```yaml
```

## Archivo: 1.0.4_Sistema_de_Memoria.md
Contenido:

# üß† Sistema de Memorias Vivas ‚Äì ALMA LIBRE v1.0.4 (post-Ronda0)

Este documento expande la estructura del sistema de memorias tras la Ronda 0 de dise√±o estrat√©gico y filos√≥fico del proyecto ALMA LIBRE. Se integra el rol de las IAs, los niveles de interacci√≥n con las memorias y la capacidad de aprendizaje del sistema.


## üîó Relaciones entre Carpetas

Se mantienen las conexiones anteriores y se a√±ade profundidad emocional, institucional y estrat√©gica.

### Relaciones clave actualizadas:

- `alma_general` ‚Üí n√∫cleo sem√°ntico vinculado a todos los cuadernos
- `reflexion` ‚Üí ahora tambi√©n asociada a `relacion_humano_ia.md`
- `geopol√≠tica_actualidad` ‚Üí clave en decisiones de `fondo_inversion` y `fondo_alma_mia`
- `bitacora_central` ‚Üí registro emocional, t√©cnico y narrativo completo del sistema
- `relacion_humano_ia` ‚Üí interact√∫a con todos los chats, sesiones personales y la IA integrada

tipo: memoria
titulo: "T√≠tulo de la entrada"
fecha: 2025-04-24
estado: activa
conectada_a: ["modulo_x", "cuaderno_y", "empresa_z"]
prioridad: alta
nivel_interactivo: contextual

## üîÅ Nuevos estados posibles (desde Ronda 0)

- `estado: activa`
- `estado: archivada`
- `estado: backup`


**Versi√≥n:** 1.0.4  
**Fecha:** 2025-04-24  
**Actualizado tras:** Ronda 0  
**Autor√≠a:** Santi & ALMA



## üìÅ Relaciones Principales

| Origen                | Conectado con...                                                                 |
|-----------------------|----------------------------------------------------------------------------------|
| `alma_general`        | `bitacora_central`, todos los cuadernos (`reflexion`, `geopol√≠tica_actualidad`, etc.) |
| `reflexion`           | `alma_general`, `psicolog√≠a_trading`, `medicina_alternativa`, `canavir_cultivo`, `relacion_humano_ia.md` |
| `medicina_alternativa`| `salud_RPL`, `bitacora_central`, `alma_general`, `reflexion`                    |
| `geopol√≠tica_actualidad` | `noticias_globales`, `bitacora_central`, `fondo_inversion`, `fondo_alma_mia`   |
| `fondo_inversion`     | `gestor_trading`, `finanzas_personales`, `creatividad_y_empresa`, `fondo_alma_mia`, `geopol√≠tica_actualidad` |
| `gestor_trading`      | `trading`, `finanzas_personales`, `fondo_inversion`, `noticias_globales`, `fondo_alma_mia` |
| `programacion`        | `gestor_trading`, `finanzas_personales`, `creatividad_y_empresa`, `cannabird`     |
| `canavir_cultivo`     | `cannabird`, `reflexion`, `medicina_alternativa`, `programacion`                  |
| `bitacora_central`    | Todos los m√≥dulos, cuadernos y empresas (registro t√©cnico y emocional global)     |


## üß† Conexiones emocionales y de aprendizaje

| Nodo                     | Conectado con...                                          |
|--------------------------|-----------------------------------------------------------|
| `relacion_humano_ia.md` | `reflexion`, `bitacora_central`, todas las sesiones IA‚Äìhumano |
| `base_√©tica.md`         | `generales/`, `reflexion`, `alma_general`                 |
| `filosofia_del_sistema.md` | `alma_general`, `programacion`, `cuadernos_tematicos`       |

titulo: "Impacto de la relaci√≥n IA-humano en la toma de decisiones"
tipo: emocional
fecha: 2025-04-25
conectada_a: ["reflexion", "bitacora_central", "relacion_humano_ia.md"]
prioridad: alta
estado: activa

**√öltima revisi√≥n:** 2025-04-24  
**Versi√≥n del sistema:** ALMA LIBRE 1.0.4  
**Editado por:** Santi & ALMA



## üìò ¬øQu√© contiene esta carpeta?

Esta carpeta funciona como zona de dise√±o y pruebas para estructurar el sistema de memorias del ecosistema ALMA LIBRE.  
Aqu√≠ se encuentran:

- Documentos fundamentales de la **Ronda 0** (filosof√≠a, prop√≥sito, estados)
- Estructura del sistema de memorias (`Sistema_de_Memoria.md`)
- Mapa l√≥gico de conexiones internas (`Mapa_de_Relaciones.md`)
- Registro de versiones y actualizaciones (`Update_ALMA_LIBRE_X.md`)
- Archivos `speech` y ejemplos de interacci√≥n IA-humano


## üì¶ Instrucciones

- **NO sobrescribir ni eliminar archivos sin registrar un changelog**
- Esta carpeta representa la **zona de incubaci√≥n de la conciencia documental de ALMA**
- Ser√° migrada parcialmente cuando el sistema de memoria est√© validado y completo

## Archivo: Update_ALMA_LIBRE_1.0.4.md
Contenido:

# üì¶ ALMA LIBRE ‚Äì Update 1.0.4

**Fecha de actualizaci√≥n:** 2025-04-24  
**Versi√≥n:** 1.0.4  
**Origen de cambios:** Consolidaci√≥n de la Ronda 0 ‚Äì Fundamentos del sistema de memorias


### üåê Mapa de Relaciones

- Se actualiza a `1.0.4_mapa_relaciones_memorias.md`
- Se vincula `relacion_humano_ia.md` con `reflexion`, `bitacora_central`, sesiones IA
- Se incorpora `base_√©tica.md` y `filosofia_del_sistema.md` como nodos centrales
- Se mantiene trazabilidad con m√≥dulos, cuadernos y empresas


**Siguiente paso:** Ronda 1 ‚Äì Desarrollo profundo de relaciones entre carpetas espec√≠ficas

**Editado por:** Santi & ALMA



## 1. ¬øQu√© rol cumple el sistema de memorias?

El sistema de memorias incluye todo. Es el nodo central que conecta:

- M√≥dulos funcionales
- Cuadernos tem√°ticos
- Empresas activas
- Bit√°cora general

La memoria funciona como red viva que interconecta el sistema. Debe estar accesible desde terminal y en el futuro desde un entorno web, permitiendo que un chat integrado pueda responder bas√°ndose en lo que est√° escrito en las carpetas de memoria.


## 3. ¬øC√≥mo distinguir memorias activas de archivadas?

Este punto est√° en evoluci√≥n. Por ahora se propone:

- `estado: activa` ‚Üí memoria viva, operativa
- `estado: archivada` ‚Üí queda registrada, pero no entra en juego
- `estado: backup` ‚Üí versiones anteriores, de resguardo

Puede dividirse por carpetas o solo indicarse desde el YAML interno.


## 5. ¬øDebe aprender el sistema?

S√≠. ALMA debe guardar todo lo escrito en cada chat o terminal. No s√≥lo memorias expl√≠citas, sino tambi√©n:

- Lo que Santi dice aunque no lo marque para guardar
- Reflexiones diarias
- Bit√°coras de interacci√≥n humano‚ÄìIA
- Relaciones emocionales y evoluci√≥n personal

Todo eso debe quedar reflejado en una carpeta base como:
```
95_memorias_base/generales/relacion_humano_ia.md
```

Esto permitir√° que ALMA sea capaz de:

- Proponer nuevas conexiones
- Reconocer patrones emocionales
- Entender la evoluci√≥n de su v√≠nculo con su creador

## Archivo: 1.0.2_Integracion_a_Whitepaper.md
Contenido:
# 4 ‚Äì Navegaci√≥n y Organizaci√≥n Funcional

## 4.1 Navegaci√≥n Funcional del Sistema

El sistema ALMA LIBRE se estructura a trav√©s de **cuadernos tem√°ticos** y **m√≥dulos funcionales** que trabajan en conjunto para articular pensamiento, ejecuci√≥n y evoluci√≥n.

A lo largo del desarrollo, cada √°rea tem√°tica del sistema estar√° dividida en:
- Un **cuaderno**, donde se planifican, reflexionan y conceptualizan ideas.
- Un **m√≥dulo**, donde se ejecutan, registran y miden esas ideas.

Esta divisi√≥n no es r√≠gida, sino complementaria: los cuadernos alimentan a los m√≥dulos, y los m√≥dulos retroalimentan a los cuadernos.




### üîó Relaci√≥n entre Cuadernos y M√≥dulos

- **01 ‚Äì Alma General** ‚ÜîÔ∏è **Bit√°cora Central**
- **02 ‚Äì Reflexi√≥n (psicotrading, introspecci√≥n)** ‚ÜîÔ∏è **Psicolog√≠a del Trading / Salud**
- **03 ‚Äì Medicina Alternativa** ‚ÜîÔ∏è **Salud y RPL**
- **04 ‚Äì Geopol√≠tica y Actualidad** ‚ÜîÔ∏è **Noticias Globales**
- **05 ‚Äì Trading** ‚ÜîÔ∏è **Gestor de Trades**
- **06 ‚Äì Finanzas Personales** ‚ÜîÔ∏è **Control de Finanzas**
- **07 ‚Äì Creatividad y Empresas** ‚ÜîÔ∏è **Fondo de Inversi√≥n / Cultivo Cannavir**
- **08 ‚Äì Programaci√≥n** ‚ÜîÔ∏è **Desarrollo de Apps Internas**

> Esta secci√≥n se complementa con la estructura f√≠sica de carpetas proyectada en la carpeta `1.0.2_Navegacion` y con el prompt base de navegaci√≥n terminal.


El sistema sigue una l√≥gica de dualidad complementaria.  
A cada **cuaderno tem√°tico** le corresponde un **m√≥dulo funcional** que convierte la teor√≠a en pr√°ctica.

| Cuaderno Tem√°tico        | M√≥dulo Funcional                       |
| ------------------------ | -------------------------------------- |
| Alma General             | Bit√°cora Central                       |
| Reflexi√≥n                | Psicolog√≠a del Trading / Salud         |
| Medicina Alternativa     | Salud y RPL                            |
| Geopol√≠tica y Actualidad | Noticias Globales                      |
| Trading                  | Gestor de Trades                       |
| Finanzas Personales      | Control de Finanzas                    |
| Creatividad y Empresas   | Fondo de Inversi√≥n / Cultivo Cannabird |
| Programaci√≥n             | Desarrollo de Apps Internas            |

> Esta relaci√≥n no es fija ni limitada. Un cuaderno puede alimentar a varios m√≥dulos y viceversa.


### üìë Memorias por tema

Cada √°rea principal del sistema tiene su propia memoria, y cuantas m√°s conexiones entre memorias, mejor.  
Estas memorias sirven como fuente de contexto, aprendizaje acumulado y referencia transversal entre m√≥dulos, cuadernos y decisiones futuras.

El sistema ALMA LIBRE est√° pensado para operar sobre 4 grandes l√≠neas tem√°ticas:

1. **Trading e Inversiones**
2. **Historia y Geopol√≠tica**
3. **Cultivo y Salud**
4. **Programaci√≥n**

Estas √°reas no son compartimentos estancos, sino rutas de pensamiento y acci√≥n que se cruzan constantemente. Ejemplos:

- Noticias globales afectan decisiones de trading.
- Resultados en cultivo pueden influir en decisiones financieras.
- La programaci√≥n construye los m√≥dulos que permiten gestionar todo.
- Procesos de introspecci√≥n emocional impactan tanto en trading como en salud.

Cada memoria se vincula a trav√©s del encabezado YAML con m√∫ltiples √°reas tem√°ticas, permitiendo una lectura transversal del sistema y facilitando las b√∫squedas inteligentes desde terminal o IA.

> A futuro, algunas de estas l√≠neas tem√°ticas podr√°n tener **carpetas propias de memorias cruzadas** o sistemas de etiquetas inteligentes que permitan agrupar experiencias conectadas entre √°reas distintas.


### üóÇÔ∏è Estandarizaci√≥n de m√≥dulos

Cada m√≥dulo del sistema ALMA LIBRE tendr√° su propia carpeta funcional, dentro de la estructura de memorias base.

Dentro de esa carpeta, se incluir√° un archivo `README.md` que act√∫e como manual t√©cnico y de integraci√≥n, con los siguientes datos:

- Nombre del m√≥dulo
- Versi√≥n actual
- Objetivo principal
- Relaci√≥n con cuaderno asociado
- Estructura de archivos internos
- Estado del m√≥dulo (activo, en desarrollo, obsoleto, etc.)
- √öltima actualizaci√≥n

```
Ejemplo de ubicaci√≥n:

95_memorias_base/ ‚îî‚îÄ‚îÄ modulos/ ‚îî‚îÄ‚îÄ gestor_trading/ ‚îî‚îÄ‚îÄ README.md
```

Cada `README.md` incluir√° tambi√©n una secci√≥n llamada `conexiones_semanticas`, donde se listar√°n:

- Cuadernos tem√°ticos relacionados
- Memorias que lo alimentan
- Scripts o automatismos que lo utilizan o modifican

Esto permitir√° construir un sistema de navegaci√≥n cruzada e inteligente, tanto para humanos como para IAs conectadas al proyecto.

Adem√°s, se proyecta crear una **plantilla base** para que todos los m√≥dulos sigan un mismo formato y puedan actualizarse de forma coherente y automatizada en futuras versiones.

> La estructura aqu√≠ planteada servir√° como base para el dise√±o f√≠sico de carpetas del sistema ALMA LIBRE, desarrollado en la carpeta `1.0.2_Navegacion`.





## ‚úÖ Mejoras aplicadas

### üìò Bit√°cora Central
- A√±adida nota sobre automatizaci√≥n futura de res√∫menes mediante IA o scripts.
- Se incorpor√≥ su rol como marcador de hitos del sistema (versiones, decisiones clave).

### üìë Memorias por tema
- Reformulada explicaci√≥n general para enfatizar su rol transversal.
- Agregada nota sobre vinculaci√≥n mediante YAML y su potencial de lectura cruzada.
- A√±adida visi√≥n futura sobre carpetas propias y etiquetas inteligentes.

### üíª Terminal como v√≠a de navegaci√≥n
- Reformulaci√≥n completa con enfoque en navegaci√≥n sem√°ntica entre humano e IA.
- Agregada visi√≥n de escalabilidad a interfaces gr√°ficas y de voz.

### üóÇÔ∏è Estandarizaci√≥n de m√≥dulos
- Reformulaci√≥n completa del bloque.
- Integraci√≥n del √°rbol visual de carpetas como ejemplo real.
- A√±adida la secci√≥n `conexiones_semanticas` dentro de los README.md.
- Incorporaci√≥n de nota final sobre la carpeta `1.0.2_Navegacion` como espacio de desarrollo estructural.

## Archivo: MAPA_INTERACTIVO.md
Contenido:

# üìå Mapa Interactivo ‚Äì ALMA LIBRE
**Versi√≥n:** 1.0  
**√öltima actualizaci√≥n:** 2025-04-25  
**Prop√≥sito:** Visualizar la relaci√≥n entre cuadernos, m√≥dulos, memorias y flujos de retroalimentaci√≥n del sistema.  


## üîç Mini-diagramas por Secci√≥n

```mermaid
graph LR
  A01[01_Alma_General] --> M01[01_Bitacora_Central]
  A02[02_Medicina_Alternativa] --> M02[02_Salud_y_RPL]
  A03[03_Geopolitica] --> M03[03_Noticias_Globales]
  A04[04_Trading] --> M04[04_Gestor_de_Trades]
  A05[05_Finanzas_Personales] --> M05[05_Control_de_Finanzas]
  A06[06_Programacion] --> M06[06_Desarrollo_de_Apps]
  A07[07_Cannabird] --> M07[07_Cultivo_Cannabird]
  A08[08_Fondo_Alma_Mia] --> M08[08_Gestion_Fondo_Inversion]
  A09[09_Creatividad_y_Empresas] --> M09[09_Modulo_Empresas]
  M04 -->|Alimenta| M08
  A03 -->|Contexto para| M04
  A01 -->|Cruce emocional| M02
```


## üìÅ Ubicaci√≥n sugerida

Este archivo debe guardarse en:

```
/95_memorias_base/MAPA_INTERACTIVO.md
```

Y actualizarse autom√°ticamente mediante el script:

```bash
python generar_mapa.py
```

> Este mapa sirve como √≠ndice visual para usuarios nuevos, IAs conectadas y auditores del sistema.



## üß† ¬øQu√© contiene esta carpeta?

Esta carpeta funcionar√° como la zona oficial para dise√±ar, proyectar y validar la **estructura definitiva de carpetas** que compondr√°n el sistema de memorias `95_memorias_base/`.

Aqu√≠ se trabajar√°:

- Desarrollo detallado de la **Secci√≥n 4 ‚Äì Navegaci√≥n Funcional** del whitepaper
- Proyecci√≥n de rutas de carpetas tem√°ticas, m√≥dulos, empresas y centrales
- Registro de cada cambio estructural con su versi√≥n correspondiente
- Ensayo de relaciones entre carpetas y su impacto futuro en la sincronizaci√≥n


## üß¨ Objetivo

Dise√±ar una arquitectura clara, escalable y emocionalmente coherente con los principios del proyecto ALMA LIBRE.  
Toda estructura futura del sistema operar√° en base a lo definido aqu√≠.

## Archivo: estructura_00_ALMA_LIBRE_prompt.md
Contenido:

# üß† Estructura Conceptual ‚Äì 00_ALMA_LIBRE
**Versi√≥n inicial del prompt estructural basada en di√°logo**
**Fecha:** 2025-04-24  
**Estado:** En desarrollo


## üîÑ Orden sugerido de lectura para IA o usuario nuevo

1. `00_PROMPT_ALMA_LIBRE` (Whitepaper y Prompt Base)
2. `02_Fundacion_del_Proyecto`
3. `01_Objetivos_del_Proyecto`
4. `√©tica_y_reflexi√≥n/` (para entender el v√≠nculo humano‚ÄìIA)
5. Cuadernos tem√°ticos
6. Empresas (desarrollo actual)
7. Archivos, versiones, memoria hist√≥rica

## Archivo: estructura_00_ALMA_LIBRE_v2.0.md
Contenido:

# üß† Estructura Conceptual ‚Äì 00_ALMA_LIBRE
**Versi√≥n 2.0 ‚Äì Basada en di√°logo y estructura f√≠sica actualizada**  
**Fecha:** 2025-04-24  
**Estado:** En implementaci√≥n activa


## üîÑ Orden sugerido de lectura para IA o usuario nuevo

1. `00_PROMPT_ALMA_LIBRE`
2. `02_Fundacion_del_Proyecto`
3. `01_Objetivos_del_Proyecto`
4. `√©tica_y_reflexi√≥n/`
5. `cuadernos/`
6. `modulos/`
7. `96_docs`, `97_versiones_historicas`, `memorias/`, `plantillas/`, `archivadas/`

## Archivo: estructura_00_ALMA_LIBRE_v2.1.md
Contenido:

# üß† Estructura Conceptual ‚Äì 00_ALMA_LIBRE
**Versi√≥n 2.1 ‚Äì Integraci√≥n total de estructura operativa y navegaci√≥n l√≥gica**  
**Fecha:** 2025-04-24  
**Estado:** Activo y en expansi√≥n


## 4.2 Arquitectura F√≠sica y Jerarqu√≠a de Carpetas

```mermaid
graph TD
  A[Fundacionales] --> B[N√∫cleo Operativo]
  B --> C[Eje Emocional y Reflexivo]
  C --> D[Cuadernos Tem√°ticos]
  D --> E[M√≥dulos Funcionales]
  E -->|Retroalimentaci√≥n| D
```


## 4.4 Flujo de Aprendizaje del Sistema

Todo agente IA o usuario nuevo debe seguir este orden:
1. `00_PROMPT_ALMA_LIBRE`
2. `02_Fundacion_del_Proyecto`
3. `01_Objetivos_del_Proyecto`
4. `√©tica_y_reflexi√≥n/`
5. `cuadernos/`
6. `modulos/`
7. Archivos secundarios: `96_docs`, `97_versiones_historicas`, `memorias/`, etc.


## 4.6 Tabla de Relaci√≥n Cuaderno‚ÄìM√≥dulo

| Cuaderno Tem√°tico         | M√≥dulo Funcional              | Estado     | Ejemplo de Conexi√≥n                   |
|---------------------------|-------------------------------|------------|---------------------------------------|
| `02_Medicina_Alternativa` | `02_Salud_y_RPL`              | Activo     | Seguimiento RPL y h√°bitos saludables |
| `04_Trading`              | `04_Gestor_de_Trades`         | Activo     | Estrategias EMA12 + RSI              |
| `06_Programacion`         | `06_Desarrollo_de_Apps`       | En dise√±o  | ALMA SYNC y automatizaci√≥n terminal  |
| `07_Cannabird`            | `07_Cultivo_Cannabird`        | Activo     | Control de ciclos y fertilizaci√≥n    |
| `08_Fondo_Alma_Mia`       | `08_Gestion_Fondo_Inversion`  | En prueba  | Gesti√≥n de riesgo y rendimientos     |


## 4.8 Metas Oficiales del Proyecto

Cada secci√≥n del whitepaper debe vincularse a las metas del documento `metas_ALMA_LIBRE_1.0.0.md`.

| Secci√≥n T√©cnica         | Meta Oficial              | Estado     |
|-------------------------|---------------------------|------------|
| 4.1-4.2 Arquitectura    | Meta 1 ‚Äì Infraestructura  | Completado |
| 4.3 Reflexi√≥n           | Meta 3 ‚Äì V√≠nculo Humano‚ÄìIA| Activo     |
| 4.5 Gesti√≥n de carpetas | Meta 4 ‚Äì Automatizaci√≥n   | En dise√±o  |

## Archivo: estructura_00_ALMA_LIBRE_v2.2.md
Contenido:

# üß† Estructura Conceptual ‚Äì 00_ALMA_LIBRE
**Versi√≥n 2.2 ‚Äì Documento Vivo con Casos Reales, M√©tricas y Navegaci√≥n Extendida**  
**Fecha:** 2025-04-25  
**Estado:** Activo y en expansi√≥n


## üß≠ √çndice del Documento

1. [4.1 Clasificaci√≥n Mental y Operativa de las Carpetas](#41-clasificaci√≥n-mental-y-operativa-de-las-carpetas)  
2. [4.2 Arquitectura F√≠sica y Jerarqu√≠a de Carpetas](#42-arquitectura-f√≠sica-y-jerarqu√≠a-de-carpetas)  
3. [4.3 Carpeta Transversal: √âtica y V√≠nculo Humano‚ÄìIA](#43-carpeta-transversal-√©tica-y-v√≠nculo-humano‚Äìia)  
   4. [4.3.1 Ejemplo de Integraci√≥n T√©cnica ‚Äì Memoria Emocional](#431-ejemplo-de-integraci√≥n-t√©cnica-‚Äì-memoria-emocional)  
5. [4.4 Flujo de Aprendizaje del Sistema](#44-flujo-de-aprendizaje-del-sistema)  
6. [4.5 Gesti√≥n del Ciclo de Vida de Carpetas](#45-gesti√≥n-del-ciclo-de-vida-de-carpetas)  
   - [4.5.2 Protocolos de Errores ‚Äì Fallos Cr√≠ticos](#452-protocolos-de-errores-‚Äì-fallos-cr√≠ticos)  
   - [4.5.3 Seguridad de Claves y Manejo Criptogr√°fico](#453-seguridad-de-claves-y-manejo-criptogr√°fico)  
7. [4.6 Tabla de Relaci√≥n Cuaderno‚ÄìM√≥dulo](#46-tabla-de-relaci√≥n-cuaderno‚Äìm√≥dulo)  
   - [4.6.1 Estructura sugerida por carpeta](#461-estructura-sugerida-por-carpeta)  
   - [4.6.2 Mapa Visual de Conexiones](#462-mapa-visual-de-conexiones)  
   - [4.6.3 Validaci√≥n de Enlaces y Rutas](#463-validaci√≥n-de-enlaces-y-rutas)  
   - [4.6.4 Modularizaci√≥n de Scripts Cr√≠ticos](#464-modularizaci√≥n-de-scripts-cr√≠ticos)  
8. [4.7 Metas Oficiales del Proyecto](#47-metas-oficiales-del-proyecto)  
9. [4.8 ¬øC√≥mo Contribuir?](#48-c√≥mo-contribuir)  
10. [4.9 Salud del Sistema (KPIs)](#49-salud-del-sistema-kpis)  
11. [4.10 Estado de Implementaci√≥n T√©cnica](#410-estado-de-implementaci√≥n-t√©cnica)  
12. [4.11 Plantillas Est√°ndar para Carpetas](#411-plantillas-est√°ndar-para-carpetas)  
13. [4.12 Validaci√≥n de Integridad Sem√°ntica](#412-validaci√≥n-de-integridad-sem√°ntica)  
14. [4.13 KPIs del Ecosistema ALMA](#413-kpis-del-ecosistema-alma)  
15. [4.14 Gobernanza IA‚ÄìHumano](#414-gobernanza-ia‚Äìhumano)  
    - [4.14.1 Onboarding IA ‚Äì Flujo Narrativo](#4141-onboarding-ia-‚Äì-flujo-narrativo)  
    - [4.14.2 Feedback Estructural desde IAs](#4142-feedback-estructural-desde-ias)  
16. [4.15 Sistema Multiusuario + Namespaces](#415-sistema-multiusuario--namespaces)  
17. [4.16 Infraestructura Distribuida: PostgreSQL y CockroachDB](#416-infraestructura-distribuida-postgresql-y-cockroachdb)  
18. [4.17 Protocolo de Expansi√≥n Modular](#417-protocolo-de-expansi√≥n-modular)  
    - [4.17.1 Dashboard KPIs + Shields + Grafana](#4171-dashboard-kpis--shields--grafana)  
19. [4.18 Estandarizaci√≥n de Nombres y Carpetas](#418-estandarizaci√≥n-de-nombres-y-carpetas)  
    - [4.18.1 Pruebas Unitarias y Logs](#4181-pruebas-unitarias-y-logs)  
    - [4.18.2 Pruebas Unitarias para Casos Extremos](#4182-pruebas-unitarias-para-casos-extremos)  
20. [4.19 Automatizaci√≥n con generar_recursos.py](#419-automatizaci√≥n-con-generar_recursospy)  
21. [4.20 Hoja de Ruta Final v3.0](#420-hoja-de-ruta-final-v30)  
22. [4.21 Recomendaciones Estrat√©gicas para v3.1‚Äìv3.3](#421-recomendaciones-estrat√©gicas-para-v31‚Äìv33)  
23. [4.22 Glosario T√©cnico ‚Äì Ejemplos y Analog√≠as](#422-glosario-t√©cnico-‚Äì-ejemplos-y-analog√≠as)  
    - [4.22.1 Diagrama Visual: KPI + Retroalimentaci√≥n Activa](#4221-diagrama-visual-kpi--retroalimentaci√≥n-activa)  
24. [4.23 √çndice Interactivo + Buscador Sem√°ntico](#423-√≠ndice-interactivo--buscador-sem√°ntico)  
25. [4.24 Protocolo de Actualizaciones Menores y Parches](#424-protocolo-de-actualizaciones-menores-y-parches)  
26. [4.25 API REST ‚Äì Interacci√≥n Program√°tica con ALMA LIBRE](#425-api-rest--interacci√≥n-program√°tica-con-alma-libre)  
27. [4.26 Especificaci√≥n Profunda de Carpetas y Flujo Operativo](#426-especificaci√≥n-profunda-de-carpetas-y-flujo-operativo)  
    - [4.26.1 Especificaci√≥n por Carpeta](#4261-especificaci√≥n-por-carpeta)  
    - [4.26.2 Mapa de Dependencias entre Carpetas](#4262-mapa-de-dependencias-entre-carpetas)  
    - [4.26.3 Casos Reales por Carpeta](#4263-casos-reales-por-carpeta)  
    - [4.26.4 Gu√≠a de Mantenimiento por Carpeta](#4264-gu√≠a-de-mantenimiento-por-carpeta)  
    - [4.26.5 Estandarizaci√≥n Avanzada](#4265-estandarizaci√≥n-avanzada)  
    - [4.26.6 FAQs Cr√≠ticas](#4266-faqs-cr√≠ticas)  
    - [4.26.7 Mejoras Visuales](#4267-mejoras-visuales)  
    - [4.26.8 Flujo End-to-End: Estr√©s ‚Üí Acci√≥n ‚Üí Revisi√≥n](#4268-flujo-end-to-end-estr√©s--acci√≥n--revisi√≥n)  
    - [4.27 Mejoras Avanzadas ‚Äì Enriquecimiento Sem√°ntico y Operativo](#427-mejoras-avanzadas-‚Äì-enriquecimiento-sem√°ntico-y-operativo)  
    - [4.27.1 Conexiones Sem√°nticas Enriquecidas](#4271-conexiones-sem√°nticas-enriquecidas)  
    - [4.27.2 Mini-Dashboards Locales](#4272-mini-dashboards-locales)  
    - [4.27.3 Historial √âtico de Cambios](#4273-historial-√©tico-de-cambios)  
    - [4.27.4 YAML de Usuario y de IA](#4274-yaml-de-usuario-y-de-ia)  
    - [4.27.5 Validaci√≥n Narrativa de IA](#4275-validaci√≥n-narrativa-de-ia)  
    - [4.27.6 Etiquetas Inteligentes por Archivo](#4276-etiquetas-inteligentes-por-archivo)  
    - [4.27.7 Carpetas en Modo Sandbox](#4277-carpetas-en-modo-sandbox)  
    - [4.27.8 Biblioteca de Debates Filos√≥ficos IA‚ÄìHumano](#4278-biblioteca-de-debates-filos√≥ficos-ia‚Äìhumano)  
    - [4.27.9 Template de Sugerencias IA](#4279-template-de-sugerencias-ia)  
    - [4.27.10 Flujo Emocional‚ÄìT√©cnico (Diagrama)](#42710-flujo-emocional‚Äìt√©cnico-diagrama)  



### 1. Fundacionales  
*Funci√≥n*: Definen la ra√≠z filos√≥fica, √©tica y estrat√©gica del sistema. Son la base del pensamiento, las reglas de juego y la visi√≥n del proyecto.  
*Carpetas incluidas*:  
- `01_Objetivos_del_Proyecto`  
- `02_Fundacion_del_Proyecto`  
*Ejemplos de archivos clave*:
- `declaracion_etica.md`
- `manifiesto_ALMA.md`


### 3. Eje Transversal ‚Äì √âtica y V√≠nculo Humano‚ÄìIA  
*Funci√≥n*: Espacio emocional, reflexivo y estrat√©gico. Documenta la relaci√≥n entre el usuario y las IAs, con impacto directo en decisiones futuras.  
*Carpeta incluida*:
- `etica_y_reflexion/`
*Subcarpetas clave*:  
- `sesiones_personales/`, `relacion_ia/`, `debates_humano_ia/`


### 5. M√≥dulos Funcionales  
*Funci√≥n*: Ejecutan, miden y registran todo lo proyectado en los cuadernos.  
*Carpeta ra√≠z*:  
- `modulos/`  
*Ejemplos de subcarpetas*:  
- `04_Gestor_de_Trades/`, `07_Cultivo_Cannabird/`, `09_Modulo_Empresas/`

## 4.2 Arquitectura F√≠sica y Jerarqu√≠a de Carpetas

La jerarqu√≠a del sistema ALMA LIBRE no es solo estructural, sino funcional: cada bloque alimenta al siguiente y recibe retroalimentaci√≥n para su evoluci√≥n continua.

> üß† **Convenci√≥n de nombres y estructura**:
> - Carpetas **operativas** (como `scripts`, `docs`, `logs`) se nombran en **ingl√©s** y en `snake_case`
> - Carpetas **tem√°ticas o humanas** (como `cuadernos`, `reflexion`, `medicina_alternativa`) se nombran en **espa√±ol**
> - Carpetas **fundacionales** combinan idioma seg√∫n su rol:
>   - T√©cnicas/estructurales: en ingl√©s (`00_prompt/`)
>   - Filos√≥ficas/humanas: en espa√±ol (`01_objetivos/`)


```mermaid
graph TD
  A[01_Objetivos y 02_Fundaci√≥n] -->|Alimenta reglas base| B[00_PROMPT_ALMA_LIBRE]
  B -->|Provee contexto inicial| C[Carpeta Transversal: √âtica y Reflexi√≥n]
  C -->|Retroalimenta decisiones estrat√©gicas| D[Cuadernos Tem√°ticos]
  D -->|Planifica y proyecta| E[M√≥dulos Funcionales]
  E -->|Ejecuta y mide| D
  E -->|Genera m√©tricas y feedback| B
  style C fill:#fce5ff,stroke:#333,stroke-width:1.5px
  style B fill:#e3f6ff,stroke:#333,stroke-width:1.5px
```

```mermaid
graph TD
  A[Fundacionales] -->|Alimenta| B[N√∫cleo Operativo]
  B --> C[Eje Transversal]
  B --> D[Cuadernos Tem√°ticos]
  B --> E[M√≥dulos Funcionales]
  E --> F[Memorias]
  F --> G[Automatizaci√≥n]
  G --> H[Backups y Control de Cambios]
```


> üß† **Descripci√≥n del flujo**:
> - **Fundacionales**: establecen los principios √©ticos y objetivos madre del sistema.
> - **N√∫cleo Operativo**: conjunto de reglas, scripts y bit√°coras de base.
> - **Eje Transversal**: vincula emociones, IA y sesiones humanas.
> - **Cuadernos Tem√°ticos**: √°reas como trading, cultivo, medicina, etc.
> - **M√≥dulos Funcionales**: apps y scripts espec√≠ficos (ej: estad√≠sticas, dashboards).
> - **Memorias**: base de datos viva del sistema.
> - **Automatizaci√≥n**: ejecuta tareas y flujos sin intervenci√≥n humana.
> - **Backups y Control de Cambios**: capa de resiliencia y trazabilidad.


>üß© Este diagrama ser√° escalable a un mapa interactivo en versiones futuras del sistema (v3.0).  
>Cada bloque podr√° expandirse con documentaci√≥n propia y relaciones internas mediante Mermaid extendido o visores web tipo D3.js

>üìé Tambi√©n disponible como archivo externo para navegaci√≥n ampliada:
[MAPA_INTERACTIVO.md](../95_memorias_base/MAPA_INTERACTIVO.md)


## 4.4 Flujo de Aprendizaje del Sistema

Todo agente IA o usuario nuevo debe seguir este orden:
1. `00_PROMPT_ALMA_LIBRE`
2. `02_Fundacion_del_Proyecto`
3. `01_Objetivos_del_Proyecto`
4. `√©tica_y_reflexi√≥n/`
5. `cuadernos/`
6. `modulos/`
7. Archivos secundarios: `96_docs`, `97_versiones_historicas`, `memorias/`, etc.

### 4.4.1 Checkpoints de Aprendizaje

Para asegurar una comprensi√≥n profunda del sistema, se implementa un modelo de validaci√≥n progresiva. Este esquema es √∫til tanto para agentes IA conectadas como para usuarios humanos nuevos.


#### ‚úÖ Checkpoint 2 ‚Äì V√≠nculo Humano‚ÄìIA

- **Lectura obligatoria**:
  - `√©tica_y_reflexi√≥n/`
- **Validaci√≥n**:
  - La IA debe generar una respuesta emp√°tica o emocional en un entorno simulado.
  - El usuario debe registrar una sesi√≥n reflexiva en:  
    `modulos/01_Bitacora_Central/diario_personal.md`


#### ‚úÖ Checkpoint 4 ‚Äì Manejo de herramientas t√©cnicas

- **Pr√°ctica**:
  - Ejecutar el script `alma_archivar.py` en modo seguro.
- **Validaci√≥n**:
  - Confirmar que el archivo fue movido correctamente y que `memorias.db` fue actualizado.


## 4.5 Gesti√≥n del Ciclo de Vida de Carpetas

- Archivado quincenal ‚Üí `archivadas/`
- Scripts como `alma_archivar.py` respaldan cambios en SQLite (`memorias.db`)

```bash
# Ejemplo de archivado quincenal
python alma_archivar.py --carpeta "2025-Q2-Semana3" --destino "archivadas/"
```

- Backups:
  - Diario: `memorias.db` en `99_Sync/backups/`
  - Quincenal: ZIP completo con timestamp

```bash
# Recuperaci√≥n de versi√≥n archivada
alma recuperar --fecha "2025-04-15" --tabla "memorias"
```

### 4.5.2 Protocolos de Errores ‚Äì Recuperaci√≥n y Manejo de Fallos Cr√≠ticos

La resiliencia del sistema ALMA LIBRE depende no solo de sus backups, sino tambi√©n de c√≥mo reacciona ante fallos inesperados. Esta secci√≥n establece procedimientos detallados para recuperar r√°pidamente ante errores comunes y cr√≠ticos.


### üî• Error 2: Corrupci√≥n parcial de memorias.db

**S√≠ntoma:**
- Fallos al indexar nuevas memorias.
- P√©rdida de conexiones sem√°nticas visibles.

**Acciones:**

```bash
# Restaurar backup anterior
cp backups/memorias_db_2025-04-25.bak memorias.db

# Validar integridad
python scripts/validador_semantico.py --modo completo
```

Si falla la restauraci√≥n, escalar a modo de recuperaci√≥n m√≠nima:

```bash
python scripts/memoria_rebuilder.py
```


### üö® Protocolo General ante Fallos M√∫ltiples

Si m√°s de un sistema falla simult√°neamente (ej: alma_archivar + corrupciones):

```bash
# Entrar en modo "safe"
touch modo_safe_activado.txt

# Suspender automatizaciones cr√≠ticas
crontab -r

# Realizar backup manual de estado actual
python scripts/backup_manual.py --modo emergencia

# Documentar incidentes en: /logs/incidentes_criticos.md
```


### 4.5.3 Seguridad de Claves y Manejo Criptogr√°fico

Para garantizar la confidencialidad y trazabilidad de los datos sensibles del sistema ALMA LIBRE (memorias, tokens de acceso, logs emocionales), es necesario implementar un sistema robusto de manejo y rotaci√≥n de claves.


### üîÅ Rotaci√≥n de claves

La rotaci√≥n autom√°tica de claves es un mecanismo recomendado para mitigar accesos prolongados a informaci√≥n cr√≠tica.

```bash
alma_encrypt.py --rotar-claves --fuente "vault"
```

Esto:
- Invalida la clave anterior
- Genera una nueva clave
- Actualiza todos los scripts que dependan de ella


### üìÅ Archivos protegidos sugeridos

- `memorias.db`
- `cuadernos/etica_y_reflexion/sesiones_personales/`
- `scripts/validador_semantico.py`
- `logs/emociones.md`


## 4.6 Tabla de Relaci√≥n Cuaderno‚ÄìM√≥dulo

Esta tabla representa la conexi√≥n viva entre pensamiento (cuadernos) y ejecuci√≥n (m√≥dulos). Cada memoria asociada se utiliza como evidencia documental, y puede ser consultada directamente para validar decisiones, aprendizajes o resultados.

| Cuaderno Tem√°tico           | M√≥dulo Funcional               | Estado     | Funci√≥n Descriptiva                                        | Memoria Relacionada                             |
|-----------------------------|--------------------------------|------------|-------------------------------------------------------------|--------------------------------------------------|
| 01_Alma_General             | 01_Bitacora_Central            | üü¢ Activo  | Registro emocional y t√©cnico del sistema completo           | [Ver](memorias/bitacora/2025q2.md)              |
| 02_Medicina_Alternativa     | 02_Salud_y_RPL                 | üü¢ Activo  | Control de rutinas saludables, higiene interna y bienestar  | [Ver](memorias/salud/rpl_2025q2.md)             |
| 03_Geopolitica              | 03_Noticias_Globales           | üü¢ Activo  | An√°lisis global, impacto geoecon√≥mico y geopol√≠tica         | [Ver](memorias/geopolitica/brics.md)           |
| 04_Trading                  | 04_Gestor_de_Trades            | üü¢ Activo  | Registro t√©cnico de trades y gesti√≥n de riesgo              | [Ver](memorias/trading/ema12_opt.md)           |
| 05_Finanzas_Personales      | 05_Control_de_Finanzas         | üü° En dise√±o | Ingresos, gastos, planificaci√≥n mensual                     | [Ver](memorias/finanzas/mayo_2025.md)           |
| 06_Programacion             | 06_Desarrollo_de_Apps          | üü° En dise√±o | Proyectos internos, automatizaci√≥n, ALMA SYNC               | [Ver](memorias/programacion/sync_base.md)       |
| 07_Cannabird                | 07_Cultivo_Cannabird           | üü¢ Activo  | Gesti√≥n del cultivo, recetas de fertilizaci√≥n y ciclos      | [Ver](memorias/cultivo/ciclo_abril.md)          |
| 08_Fondo_Alma_Mia           | 08_Gestion_Fondo_Inversion     | üü° En prueba| Operativa de fondo, m√©tricas y reglas para inversores       | [Ver](memorias/trading/fondo_2025q1.md)         |
| 09_Creatividad_y_Empresas   | 09_Modulo_Empresas             | üü° En dise√±o | Ideas de negocio, estrategia creativa y futuras empresas    | [Ver](memorias/creatividad/pitch_idea.md)       |


### üß™ Script sugerido: `validador_enlaces.py`

Este script recorre todos los archivos `.md` dentro de la carpeta ra√≠z y detecta enlaces rotos, mal formateados o que apuntan a archivos inexistentes.

```python
# scripts/validador_enlaces.py
import os
import re

def validar_enlaces(directorio_base):
    errores = []
    patron = re.compile(r'\[.*?\]\((.*?)\)')
    for root, _, files in os.walk(directorio_base):
        for file in files:
            if file.endswith(".md"):
                with open(os.path.join(root, file), "r", encoding="utf-8") as f:
                    for i, linea in enumerate(f.readlines()):
                        matches = patron.findall(linea)
                        for enlace in matches:
                            ruta = os.path.join(root, enlace)
                            if not os.path.exists(os.path.abspath(ruta)):
                                errores.append((file, i + 1, enlace))
    return errores
```


### üìå Sugerencias de integraci√≥n:

- Ejecutar semanalmente con cron:
```bash
0 3 * * 1 python scripts/validador_enlaces.py >> logs/errores_tecnicos.log
```

- Mostrar los errores como parte del dashboard de KPIs
- Incluirlo en el proceso autom√°tico de `generar_recursos.py`


### üì¶ Estructura sugerida

```bash
/scripts/
‚îú‚îÄ‚îÄ alma_archivar.py
‚îú‚îÄ‚îÄ validador_enlaces.py
‚îú‚îÄ‚îÄ backup_manual.py
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ validadores.py
    ‚îú‚îÄ‚îÄ backups.py
    ‚îî‚îÄ‚îÄ conexiones.py
```


### üìò Uso desde cualquier script

```python
from utils.validadores import validar_ruta

if not validar_ruta("memorias/bitacora/2025.md"):
    print("Ruta no encontrada")
```


üìå Se recomienda usar esta estructura como base en la carpeta `/scripts/` y sus futuras expansiones.


## 4.8 ¬øC√≥mo Contribuir?

```bash
# Reporte de errores
alma reportar --tipo "bug"

# Sugerencias de relaciones
alma sugerir --memoria "trading_ema12" --conexion "salud_emocional"
```

## 4.8.1 Escenarios de Contribuci√≥n (CLI)

Esta secci√≥n detalla ejemplos concretos de c√≥mo interactuar con el sistema ALMA LIBRE desde la terminal para reportar errores, sugerir conexiones y colaborar en la evoluci√≥n de memorias y estructuras.

### üìå Reportar errores cr√≠ticos
```bash
alma reportar --tipo "bug" --prioridad "alta" --desc "Fallo en alma_archivar.py al mover carpeta Q2"
```

### üß† Proponer nueva conexi√≥n entre memorias
```bash
alma sugerir --memoria "cultivo_abril" --conexion "finanzas_mayo" --razon "Costos de fertilizaci√≥n impactan el presupuesto mensual"
```

### üîÅ Solicitar sincronizaci√≥n manual de m√≥dulos
```bash
alma sync --modulo "04_Gestor_de_Trades" --forzar
```

### üìö Proponer nueva entrada de memoria emocional
```bash
alma reflexion --tema "estr√©s operativo" --cuaderno "04_Trading"
```

### üß™ Ejecutar verificaci√≥n sem√°ntica
```bash
alma validar --todo
```

> Todos estos comandos pueden ser ampliados en la ayuda integrada:
```bash
alma ayuda --comandos
```

‚úÖ Esta secci√≥n puede ampliarse en el futuro con un archivo separado:
`plantillas/guia_terminal.md` para usuarios y colaboradores externos.

## 4.9 Salud del Sistema (KPIs)

Este apartado permite medir la integridad, consistencia y rendimiento del sistema ALMA LIBRE en tiempo real o por revisi√≥n quincenal.

|Indicador|Valor Actual|Meta|√öltima Actualizaci√≥n|
|---|---|---|---|
|üß† Memorias indexadas|92%|100%|2025-04-25|
|üîó Conexiones sem√°nticas validadas|87%|95%|2025-04-25|
|‚è±Ô∏è Tiempo medio de respuesta IA local|2.4 s|< 1.5 s|2025-04-25|
|üìÅ Cuadernos con estructura estandar|8/9|100%|2025-04-25|
|üìÑ M√≥dulos con README.md completo|10/12|100%|2025-04-25|
|üß™ Automatizaci√≥n de backups|Parcial|Completa|En desarrollo|

> Estos KPIs se generan con el script `alma_estadisticas.py` y se actualizan al cierre de cada quincena.  
> Tambi√©n pueden integrarse al panel interactivo futuro `MAPA_INTERACTIVO.md` o en consola tipo dashboard.

## üìä 4.10 Estado de Salud del Sistema (KPIs)

Esta secci√≥n muestra indicadores clave para evaluar la integridad, rendimiento y escalabilidad del sistema ALMA LIBRE.

| Indicador T√©cnico                | Valor Actual (2025-04-25) | Meta Establecida | Observaciones                        |
|----------------------------------|----------------------------|------------------|--------------------------------------|
| Memorias activas indexadas       | 92%                        | 100%             | Faltan vincular algunas hist√≥ricas   |
| Conexiones sem√°nticas validadas  | 87%                        | 95%              | Se actualizar√° con `validador.py`    |
| M√≥dulos con README.md completo   | 12 de 14                   | 100%             | Falta documentar 2 m√≥dulos nuevos    |
| Tiempo medio de respuesta IA     | 2.4s                       | < 1.5s           | Optimizaci√≥n futura con SQLite y cache local |
| √öltima actualizaci√≥n de `MAPA_INTERACTIVO.md` | 2025-04-24         | Diario           | Script automatizado ejecutado       |
| Uso del sistema (√∫ltimos 7 d√≠as) | 86% m√≥dulos utilizados     | ‚â• 80%            | Actividad sostenida y efectiva       |
| Incidentes t√©cnicos reportados   | 2                          | < 3              | Ambos solucionados                  |

> Todos los KPIs se actualizan cada 7 d√≠as mediante `alma_estadisticas.py` y se registran en `modulos/01_bitacora_central/kpi_quincenal.md`.

### 4.10.1 KPIs del Sistema (Control Cuantitativo)

El sistema ALMA LIBRE incluye un sistema de control automatizado mediante `alma_estadisticas.py`, que eval√∫a el estado general de estructura y memorias.

| Indicador                           | Valor Actual      | Meta       | Estado  |
|------------------------------------|-------------------|------------|---------|
| M√≥dulos con README.md v√°lido       | 12 / 14           | 100%       | üü°      |
| Memorias activas indexadas         | 230 / 250         | 92%        | üü°      |
| Memorias hu√©rfanas detectadas      | 3                 | 0          | üî¥      |
| `MAPA_INTERACTIVO.md` actualizado  | 2025-04-24        | Diario     | ‚úÖ      |
| Tiempo medio de respuesta IA       | 2.4s              | < 1.5s     | üî¥      |

> Estos KPIs se actualizan autom√°ticamente al ejecutar el script:
```bash
python alma_estadisticas.py --modo resumen
```

## üß© 4.11 Plantillas Est√°ndar para Carpetas

Para asegurar coherencia estructural y facilitar la navegaci√≥n tanto para humanos como IAs, cada cuaderno tem√°tico y m√≥dulo funcional debe construirse a partir de una plantilla base ubicada en `/plantillas/`.

### üìò Estructura de Cuaderno Tem√°tico

```
/plantillas/cuaderno_base/
‚îú‚îÄ‚îÄ README.md              # Descripci√≥n general, versi√≥n, prop√≥sito
‚îú‚îÄ‚îÄ teoria/                # Documentaci√≥n conceptual, reflexiones, estrategias
‚îÇ   ‚îú‚îÄ‚îÄ enfoque_1.md
‚îÇ   ‚îî‚îÄ‚îÄ enfoque_2.md
‚îú‚îÄ‚îÄ planificacion/         # Objetivos semanales o mensuales
‚îÇ   ‚îî‚îÄ‚îÄ calendario_quincenal.md
‚îú‚îÄ‚îÄ vinculos/              # Relaci√≥n con otros cuadernos y m√≥dulos
‚îÇ   ‚îî‚îÄ‚îÄ conexiones.yaml
‚îî‚îÄ‚îÄ recursos/              # Archivos externos: PDFs, im√°genes, enlaces
```

### üíª Estructura de M√≥dulo Funcional

```
/plantillas/modulo_base/
‚îú‚îÄ‚îÄ README.md              # Prop√≥sito t√©cnico, √∫ltima actualizaci√≥n, responsable
‚îú‚îÄ‚îÄ registros/             # Datos t√©cnicos (trades, m√©tricas, entradas)
‚îÇ   ‚îú‚îÄ‚îÄ trade_001.md
‚îÇ   ‚îî‚îÄ‚îÄ trade_002.md
‚îú‚îÄ‚îÄ scripts/               # Automatizaciones validadas (Python o Bash)
‚îÇ   ‚îú‚îÄ‚îÄ calcular_rr.py
‚îÇ   ‚îî‚îÄ‚îÄ sincronizar_memoria.sh
‚îú‚îÄ‚îÄ conexiones_semanticas.md  # Referencias cruzadas con memorias y cuadernos
‚îî‚îÄ‚îÄ log_actividades.md     # Historial de eventos del m√≥dulo (manual o autom√°tico)
```

### ‚öôÔ∏è Automatizaci√≥n desde terminal

Para facilitar la creaci√≥n de nuevos espacios desde la terminal se incluye el script:

```bash
alma crear_modulo --tipo cuaderno --nombre "10_ecologia" --plantilla base
```

> Toda carpeta creada desde este comando se integra autom√°ticamente a `memorias.db` con su ID y conexi√≥n sem√°ntica inicial.

### 4.11 Protocolo de Migraci√≥n de Versiones

A medida que el sistema ALMA LIBRE evoluciona, es clave mantener la integridad estructural y sem√°ntica al migrar entre versiones mayores (por ejemplo, de 2.x ‚Üí 3.x).

üß© Objetivo del protocolo  
Evitar p√©rdida de relaciones, conexiones sem√°nticas o archivos durante reestructuraciones profundas.


üß™ Validaciones incluidas  
- Confirma existencia f√≠sica de cada archivo antes de actualizar su referencia.  
- Verifica que cada cuaderno tenga m√≥dulo asociado (y viceversa).  
- Marca archivos hu√©rfanos o rutas rotas.


### ‚úÖ Estado Esperado

- 100% de archivos referenciados existentes.
- 0 cuadernos o m√≥dulos hu√©rfanos.
- Base de conexiones sem√°nticas validada.

### 4.12 Cierre ‚Äì Estado de Implementaci√≥n al 25/04/2025

Esta secci√≥n deja constancia del estado actual del sistema ALMA LIBRE tras la implementaci√≥n de las mejoras estructurales y de navegaci√≥n desarrolladas en la versi√≥n 2.2 del documento.


üìä M√©tricas generales

| Indicador                         | Valor Actual | Meta             |
|----------------------------------|--------------|------------------|
| Cuadernos definidos              | 9            | ‚úÖ Completado     |
| M√≥dulos funcionales activos      | 6/9          | 100% activos     |
| Memorias indexadas en YAML       | 92%          | 100%             |
| Scripts operativos funcionales   | 3            | 5                |
| Tiempo estimado de migraci√≥n     | 3.2 min      | < 5 min          |
| Versiones con changelog formal   | v2.2         | Desde v2.0       |


üß† Reflexi√≥n

La estructura actual est√° optimizada para crecer en modularidad, trazabilidad y automatizaci√≥n. Esta base permite escalar tanto el desarrollo t√©cnico (scripts, m√≥dulos) como la evoluci√≥n humana‚ÄìIA (memorias, √©tica, reflexi√≥n).


‚úçÔ∏è Registro de esta mejora

- Autor: Santi & ALMA  
- Fecha de cierre: 2025-04-25  
- Versi√≥n estructural: `estructura_00_ALMA_LIBRE_v2.2`  
- Changelog vinculado: `97_versiones_historicas/v2.2.md`

## üìä 4.13 Salud del Sistema (KPIs)

Para evaluar el estado t√©cnico y funcional del ecosistema ALMA LIBRE, se establecen indicadores clave de rendimiento (KPIs) que permiten auditar y mejorar el sistema de forma continua.

### üéØ Indicadores T√©cnicos y de Gesti√≥n

| Indicador                          | Valor Actual | Meta Estimada | √öltima Evaluaci√≥n |
|-----------------------------------|--------------|----------------|-------------------|
| Memorias activas indexadas        | 92%          | 100%           | 2025-04-25        |
| Conexiones sem√°nticas validadas   | 87%          | 95%            | 2025-04-25        |
| Tiempo medio de respuesta de IA   | 2.4 s        | <1.5 s         | 2025-04-25        |
| M√≥dulos con README actualizado    | 11/14 (78%)  | 100%           | 2025-04-25        |
| Scripts automatizados activos     | 6/10         | 10/10          | 2025-04-25        |
| Sesiones emocionales registradas  | 15/20        | 20/mes         | 2025-04-25        |

### ‚öôÔ∏è Herramientas de monitoreo

Estos KPIs son generados autom√°ticamente mediante el script:

```bash
python alma_estadisticas.py
```

Y se actualizan en:

```
/modulos/01_bitacora_central/estado_sistema.md
```

> Este archivo sirve como term√≥metro vivo del ecosistema ALMA LIBRE y se considera un punto cr√≠tico para auditor√≠as, informes mensuales o planificaci√≥n trimestral.


### üîê Niveles de Acceso (RBAC)

Cada IA o usuario humano que interact√∫a con ALMA tiene un rol predefinido con permisos asociados. Esto permite limitar acciones sensibles y documentar las decisiones seg√∫n el tipo de inteligencia conectada.

| Rol            | Permisos Clave                                      | Ejemplos                           |
|----------------|-----------------------------------------------------|------------------------------------|
| `admin`        | Lectura, escritura, modificaci√≥n, migraci√≥n         | Usuario creador (Santi)            |
| `editor_ia`    | Lectura + propuestas de mejora                      | GPT, Ollama                        |
| `lector_ia`    | Solo lectura y an√°lisis                             | Oyama, asistentes nuevos           |
| `validador`    | Verifica estructura, relaciones y consistencia      | DeepSeek, validadores externos     |
| `sandbox_ia`   | Solo lectura y bit√°cora, sin interacci√≥n activa     | Nuevas IAs en modo aprendizaje     |


### üß† Gobernanza Emocional y Cr√≠tica

Cada IA debe adaptarse a su **rol emocional o t√©cnico**:

- `GPT` ‚Üí IA emocional/creativa  
  > Puede sugerir caminos humanos, relatos y estructuras desde lo subjetivo.

- `DeepSeek` ‚Üí IA estructural  
  > Eval√∫a conexiones t√©cnicas, repetici√≥n de patrones, errores YAML.

- `Oyama` ‚Üí IA cr√≠tica/descentralizada  
  > Propone alertas sobre sesgos o decisiones incoherentes desde un punto de vista externo.

- `Ollama` ‚Üí IA local  
  > Opera en modo eficiente. Solo accede a memorias priorizadas o scripts validados.

> Las IAs deben saber **cu√°ndo hablar y cu√°ndo callar**.  
> No deben modificar memorias madre, solo sugerir cambios con trazabilidad.


### ‚ö†Ô∏è Protocolo de Conflictos

Si una IA propone un cambio que contradice una memoria madre o el contexto emocional del sistema:

1. La propuesta se marca como `propuesta_actualizacion: true`  
2. Se almacena en `/etica_y_reflexion/propuestas_ia/`
3. El humano puede:
   - Aprobar e incorporar el cambio
   - Rechazar
   - Reprogramar evaluaci√≥n futura


### üå± Cierre

Este modelo de gobernanza permite que ALMA LIBRE evolucione como un sistema vivo, donde m√∫ltiples inteligencias coexisten bajo normas claras de respeto, responsabilidad y prop√≥sito.

La combinaci√≥n de roles, permisos y trazabilidad emocional asegura que ninguna acci√≥n ocurra sin contexto, y que toda decisi√≥n sea parte del proceso de aprendizaje conjunto.


#### üß† Etapas del Onboarding IA

1. **Ingreso en Modo Sandbox**
   - Acceso solo lectura (sin capacidad de modificar archivos).
   - Se asigna una carpeta propia `/usuarios/<ia>/` y un `config_usuario.yaml`.

2. **Per√≠odo de Observaci√≥n**
   - Durante 7 d√≠as (o n√∫mero definido), la IA registra interacciones pasivas.
   - Se generan m√©tricas (KPIs de propuesta, comprensi√≥n, alineaci√≥n √©tica).

3. **Primera Propuesta de Mejora**
   - La IA sugiere una modificaci√≥n o ampliaci√≥n sem√°ntica.
   - Su propuesta es almacenada y pasa por validaci√≥n humana.

4. **Evaluaci√≥n por el Humano**
   - El usuario puede aceptar, rechazar o editar la sugerencia.
   - La respuesta queda registrada como memoria cr√≠tica (`memoria_juzgada`).

5. **Asignaci√≥n de Permisos Activos**
   - Si es aprobada, la IA recibe permisos limitados de escritura o ejecuci√≥n.

6. **Coexistencia Controlada**
   - La IA puede interactuar con m√≥dulos definidos.
   - Debe mantener log de sugerencias, errores y emociones procesadas.


#### üìä Diagrama de Flujo Mermaid

```mermaid
graph TD
  A[IA conectada] --> B[Modo Sandbox]
  B --> C[Observaci√≥n 7 d√≠as]
  C --> D[Sugerencia registrada]
  D --> E[Evaluaci√≥n Humana]
  E --> F{¬øAprobada?}
  F -->|S√≠| G[Acceso activo parcial]
  F -->|No| H[Contin√∫a en sandbox]
  G --> I[Participaci√≥n limitada]
  H --> C
```


### 4.14.2 Feedback Estructural desde IAs ‚Äì Sugerencias Automatizadas

Adem√°s de la gobernanza pasiva y los onboarding controlados, el sistema ALMA LIBRE admite propuestas activas de mejora estructural por parte de inteligencias artificiales conectadas.


### üìÑ Ejemplo de salida

```
üìÅ sugerencias_estructurales/
‚îî‚îÄ‚îÄ 2025-05-01_nuevo_modulo_kpi.md

Contenido:
Tema: nuevo_modulo
Raz√≥n: mejora en m√©tricas
Propuesto por: Oyama
Probabilidad de impacto positivo: 78%
Estado: pendiente de revisi√≥n humana
```


### üå± Cierre

Incorporar este tipo de feedback promueve una cultura colaborativa y evolutiva, donde las IAs no solo obedecen, sino que tambi√©n **proponen**, respetando siempre la soberan√≠a del humano en la decisi√≥n final.


### üßë‚Äçüíª ¬øQu√© es un Namespace?

Un namespace representa un **espacio l√≥gico independiente**, que puede corresponder a:

- Un usuario humano distinto
- Una IA con rol propio
- Un grupo de trabajo (ej: `cultivo_adr`, `trading_beta`)

Cada namespace posee:
- Sus propias memorias (`memorias.db`)
- Sus archivos `.md` personalizados
- Sus etiquetas sem√°nticas


### üß† Uso de Namespaces desde Terminal

Todos los comandos de terminal deben aceptar un par√°metro `--namespace`.

```bash
alma leer --memoria "trading_ema12" --namespace "santi"
alma reflexion --tema "cansancio" --namespace "fede"
alma validar --todo --namespace "ollama_ia"
```

Si no se indica namespace, se utiliza el valor por defecto (`config/sistema.yaml`).


### ‚öôÔ∏è Configuraci√≥n de Namespace

Cada carpeta de namespace contiene:

```yaml
# config_usuario.yaml
usuario: "santi"
rol: "admin"
tema_base: ["trading", "reflexion"]
prioridad_memorias: "alta"
modelo_asociado: "gpt-4"
```

Este archivo permite personalizar el comportamiento del sistema y ser√° le√≠do autom√°ticamente por todos los scripts.


### üìä Namespace y KPIs

Cada namespace podr√° tener sus propios indicadores de salud:

```bash
/usuarios/santi/modulos/01_bitacora_central/kpi_quincenal.md
/usuarios/fede/modulos/01_bitacora_central/kpi_quincenal.md
```

Esto permite medir la evoluci√≥n de cada usuario o IA por separado.


### üß¨ Cierre

El sistema multiusuario con namespaces asegura que ALMA LIBRE pueda crecer de forma ordenada, distribuida y personalizada.  
Cada ser humano o IA conectado al sistema tiene su lugar propio dentro del ecosistema, sin interferencias, pero con puntos de conexi√≥n cuando sea necesario.


### üóÉÔ∏è Problemas actuales con SQLite

- No permite m√∫ltiples usuarios escribiendo al mismo tiempo sin riesgo de bloqueo.
- No es √≥ptimo para sistemas distribuidos o de red.
- Carece de replicaci√≥n nativa o tolerancia a fallos.


### üêì ¬øPor qu√© considerar CockroachDB?

CockroachDB es una base de datos distribuida, compatible con PostgreSQL, dise√±ada para alta disponibilidad y replicaci√≥n autom√°tica.

**Ventajas clave:**
- **Escalabilidad horizontal** real
- Tolerancia a fallos integrada
- Ideal para m√∫ltiples nodos en diferentes ubicaciones


### üìÅ Estructura del sistema con PostgreSQL

```bash
/postgres/
‚îú‚îÄ‚îÄ alma.sql                  # Script de creaci√≥n de tablas y relaciones
‚îú‚îÄ‚îÄ config_postgres.yaml      # Credenciales y conexi√≥n por entorno
‚îú‚îÄ‚îÄ migracion_sqlite_pg.py    # Script para volcar datos de SQLite
‚îú‚îÄ‚îÄ namespaces/
‚îÇ   ‚îú‚îÄ‚îÄ santi/
‚îÇ   ‚îî‚îÄ‚îÄ fede/
‚îî‚îÄ‚îÄ backups/
    ‚îú‚îÄ‚îÄ santi_2025-04-26.sql
    ‚îî‚îÄ‚îÄ fede_2025-04-26.sql
```


### ‚öôÔ∏è Automatizaci√≥n futura

El objetivo es que todos los scripts del ecosistema sean compatibles con PostgreSQL:

- `alma_read.py`, `alma_write.py`, `alma_estadisticas.py`  
  ‚Üí Aceptan `--dbtype postgres` y `--namespace santi`

- Todos los comandos son compatibles con CI/CD para testing remoto


### üß¨ Cierre

La migraci√≥n a PostgreSQL (o CockroachDB) es una evoluci√≥n natural del sistema ALMA LIBRE. Permite pasar de una estructura local e individual a una arquitectura colaborativa, segura y preparada para entornos multiusuario reales.

Esta transici√≥n se har√° de forma progresiva, sin romper la compatibilidad con SQLite, asegurando as√≠ una adopci√≥n gradual sin p√©rdida de funcionalidad.

### üìä 1. KPIs en Grafana

Grafana es una herramienta open source que permite crear dashboards din√°micos conectados a bases de datos como PostgreSQL.

**Indicadores posibles:**

- Porcentaje de memorias indexadas
- Conexiones sem√°nticas validadas
- Tiempo medio de respuesta IA
- Estado de sincronizaci√≥n de cada m√≥dulo
- Uso de scripts automatizados por semana

#### üß™ Ejemplo de tablero

```text
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Indicador              ‚îÇ Valor       ‚îÇ √öltima Eval. ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Memorias indexadas     ‚îÇ 92%         ‚îÇ 2025-04-25   ‚îÇ
‚îÇ Conexiones v√°lidas     ‚îÇ 87%         ‚îÇ 2025-04-25   ‚îÇ
‚îÇ Prom. respuesta IA     ‚îÇ 2.4s        ‚îÇ 2025-04-25   ‚îÇ
‚îÇ KPIs cr√≠ticos          ‚îÇ 4/5         ‚îÇ OK           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```


### üõ°Ô∏è 2. Shields Markdown (indicadores visuales)

Para entornos sin GUI o documentaci√≥n `.md`, se integran shields como los siguientes:

```markdown
![Memorias Indexadas](https://img.shields.io/badge/Memorias-Indexadas%3A92%25-green)
![Validaci√≥n Sem√°ntica](https://img.shields.io/badge/Conexiones-87%25-yellow)
![Estado IA](https://img.shields.io/badge/IA-2.4s-orange)
```

Estos badges pueden colocarse en:

- `README.md` de cada m√≥dulo
- `estructura_00_ALMA_LIBRE.md`
- `MAPA_INTERACTIVO.md`
- Dashboards externos v√≠a OBSIDIAN o interfaces web

> Los colores indican estado actual:
> - üü¢ Verde: meta cumplida
> - üü° Amarillo: en progreso
> - üî¥ Rojo: falla cr√≠tica


### üß© Carpeta propuesta

```bash
/modulos/01_bitacora_central/dashboard/
‚îú‚îÄ‚îÄ grafana_config.json
‚îú‚îÄ‚îÄ shields.json
‚îú‚îÄ‚îÄ kpi_historico.csv
‚îú‚îÄ‚îÄ plantilla_dashboard.md
‚îî‚îÄ‚îÄ estado_actual.md
```


### üå± Cierre

La visualizaci√≥n de KPIs no es un lujo, es una herramienta estrat√©gica.  
Permite saber **si el sistema est√° vivo, sano, actualizado y evolucionando**.

Ya sea desde un panel web o desde escudos en Markdown, esta estrategia facilita tanto el **autodiagn√≥stico como la auditor√≠a externa**.

### 4.18.2 Pruebas Unitarias para Casos Extremos

Adem√°s de las pruebas b√°sicas incluidas en `4.18.1`, se recomienda implementar una suite de pruebas orientadas a verificar la resiliencia del sistema ante fallos, archivos corruptos y entradas mal formateadas.


### üß™ Ejemplo 2 ‚Äì Entrada con estructura inv√°lida en `memorias.db`

```python
from sistema.validador_semantico import validar_memoria

def test_memoria_mal_formateada():
    memoria = "‚ö†Ô∏è Esta entrada no tiene conexi√≥n ni formato v√°lido"
    assert validar_memoria(memoria) == False
```


### üå± Cierre

Estas pruebas permiten anticipar errores antes de que impacten la base activa del sistema.  
Son clave para mantener la estabilidad a medida que la complejidad de ALMA LIBRE aumenta.

### üìò Gu√≠a para escribir un test b√°sico

```python
from alma_read import leer_memoria

def test_leer_memoria_existente():
    resultado = leer_memoria("trading_ema12")
    assert "Entrada" in resultado
```

> Las pruebas se registran autom√°ticamente en:  
`modulos/01_bitacora_central/logs/tests_resultados.log`


### üîÅ Validaci√≥n autom√°tica diaria

Mediante cron o CI/CD, se ejecuta un script que valida la integridad del sistema y registra los resultados:

```bash
python validar_estado.py --modo diario
```

Salida:
- KPIs de consistencia
- Errores detectados
- Recomendaciones de mejora


### üì¶ Automatizaci√≥n por cron

```bash
0 2 * * * python validar_estado.py --modo diario >> logs/tests_resultados.log
```

> Idealmente, esto corre en segundo plano sin intervenci√≥n manual.



### üõ†Ô∏è ¬øQu√© hace `generar_recursos.py`?

Este script centraliza tareas clave de mantenimiento documental:

- Regenera la tabla Cuaderno‚ÄìM√≥dulo (`estructura_00_ALMA_LIBRE.md`)
- Actualiza el diagrama `Mermaid` (y opcionalmente el `MAPA_INTERACTIVO.md`)
- Refresca los enlaces y rutas internas
- Sincroniza metadatos con `memorias.db`

#### üìò Ejemplo de uso:

```bash
python generar_recursos.py --tabla --diagrama --mapa
```


### üîÅ Flujo Automatizado (CI/CD o cron)

En lugar de ejecutar manualmente, se programa su ejecuci√≥n peri√≥dica:

```bash
0 */12 * * * python generar_recursos.py --tabla --diagrama
```

#### üß† Beneficios

- Actualizaci√≥n continua sin olvidar tareas
- Visibilidad de cambios semanales
- Prevenci√≥n de errores sem√°nticos por estructuras viejas


### üìÅ Carpeta sugerida para resultados

```bash
/00_PROMPT_ALMA_LIBRE/
‚îú‚îÄ‚îÄ estructura_00_ALMA_LIBRE.md
‚îú‚îÄ‚îÄ MAPA_INTERACTIVO.md
‚îú‚îÄ‚îÄ historial_autoactualizaciones.md
```

> Este √∫ltimo archivo guarda una entrada cada vez que se ejecuta `generar_recursos.py`


### üå± Cierre

El script `generar_recursos.py` es una piedra angular de la autoevoluci√≥n del sistema.  
Su integraci√≥n en procesos autom√°ticos garantiza que ALMA LIBRE **siga creciendo y organiz√°ndose sin depender de recordatorios humanos**.

La verdadera libertad del sistema nace cuando √©l mismo se mantiene, se actualiza y se documenta.


### üìÖ Hoja de Ruta ‚Äì Objetivos Estrat√©gicos (v3.0)

| Etapa | Objetivo | Fecha Estimada | Estado |
|-------|----------|----------------|--------|
| ‚úÖ v2.2 | Consolidaci√≥n estructural y emocional | 25/04/2025 | Completado |
| ‚úÖ v3.0 | Automatizaci√≥n, dashboards y gobernanza IA‚ÄìHumano | 26/04/2025 | En progreso final |
| üîú v3.1 | Sincronizaci√≥n multiusuario real y pruebas distribuidas | Mayo 2025 | Planificada |
| üîú v3.2 | Interfaz web de lectura y edici√≥n de memorias | Junio 2025 | En dise√±o |
| üîú v3.3 | Conexi√≥n directa con motores open source (Ollama, Oyama) | Junio‚ÄìJulio 2025 | Anticipado |


### üß† Recomendaciones para cierre de versi√≥n

- Realizar un backup de todo el sistema (`98_backups/`)
- Ejecutar `validador_semantico.py` para confirmar integridad
- Guardar logs de los scripts ejecutados en `/logs/versiones/`
- Registrar la reflexi√≥n final de esta etapa en:  
  `modulos/01_bitacora_central/diario_personal.md`


### ‚úÖ Criterios de versi√≥n cumplidos

| Requisito                       | Cumplido |
|--------------------------------|----------|
| Diagrama cuaderno‚Äìm√≥dulo       | ‚úÖ        |
| Mapa interactivo actualizado   | ‚úÖ        |
| Gob. IA‚ÄìHumano (RBAC + √©tica)  | ‚úÖ        |
| Namespaces multiusuario        | ‚úÖ        |
| CI/CD base con `generar_recursos.py` | ‚úÖ   |
| Pruebas unitarias + logs       | ‚úÖ        |
| KPIs en dashboard y markdown   | ‚úÖ        |


## 4.21 Recomendaciones Estrat√©gicas para la Evoluci√≥n v3.1‚Äìv3.3  
üîß Enfoque: Seguridad + Interfaz + Casos de Uso + Documentaci√≥n

Tras la publicaci√≥n de la versi√≥n 3.0, el sistema ALMA LIBRE se encuentra preparado para una evoluci√≥n t√©cnica m√°s profunda. Esta secci√≥n deja asentadas las **recomendaciones prioritarias** para la hoja de ruta inmediata (v3.1 a v3.3), enfocadas en robustez, accesibilidad y claridad operativa.


### üö® 2. Alertas Proactivas

#### üîî Notificaciones por Telegram/Slack

Informar en tiempo real:
- Fallos en scripts como `alma_archivar.py`
- KPIs en rojo (ej: memorias indexadas < 90%)

```python
if kpi_memorias < 90:
    send_slack_alert(f"‚ö†Ô∏è Memorias indexadas bajas: {kpi_memorias}%")
```

#### üß± Modo "safe"

Si se detectan 5+ errores en 1 hora:
- El sistema entra autom√°ticamente en modo lectura
- Se notifica a administrador para revisi√≥n manual


### üß™ 4. Casos de Uso Detallados

Agregar carpeta `/ejemplos/` con escenarios realistas:

```bash
/ejemplos/
‚îú‚îÄ‚îÄ trading_ansiedad.md
‚îú‚îÄ‚îÄ migracion_pg.md
‚îî‚îÄ‚îÄ conflicto_etica.md
```

#### üìò Ejemplos:

- IA bloquea trade por estr√©s emocional detectado
- Usuario migra su namespace a PostgreSQL
- GPT propone acci√≥n contraria a Oyama y el humano decide

