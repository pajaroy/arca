---
module: prompts/log_writer_request
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# ðŸ§  Solicitud de ImplementaciÃ³n â€“ `log_writer.py` â€“ Sprint 2.6 â€“ ALMA_RESIST

## ðŸŽ¯ Objetivo

Implementar el mÃ³dulo `log_writer.py`, encargado de registrar eventos estructurados del sistema ALMA_RESIST en archivos de log en formato JSONL.

Este mÃ³dulo es parte del sistema de trazabilidad segura y debe integrarse con los componentes del servidor LLM.

---

## ðŸ“˜ Requisitos

- Escribir logs en formato **JSONL (JSON por lÃ­nea)**
- Crear directorio `logs/` automÃ¡ticamente si no existe
- Nombres de archivo basados en la fecha actual: `alma_YYYY-MM-DD.log`
- Permitir escritura segura (uso de archivo temporal `.tmp` antes de renombrar)
- Funciones requeridas:
  - `log_event(event_type: str, message: str, module: str = "core") -> dict`
    - Devuelve un diccionario estructurado con timestamp, tipo, mensaje, PID, host y plataforma
  - `write_log(event: dict) -> bool`
    - Escribe el evento en el archivo del dÃ­a. Devuelve `True` si tuvo Ã©xito.
- ValidaciÃ³n de tipos para los argumentos
- Tolerancia a errores leves (espacio en disco, codificaciÃ³n)
- Preparado para mover a `core/llm_server/utils/log_writer.py`

---

## ðŸ§ª Ejemplo de uso

```python
from utils.log_writer import log_event, write_log

evento = log_event("INFO", "Inicio del servidor LLM", "main")
ok = write_log(evento)
```

---

## ðŸ“Ž Contexto

- Sprint: 2.6 â€“ Logging y Seguridad
- Se usarÃ¡ desde `main.py`, `transport_layer.py` y mÃ³dulos futuros
- Compatible con cifrado posterior por `log_crypto.py`
