Aqu√≠ tienes la versi√≥n mejorada y expandida del bot con las nuevas funcionalidades:

```python

import os
import logging
import datetime
import tempfile
import subprocess
from typing import List, Dict
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters
)
import whisper

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("buffer_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IdeaBuffer:
    """Clase para manejar el buffer de ideas en memoria"""
    def __init__(self):
        self.buffer: List[Dict[str, str]] = []
        self.last_summary_date = datetime.date.today()
        
    def add_idea(self, transcription: str):
        """A√±ade una nueva idea al buffer"""
        entry = {
            "hora": datetime.datetime.now().strftime("%H:%M"),
            "texto": transcription
        }
        self.buffer.append(entry)
        logger.info(f"Idea a√±adida: {entry}")
        
    def get_buffer_content(self) -> str:
        """Devuelve el contenido completo del buffer como texto"""
        return "\n".join([f"{item['hora']} - {item['texto']}" for item in self.buffer])
    
    def clear_buffer(self):
        """Limpia el buffer y actualiza la fecha del √∫ltimo resumen"""
        self.buffer.clear()
        self.last_summary_date = datetime.date.today()
        logger.info("Buffer limpiado")

# Inicializar componentes principales
model = whisper.load_model("base")
buffer = IdeaBuffer()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador del comando /start"""
    await update.message.reply_text(
        "üß† ALMA LIBRE v0.2\n"
        "Env√≠a un audio o usa /resumen para generar un resumen de tus ideas."
    )

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador de mensajes de audio/voice"""
    try:
        with tempfile.TemporaryDirectory() as tmp_dir:
            # Descargar y procesar audio
            file_id, file_ext = await get_file_id(update)
            if not file_id:
                return
                
            input_path = await download_file(update, file_id, file_ext, tmp_dir)
            wav_path = await convert_to_wav(input_path, tmp_dir)
            transcription = transcribe_audio(wav_path)
            
            # A√±adir al buffer y responder
            buffer.add_idea(transcription)
            await update.message.reply_text(
                f"üí° Idea registrada ({datetime.datetime.now().strftime('%H:%M')})",
                reply_to_message_id=update.message.message_id
            )

    except Exception as e:
        logger.error(f"Error en handle_audio: {str(e)}")
        await update.message.reply_text("‚ùå Error procesando el audio")

async def generate_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador del comando /resumen"""
    if not buffer.buffer:
        await update.message.reply_text("üì≠ No hay ideas a√∫n para resumir.")
        return
        
    try:
        summary_text = extraer_ideas_local(buffer.get_buffer_content())
        await update.message.reply_text(
            f"üìù Resumen del d√≠a:\n\n{summary_text}",
            reply_to_message_id=update.message.message_id
        )
    except Exception as e:
        logger.error(f"Error generando resumen: {str(e)}")
        await update.message.reply_text("‚ùå Error generando el resumen")

async def daily_summary(context: ContextTypes.DEFAULT_TYPE):
    """Tarea programada para resumen diario autom√°tico"""
    if buffer.buffer:
        try:
            summary_text = extraer_ideas_local(buffer.get_buffer_content())
            save_daily_summary(summary_text)
            await context.bot.send_message(
                chat_id=context.job.chat_id,
                text=f"‚è∞ Resumen diario guardado:\n\n{summary_text}"
            )
            buffer.clear_buffer()
        except Exception as e:
            logger.error(f"Error en resumen diario: {str(e)}")

def extraer_ideas_local(texto: str) -> str:
    """Funci√≥n mock para generaci√≥n de res√∫menes (placeholder para modelo local)"""
    # TODO: Integrar con modelo local (Mistral/LLaMA)
    return f"Resumen mock de {len(texto.split())} palabras generado a las {datetime.datetime.now().strftime('%H:%M')}"

def save_daily_summary(content: str):
    """Guarda el resumen diario en archivo MD"""
    os.makedirs("resumenes_diarios", exist_ok=True)
    filename = f"resumenes_diarios/{datetime.date.today()}.md"
    with open(filename, "w") as f:
        f.write(f"# Resumen {datetime.date.today()}\n\n{content}")
    logger.info(f"Resumen guardado en {filename}")

# Funciones de procesamiento de audio (reutilizadas de versi√≥n anterior)
async def get_file_id(update: Update):
    if update.message.voice:
        return update.message.voice.file_id, "ogg"
    elif update.message.audio:
        return update.message.audio.file_id, update.message.audio.file_name.split('.')[-1]
    return None, None

async def download_file(update: Update, file_id: str, file_ext: str, tmp_dir: str):
    file = await update.message.effective_attachment.get_file()
    input_path = os.path.join(tmp_dir, f"audio_{file_id}.{file_ext}")
    await file.download_to_drive(input_path)
    return input_path

async def convert_to_wav(input_path: str, tmp_dir: str):
    wav_path = os.path.join(tmp_dir, "audio.wav")
    subprocess.run([
        'ffmpeg', '-i', input_path,
        '-ar', '16000', '-ac', '1', '-y', wav_path
    ], check=True)
    return wav_path

def transcribe_audio(wav_path: str):
    return model.transcribe(wav_path, fp16=False)["text"]

def main():
    """Inicializaci√≥n del bot"""
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("Variable de entorno TELEGRAM_TOKEN no definida")
        
    app = Application.builder().token(token).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("resumen", generate_summary))
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, handle_audio))

    # Programar tarea diaria
    job_queue = app.job_queue
    job_queue.run_daily(
        daily_summary,
        time=datetime.time(23, 50, 0),
        chat_id=os.getenv("CHAT_ID")  # Configurar CHAT_ID para el grupo espec√≠fico
    )

    logger.info("Iniciando buffer_bot...")
    app.run_polling()

if __name__ == "__main__":
    main()
```

**Mejoras principales respecto a la versi√≥n anterior:**

1. **Arquitectura modular**:
    
    - Clase¬†`IdeaBuffer`¬†para manejo del estado
        
    - Separaci√≥n clara de responsabilidades entre componentes
        
    - Funciones mockeadas para futura integraci√≥n con modelos locales
        
2. **Nuevas funcionalidades**:
    
    - Sistema de buffer con persistencia en memoria
        
    - Comando¬†`/resumen`¬†con respuesta contextual
        
    - Resumen diario autom√°tico programado
        
    - Guardado de res√∫menes en archivos Markdown
        
3. **Mejor manejo de errores**:
    
    - Logging detallado en archivo y consola
        
    - Mensajes de error contextuales para usuarios
        
    - Validaci√≥n de buffer vac√≠o
        
4. **Preparaci√≥n para escalar**:
    
    - Sistema de jobs para tareas programadas
        
    - Estructura lista para integrar modelos locales
        
    - Gesti√≥n centralizada de configuraci√≥n
        

**Requisitos adicionales:**

```bash


# Variables de entorno requeridas
export TELEGRAM_TOKEN="tu_token"
export CHAT_ID="id_grupo"  # Opcional para res√∫menes autom√°ticos

# Instalar dependencias adicionales
pip install python-dotenv schedule
```


**Recomendaciones para uso en producci√≥n:**

1. Agregar manejo de persistencia del buffer (ej. guardar en SQLite)
    
2. Implementar el sistema real de resumen con modelos locales
    
3. A√±adir sistema de prioridades para las ideas
    
4. Implementar comandos adicionales (/estado, /limpiar)
    

Este c√≥digo mantiene la funcionalidad base de transcripci√≥n mientras a√±ade el nuevo sistema de gesti√≥n de ideas con arquitectura escalable y f√°cil mantenimiento.