
# üì° PROMPT BASE ‚Äì Investigaci√≥n Profunda GPT-4.5 (v0.9)

## üéØ Objetivo General

Desarrollar un sistema modular, antifr√°gil y completamente offline llamado **ALMA_RESIST**, que funcione como entorno de trabajo con IA local (CLI + memoria + documentaci√≥n), priorizando:

- Privacidad radical
- Seguridad criptogr√°fica
- Operaci√≥n sin internet
- Optimizaci√≥n para hardware limitado
- Auto-documentaci√≥n y recuperaci√≥n total ante fallos


## ‚öôÔ∏è Entorno T√©cnico

- Linux x86_64 (Debian/Ubuntu)
- Python 3.10.12+
- RAM m√≠nima: 8 GB
- CPU: 4 n√∫cleos
- Sin internet (offline-first)
- Hardware externo: pendrives y discos como nodos de respaldo


## üìÅ Archivos Base

- `ALMA_LIBRE/`
- `idea_base_0.0.9.md`
- `docs/flujo_secuencial.mmd`


## ‚úÖ Checklists Cr√≠ticos

### Manejo de Errores
- [ ] Codificaci√≥n de errores (E-404: DB corrupta)
- [ ] Sugerencias CLI (ej: `alma --reparar-db`)
- [ ] `docs/fallos_criticos.md` con pasos para mitigar errores

### Seguridad
- [ ] Clave derivada con PBKDF2-SHA512
- [ ] Rotaci√≥n cada 30 d√≠as (`alma --rotate-keys`)
- [ ] Bloqueo tras 3 intentos fallidos (`alma --unlock` solo desde root)

### Chat Persistente
- [ ] Paginaci√≥n en RAM (√∫ltimos 100 mensajes)
- [ ] Cache auto-limpiante (`alma --flush-cache`)
- [ ] Uso de `mmap` para eficiencia en disco

### Backups F√≠sicos
- [ ] Comando `alma --backup-physical /dev/sdb1`
- [ ] SHA-256 y `.manifest` post-escritura

### Gesti√≥n de Dependencias Offline
- [ ] Script `update_local_repo.sh`
- [ ] Verificaci√≥n GPG de paquetes


## üìö Documentaci√≥n Autoexplicativa

- [ ] `docs/guia_emergencia.md` (auto-generada)
- [ ] `docs/auditoria_auto.md` (reportes diarios de IA)
- [ ] `docs/ia_suggested_changes.md` (cambios sugeridos por GPT-4.5)
- [ ] `docs/benchmarks_chat.md` (uso de disco y tiempo respuesta)


## üìù Instrucci√≥n Final para GPT-4.5

> Us√° `ALMA_LIBRE/`, `idea_base_0.0.9.md` y este prompt como referencia principal.  
> Como IA Copiloto, tu tarea es:

- Generar un roadmap detallado por sprints
- Sugerir c√≥digo robusto con docstrings estilo Google
- Documentar autom√°ticamente decisiones y errores
- Automatizar pruebas (pytest, locust)
- Asegurar compatibilidad 100% offline
- Validar tiempos y uso de recursos bajo hardware limitado
- Implementar recuperaci√≥n parcial, cifrado y rotaci√≥n de claves

