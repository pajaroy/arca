# Sprint 2.5: Auditor√≠a estructural ALMA_RESIST

## Objetivo
Reorganizar, limpiar y optimizar la estructura documental del proyecto ALMA_RESIST, asegurando el cumplimiento total de convenciones internas.

## Fase 1: Preparaci√≥n
- [x] Crear branch o copia local (`sprint_2.5_auditoria`)
- [x] Realizar backup completo (`zip` o similar)
- [x] Leer y repasar metodolog√≠a de sprints (`metodologia_sprints_v2.md`)

## Fase 2: Eliminaci√≥n de redundancias
- [x] Eliminar carpetas vac√≠as o innecesarias:
  - [x] `backup_metadata/`
  - [x] `backup_linked_to/`
  - [x] `backup_snakecase/`
  - [x] `commands/`
  - [x] `venv/`
- [x] Consolidar pruebas:
  - [x] Mover contenido √∫til de `testing/` a `tests/`
  - [x] Eliminar `testing/` y `test_kits/`
- [x] Unificar auditor√≠as:
  - [x] Trasladar contenido de `docs/auditorias/` a `logs/auditorias/`
  - [x] Eliminar carpeta vac√≠a (`docs/auditorias/`)

## Fase 3: Correcci√≥n de estructura documental
- [x] Corregir nombres incorrectos:
  - [x] Renombrar `docs/resgistros/` a `docs/registros/`
  - [x] Renombrar `logs_histo‚ï†√ºricos/` a `logs_historicos/`
- [ ] Aplicar `snake_case` uniforme en todos los archivos
- [x] Verificar y corregir prefijo de versionado (`ideas_base_legacy` ‚Üí `v0.0.0.0_legacy`)
- [x] Reubicar archivos clave:
  - [x] `CONTEXT.md` ‚Üí `docs/introduccion/context.md`
  - [x] `version.md` ‚Üí `docs/introduccion/version.md`
- [ ] Crear o actualizar `README.md` en cada carpeta principal

## Fase 4: Validaci√≥n de metadatos YAML
- [ ] A√±adir o corregir bloque YAML `frontmatter` en todos los `.md` importantes
  - Campos obligatorios:
    - [ ] `module`
    - [ ] `type`
    - [ ] `status`
    - [ ] `created`
- [ ] Ejecutar script de validaci√≥n YAML (si aplica)

## Fase 5: Organizaci√≥n modular de carpetas
- [ ] Organizar documentaci√≥n dentro de `docs/` por m√≥dulos claros:
  - [ ] `introduccion/`
  - [ ] `arquitectura/`
  - [ ] `metodologias/`
  - [ ] `control/` (auditor√≠as, bit√°coras)
  - [ ] `utilidades/`
- [ ] Consolidar y ordenar carpetas cronol√≥gicamente dentro de `versiones/`
- [ ] Trasladar respaldos relevantes a `archive/`

## Fase 6: Automatizaci√≥n y Scripts
- [ ] Centralizar scripts y herramientas:
  - [ ] Mover automatizaciones de otras carpetas a `scripts/`
  - [ ] Actualizar `README.md` en `scripts/`

## Fase 7: Control de calidad y revisi√≥n final
- [ ] Ejecutar revisi√≥n cruzada:
  - [ ] Verificaci√≥n manual de estructura
  - [ ] Validar checklist con script autom√°tico (si aplica)
- [ ] Generar √°rbol visual actualizado (`tree`)
- [ ] Realizar commit detallado describiendo cambios realizados
- [ ] Actualizar `CHANGELOG.md` con acciones del Sprint 2.5

## Fase 8: Cierre del Sprint
- [ ] Solicitar revisi√≥n t√©cnica interna o externa
- [ ] Documentar aprendizajes o ajustes metodol√≥gicos
- [ ] Integrar cambios definitivos a rama principal
- [ ] Comunicar cierre del Sprint 2.5 al equipo



## üìå Principios rectores

- **Minimalismo estructural:** menos carpetas, m√°s significado. Toda redundancia debe eliminarse o fusionarse.
- **Modularidad estricta:** cada carpeta/documento debe responder a una funci√≥n, no a una ocurrencia ca√≥tica.
- **Nombrado determinista:** los nombres deben permitir inferir su funci√≥n y nivel jer√°rquico sin abrir los archivos.
- **Versionado sem√°ntico:** ning√∫n archivo o carpeta sin una raz√≥n de versi√≥n clara debe sobrevivir.
- **YAML como contrato sem√°ntico:** todo archivo Markdown relevante debe iniciar con metadatos YAML claros, v√°lidos y coherentes.
- **Separaci√≥n de contextos:** documentaci√≥n no es c√≥digo, c√≥digo no es bit√°cora, bit√°cora no es auditor√≠a. Cada tipo de contenido tiene su lugar y reglas.


## üß≠ Criterios de √©xito

- Estructura final reduce el n√∫mero total de carpetas innecesarias sin p√©rdida de significado.
- Todos los `.md` clave tienen un bloque YAML v√°lido con al menos los campos: `module`, `type`, `status`, `created`.
- Los `README.md` existen en todas las carpetas de primer y segundo nivel con explicaci√≥n funcional del contenido.
- El √°rbol de carpetas puede visualizarse de forma clara en una sola pantalla (m√°ximo 3 niveles).
- Se puede ejecutar un script y validar que no hay archivos mal ubicados, sin prefijos, ni carpetas vac√≠as.


## ‚ö†Ô∏è Errores a evitar

- Reorganizar sin respaldo previo.
- Borrar contenido sin verificar si es redundante o s√≥lo mal ubicado.
- No dejar trazabilidad de los cambios: todo cambio debe ser registrado en `CHANGELOG.md` y el commit debe ser descriptivo.
- Romper rutas relativas usadas en scripts, si a√∫n no fueron modularizadas.


# üß© Ap√©ndice para Auditor√≠a T√©cnica Futura ‚Äì Sprint 2.6 o superior (2025-05-25)

Este ap√©ndice documenta ideas de mejora y expansi√≥n para futuras auditor√≠as estructurales o t√©cnicas dentro de ALMA_RESIST, basadas en la experiencia del Sprint 2.5.

## üîß Propuestas de mejora para `validate_docs.py`

- **Autocompletado de YAML faltante:** Opci√≥n `--fix-missing` para insertar un bloque m√≠nimo si no existe.
    
- **Validaci√≥n de nombre de archivo:** Comprobar que el nombre del archivo `.md` siga `snake_case`.
    
- **Salida estructurada JSON:** Agregar opci√≥n `--json` para integraci√≥n con CI/CD o IA.
    
- **Generaci√≥n de reporte Markdown:** Crear `docs/reportes/validacion_sprint_X.md` al finalizar la validaci√≥n.
    
- **Validaci√≥n cruzada de ubicaci√≥n real del archivo con su campo** `**module**`**.**
    

## üß† Oportunidades para extensi√≥n IA

- **An√°lisis sem√°ntico del frontmatter**: Sugerir autom√°ticamente cambios si el m√≥dulo, tipo o estado no coinciden con el contenido.
    
- **Clasificaci√≥n autom√°tica de archivos nuevos sin YAML.**
    
- **Sugerencias de mejora estil√≠stica para documentos `.md` incompletos o con errores.