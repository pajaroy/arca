---
module: versiones/v0_0_0_5_llm_server/descargas/appendix_sprint_2_6_deepseek
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
## ðŸ“Œ ApÃ©ndice TÃ©cnico â€“ Plan de Tests Automatizados (Fase 3)

Este apÃ©ndice detalla la suite de tests necesaria para cubrir funcionalmente todos los mÃ³dulos desarrollados en el Sprint 2.6 bajo el nuevo modelo modular de ALMA_RESIST. Todos los tests deben migrarse o crearse bajo la nueva arquitectura.

---

### âœ… Tests existentes a refactorizar

| Archivo original     | Estado         | AcciÃ³n recomendada                           |
|----------------------|----------------|----------------------------------------------|
| `test_llm.py`        | Obsoleto       | Refactorizar como `test_model_wrapper.py`    |
| `test_cli.py`        | Parcial        | Migrar a `test_api_responder.py`             |
| `test_log_crypto.py` | Parcial        | Mantener y extender                          |

---

### ðŸ§ª Nuevos tests a implementar

| Archivo sugerido            | MÃ³dulo testeado             | Casos clave                                                                 |
|-----------------------------|-----------------------------|------------------------------------------------------------------------------|
| `test_model_wrapper.py`     | `model_wrapper.py`          | Carga del modelo, errores por ruta invÃ¡lida, generaciÃ³n con prompt vÃ¡lido   |
| `test_api_responder.py`     | `main.py` (FastAPI)         | Status 200, 422 input invÃ¡lido, 503 modelo no cargado, estructura de salida |
| `test_transport_layer.py`   | `transport_layer.py`        | EnvÃ­o y recuperaciÃ³n, validaciÃ³n con schema, escritura/lectura de archivos  |
| `test_context_tracker.py`   | `context_tracker.py`        | Registro de interacciÃ³n, validaciÃ³n JSON Schema, recuperaciÃ³n, limpieza     |
| `test_log_writer.py`        | `log_writer.py`             | Escritura atÃ³mica, validaciÃ³n bÃ¡sica, simulaciÃ³n de error de disco          |
| `test_log_crypto.py`        | `log_crypto.py`             | Cifrado, descifrado, detecciÃ³n de algoritmo, verificaciÃ³n de nonce          |
| `test_memory_graph.py`      | `memory_graph.py`           | (Pendiente) InserciÃ³n de nodos, relaciones, exportaciÃ³n, bÃºsqueda por peso  |

---

### ðŸ§± Requisitos tÃ©cnicos

- Usar `pytest` como motor principal
- Evitar dependencias externas (usar mocks para modelo si es necesario)
- Las rutas de escritura deben apuntar a carpetas temporales (`tmp/` o `tests/data`)
- Agregar al menos un test por caso de error (input invÃ¡lido, fallo en carga, etc.)
- Incluir fixtures o mocks si el modelo no puede ser cargado durante CI

---

### ðŸ“‚ UbicaciÃ³n sugerida

```plaintext
tests/
â”œâ”€â”€ test_model_wrapper.py
â”œâ”€â”€ test_api_responder.py
â”œâ”€â”€ test_transport_layer.py
â”œâ”€â”€ test_context_tracker.py
â”œâ”€â”€ test_log_writer.py
â”œâ”€â”€ test_log_crypto.py
â””â”€â”€ test_memory_graph.py
```

---

### ðŸ§  Notas finales

Una vez finalizada esta suite, se podrÃ¡:
- Validar automÃ¡ticamente los endpoints
- Simular interacciones completas
- Auditar integridad de archivos
- Iniciar testeo CI/CD desde CLI o pre-commit

Este plan cumple los requisitos de la Fase 3 del Sprint 2.6 y establece una base sÃ³lida para testear futuras versiones del servidor.
