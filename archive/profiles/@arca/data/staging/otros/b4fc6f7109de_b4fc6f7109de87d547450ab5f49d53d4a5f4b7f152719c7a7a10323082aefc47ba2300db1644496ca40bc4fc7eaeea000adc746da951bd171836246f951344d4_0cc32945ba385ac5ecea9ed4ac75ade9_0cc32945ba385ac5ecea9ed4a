
- ¬øC√≥mo garantizar compatibilidad entre m√≥dulos nuevos y `ALMA_LIBRE/`?
- ¬øQu√© estrategia de fallback usar si falla el monitoreo?
- ¬øC√≥mo optimizar la inferencia sin GPU en CPUs ARMv8?


¬°Este prompt est√° listo para iniciar la primera conversaci√≥n con GPT-4.5!  
Adjunt√°:  
- `prompt_base_primer_chat_v1.4.md`  
- `ALMA_LIBRE/`  
- `idea_base_0.0.9.md`


module: prompts/prompt_codigo_base_alma_resist
type: core
status: in_progress
created: '2025-05-17'
linked_to:
- metodologia_doc_ia_v2.md


## üì¶ CONTEXTO DEL SISTEMA

- Sistema modular IA offline
- 100% ejecutable desde terminal
- Compatible con Debian 12+ (x86 y ARMv8)
- Sin conexi√≥n a internet
- Priorizaci√≥n: soberan√≠a tecnol√≥gica, eficiencia energ√©tica, antifragilidad
- Hardware objetivo m√≠nimo: 1 core + 2GB RAM


## üìÅ M√ìDULOS TIPIFICADOS

| M√≥dulo              | Descripci√≥n funcional                                       |
|---------------------|-------------------------------------------------------------|
| log_writer.py       | Logging JSONL estructurado con metadatos del sistema       |
| log_crypto.py       | Cifrado de logs con AES-256 (fallback ChaCha20)            |
| log_integrity.py    | Verificaci√≥n SHA3 de logs (SHAKE256)                       |
| alma_monitor.py     | Daemon de monitoreo de CPU, RAM, temperatura, swap         |
| alma_auto_eval.py   | Evaluaci√≥n de rendimiento entre sprints                    |
| test_arch.sh        | Detecci√≥n de arquitectura + benchmarks por CPU             |
| alma_update.sh      | Migraci√≥n y backup autom√°tico de versiones                 |


## ‚úÖ QU√â DEBE DEVOLVER DEEPSEEK

1. C√≥digo completo y ejecutable
2. Comentado y documentado con docstrings
3. Seguro, portable, modular y sin dependencias externas
4. Ejemplos de uso simples y pr√°cticos


module: prompts/prompt_llm_server_init
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

## Archivo: solicitud_log_crypto.md
Contenido:
# üß† Solicitud de M√≥dulo: `log_crypto.py` ‚Äì ALMA_RESIST

## üéØ Objetivo
Implementar un m√≥dulo Python llamado `log_crypto.py` dentro del sistema ALMA_RESIST. Este m√≥dulo debe poder:

1. Cifrar archivos `.log` con AES-256 si la CPU es x86 y soporta AES-NI.
2. Usar ChaCha20 como alternativa en ARM o CPUs sin AES-NI.
3. Validar autom√°ticamente qu√© algoritmo usar en funci√≥n del entorno.
4. Aceptar claves personalizadas o generarlas de forma segura si no se proveen.
5. Guardar archivo cifrado como `.enc` y poder descifrarlo de forma segura.
6. Operar 100% offline y desde terminal.


## üß™ Entradas esperadas

```python
encrypt_log(input_path="logs/alma_2025-05-17.log", output_path="logs/alma_2025-05-17.enc", key=b"clave_segura")
decrypt_log(input_path="logs/alma_2025-05-17.enc", output_path="logs/alma_2025-05-17.log", key=b"clave_segura")
```


## üìò Archivos relacionados

- `core/log_writer.py` ‚Äì Genera los logs
- `tests/test_log_writer.py` ‚Äì Verifica escritura funcional
- `docs/changelog.md`, `docs/lecciones_aprendidas.md`


üì¶ Este m√≥dulo es cr√≠tico para garantizar privacidad radical en ALMA_RESIST.


module: prompts/solicitud_log_writer
type: core
status: in_progress
created: '2025-05-19'
linked_to:
- metodologia_doc_ia_v2.md


## ‚öôÔ∏è Requisitos Generales

- Debe funcionar 100% **offline**, sin dependencias externas.
- Compatible con sistemas **Debian 12+**, CPU de 1 n√∫cleo y 2GB de RAM.
- El log debe escribirse en formato **JSONL**, con una entrada por l√≠nea.
- Toda escritura debe ser **at√≥mica y segura ante fallos**.
- El sistema debe **detectar errores no cr√≠ticos** y recuperarse.


## ‚úÖ Criterios de calidad

- Compatible con caracteres internacionales (`ensure_ascii=False`)
- No debe depender de librer√≠as externas (solo `os`, `json`, `warnings`, `datetime`, `socket`)
- C√≥digo modular, con docstrings tipo `>>> doctest`
- Defensivo: cualquier error previsible debe estar manejado


## üìÇ Estructura de archivos relacionada
- `core/log_writer.py` ‚Üí m√≥dulo fuente
- `tests/test_log_writer.py` ‚Üí test funcional (pasa ‚úÖ)
- `logs/` ‚Üí carpeta generada autom√°ticamente
- `prompts/prompt_log_writer_v1.0.md` ‚Üí este archivo


## üìå Contexto ALMA_RESIST
Este m√≥dulo es el primer componente estable del `Sprint 1 ‚Äì Logging cifrado antifr√°gil`. Fue validado manualmente y ser√° base de auditor√≠a para los m√≥dulos `log_crypto.py` y `log_integrity.py`.


module: prompts/test_api_responder_prompt
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


## üéØ Objetivo

Desarrollar el archivo `tests/test_api_responder.py` usando `pytest` y `TestClient` de FastAPI para verificar el correcto funcionamiento de la API LLM, su manejo de errores, estructura de respuesta y validaci√≥n sem√°ntica.


## üîß Consideraciones t√©cnicas

- Usar `from fastapi.testclient import TestClient`
- Mockear `ModelWrapper.generate()` si fuera necesario para evitar carga real
- Usar fixtures de `pytest` si es posible para levantar la app (`client = TestClient(app)`)
- Verificar tipos, claves presentes y que no devuelva estructuras inv√°lidas
- Verificar integraci√≥n con `TransportLayer` y `ContextTracker` si se desea ampliar la prueba


## üìÇ Archivos disponibles

- `main.py` (servidor FastAPI)
- `model_wrapper.py`
- `transport_layer.py`
- `context_tracker.py`
- `schema_prompt.json`
- `schema_respuesta.json`
- `test_model_wrapper.py` (ya implementado)

## Archivo: test_context_tracker_prompt.md
Contenido:
# ‚úÖ Solicitud de Test ‚Äì `test_context_tracker.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `context_tracker.py`, que se encarga de registrar interacciones (prompt/respuesta/metadata), recuperarlas y borrarlas de forma segura.


## üß™ Casos de prueba sugeridos

| Caso                                           | Resultado esperado                                     |
|------------------------------------------------|--------------------------------------------------------|
| Registro v√°lido con prompt, respuesta y metadata | Se guarda correctamente, archivo `.jsonl` actualizado |
| Recuperaci√≥n de historial con `get_history(n)` | Devuelve los √∫ltimos `n` registros                     |
| Borrado del historial                          | Archivo eliminado, nuevo archivo creado vac√≠o         |
| Manejo de l√≠neas corruptas                     | Se salta la l√≠nea, logging indica el error            |
| Validaci√≥n contra schema (falta campo)         | No registra interacci√≥n inv√°lida                      |
| Verificaci√≥n de longitud con `len(tracker)`    | Coincide con n√∫mero real de l√≠neas en archivo         |


## üìÇ Archivos relacionados

- `context_tracker.py` (m√≥dulo principal)
- `schema_prompt.json` y `schema_respuesta.json` (validados indirectamente)

## Archivo: test_log_crypto_prompt.md
Contenido:
# ‚úÖ Solicitud de Test ‚Äì `test_log_crypto.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `log_crypto.py`, el cual implementa cifrado y descifrado de archivos de log usando algoritmos AES-GCM y ChaCha20-Poly1305, con generaci√≥n segura de claves y validaci√≥n de integridad.


## üß™ Casos de prueba sugeridos

| Caso                                            | Resultado esperado                                |
|-------------------------------------------------|---------------------------------------------------|
| Cifrado de archivo JSON v√°lido                  | Archivo `.enc` creado, contenido cifrado          |
| Descifrado correcto                             | Archivo JSON recuperado igual al original         |
| Validaci√≥n de log cifrado                       | `True` si es v√°lido, `False` si no                |
| Generaci√≥n de clave sin password (random)       | Devuelve clave de 32 bytes                        |
| Generaci√≥n de clave con password/salt           | Devuelve clave reproducible con los mismos datos  |
| Descifrado con clave incorrecta                 | Lanza excepci√≥n o contenido inv√°lido              |
| Manejo de errores de lectura/escritura          | Logging de error y control de excepciones         |


## üìÇ Archivos relacionados

- `log_crypto.py` (m√≥dulo a testear)
- `log_writer.py` (compatible como entrada)

## Archivo: test_log_writer_prompt.md
Contenido:
# ‚úÖ Solicitud de Test ‚Äì `test_log_writer.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `log_writer.py`, el cual implementa un sistema de escritura de logs en formato JSONL con escritura at√≥mica, validaci√≥n de estructura y rotaci√≥n autom√°tica.


## üß™ Casos de prueba sugeridos

| Caso                                             | Resultado esperado                                 |
|--------------------------------------------------|----------------------------------------------------|
| Escritura v√°lida                                 | Log creado con evento completo                     |
| Evento mal formado (sin campos requeridos)       | Retorna `False`, no se escribe                     |
| Escritura at√≥mica (uso de archivo temporal)      | Archivo `.tmp` renombrado a `.log` correctamente   |
| M√∫ltiples eventos                                | Se agregan en formato JSONL (una l√≠nea por evento) |
| Rotaci√≥n autom√°tica                              | Elimina logs m√°s antiguos que `N` d√≠as             |
| Validaci√≥n de tipos                              | Cada campo del evento es del tipo esperado         |
| Fallo en disco (simulado)                        | Manejo de excepci√≥n, retorna `False`               |
| Lectura del log resultante                       | Puede ser deserializado correctamente              |


## üìÇ Archivos relacionados

- `log_writer.py` (m√≥dulo principal)
- `log_crypto.py` (relacionado pero se testea aparte)

## Archivo: test_memory_graph_prompt.md
Contenido:
# ‚úÖ Solicitud de Test ‚Äì `test_memory_graph.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `memory_graph.py`, el cual implementa un grafo sem√°ntico orientado con nodos √∫nicos y aristas ponderadas para representar relaciones entre prompts, respuestas y conceptos derivados de interacciones previas.


## üß™ Casos de prueba sugeridos

| Caso                                             | Resultado esperado                                 |
|--------------------------------------------------|----------------------------------------------------|
| Inserci√≥n de nodos nuevos                        | Devuelve ID √∫nico, evita duplicados               |
| B√∫squeda de ID por contenido                     | Devuelve ID correcto o None si no existe          |
| Creaci√≥n de aristas con peso                     | Aparecen en exportaci√≥n con peso correcto         |
| Recuperaci√≥n de nodos relacionados               | Devuelve nodos conectados por encima del threshold|
| Exportaci√≥n en JSON                              | Formato v√°lido, contiene nodos y edges            |
| Exportaci√≥n en GraphML                           | Salida con estructura est√°ndar                    |
| Borrado del grafo (`clear`)                      | Estado limpio, sin nodos ni relaciones            |
| Robustez con datos repetidos                     | No rompe relaciones, no duplica nodos             |
| Validaci√≥n de errores                            | Lanza excepci√≥n si se conecta nodo inexistente    |


## üìÇ Archivos relacionados

- `memory_graph.py` (m√≥dulo implementado)
- `context_tracker.py` (integraci√≥n sugerida)
- `test_context_tracker.py` (ya implementado)

## Archivo: test_transport_layer_prompt.md
Contenido:
# ‚úÖ Solicitud de Test ‚Äì `test_transport_layer.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe validar el correcto funcionamiento del m√≥dulo `transport_layer.py`, el cual se encarga de:

- Validar datos contra contratos JSON Schema
- Guardar prompts y respuestas en disco como `.json`
- Recuperar entradas previas
- Mantener una rotaci√≥n de archivos m√°xima


## üß™ Casos de prueba sugeridos

| Caso                                               | Resultado esperado                        |
|----------------------------------------------------|-------------------------------------------|
| Env√≠o de prompt v√°lido                             | Archivo `.json` creado correctamente      |
| Env√≠o de respuesta v√°lida                          | Archivo `.json` creado y validado         |
| Env√≠o de prompt malformado (sin campo requerido)   | Lanza `jsonschema.ValidationError`        |
| Recuperaci√≥n de √∫ltima entrada                     | `receive()` devuelve JSON esperado        |
| Listado de entradas                                | `list_entries()` devuelve lista ordenada  |
| Rotaci√≥n de archivos (`purge_old_entries`)         | Borra archivos antiguos, mantiene m√°ximo  |
| Directorio inexistente                             | Se crea autom√°ticamente                   |
| Contratos corruptos o ausentes                     | Lanza `RuntimeError`                      |


## üìÇ Archivos relacionados

- `transport_layer.py` (m√≥dulo a testear)
- `schema_prompt.json`
- `schema_respuesta.json`
- `test_model_wrapper.py`, `test_api_responder.py` (ya implementados)

## Archivo: testing_sprint_2_6_prompt.md
Contenido:
# ‚úÖ Contexto T√©cnico ‚Äì Proyecto ALMA_RESIST ‚Äì Sprint 2.6

Este es un nuevo hilo exclusivamente dedicado a crear una suite de tests automatizados que valide el funcionamiento de todos los m√≥dulos del servidor LLM desarrollado en el Sprint 2.6.

## üìÇ M√≥dulos disponibles

Ya contamos con los siguientes archivos .py completamente desarrollados e integrados:

- `main.py` (FastAPI) ‚Äì endpoint `/responder`
- `model_wrapper.py` ‚Äì gesti√≥n de modelo llama.cpp y generaci√≥n
- `transport_layer.py` ‚Äì persistencia de prompts/respuestas validadas
- `context_tracker.py` ‚Äì historial contextual de interacciones
- `log_writer.py` ‚Äì logger estructurado en JSONL
- `log_crypto.py` ‚Äì cifrado con AES-256-GCM / ChaCha20

Adem√°s, contamos con contratos JSON Schema validados: `schema_prompt.json` y `schema_respuesta.json`.


## üß™ Tareas de testeo por archivo

### `test_model_wrapper.py`
- Probar carga de modelo correcta
- Generaci√≥n de texto funcional
- Manejo de errores al pasar rutas incorrectas
- Tiempo de respuesta y longitud m√≠nima

### `test_api_responder.py`
- Status 200 con prompt v√°lido
- Status 422 con prompt vac√≠o
- Status 503 si no hay modelo cargado
- Validaci√≥n de estructura de respuesta

### `test_transport_layer.py`
- Env√≠o de datos v√°lidos ‚Üí archivo creado
- Env√≠o de datos inv√°lidos ‚Üí error controlado
- Recuperaci√≥n correcta del √∫ltimo dato
- Validaci√≥n contra contratos JSON

### `test_context_tracker.py`
- Registro de interacci√≥n correcto
- Recuperaci√≥n del historial
- Manejo de l√≠neas corruptas
- Borrado de historial

### `test_log_writer.py`
- Escritura at√≥mica
- Validaci√≥n de campos requeridos
- Manejo de errores de disco simulado
- Prueba de rotaci√≥n de logs

### `test_log_crypto.py`
- Cifrado y descifrado funcional
- Validaci√≥n del contenido cifrado
- Detecci√≥n de algoritmo por hardware


## üîê Objetivo final

Completar la Fase 3 del Sprint 2.6 validando que todo el sistema est√° operativo, seguro y trazable, antes de pasar al empaquetado y documentaci√≥n final.

**¬øPod√©s comenzar creando `test_model_wrapper.py` como primer test optimizado y luego avanzar uno por uno con los dem√°s m√≥dulos?**


module: prompts/transport_layer_request
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


## üìò Requisitos

### Clase: `TransportLayer`

- M√©todos esperados:
  - `send(data: dict, endpoint: str) -> None`  
    Guarda localmente un archivo JSON nombrado con `endpoint` y un timestamp.
  - `receive(endpoint: str) -> dict`  
    Recupera el √∫ltimo archivo JSON guardado para un endpoint determinado.
  - `list_entries(endpoint: str) -> list`  
    Lista todos los archivos almacenados para ese endpoint.

### Condiciones:

- Guardar los datos en una carpeta local llamada `transport_data/`
- Los archivos deben tener nombre: `{endpoint}_{timestamp}.json`
- Usar `uuid` o timestamp para unicidad de nombres
- Manejar errores si no existe el archivo o el endpoint
- Los datos deben validarse contra:
  - `schema_prompt.json` al guardar entradas
  - `schema_respuesta.json` al guardar salidas

> Los archivos `schema_prompt.json` y `schema_respuesta.json` ya est√°n definidos y documentados en la carpeta `docs/contracts/`. Deben usarse como referencia para validar la estructura antes de guardar o recuperar informaci√≥n.


## üìé Contexto

- Sprint: 2.6 ‚Äì LLM Server
- Conectado con: `main.py`, `model_wrapper.py`, `docs/contracts/schema_*.json`
- Funci√≥n clave en el MVP para soportar reflexiones y trazabilidad


## Archivo: manual_instalacion.md
Contenido:
# üõ†Ô∏è Manual de Instalaci√≥n de Sincronizaci√≥n

Instrucciones paso a paso para configurar Syncthing, Git, cron o systemd.timer.

## Archivo: generar_tree.md
Contenido:
### ‚úÖ Comando desde `/home/bird/Alma/ALMA_RESIST`

#### Nivel 3:
```bash
tree -L 3 -d . > ../tree_ALMA_RESIST_L3.txt
```

#### Nivel 4:
```bash
tree -L 4 -d . > ../tree_ALMA_RESIST_L4.txt
```


## Archivo: validacion_documentacion.md
Contenido:
# ‚úÖ Validaci√≥n completa de documentaci√≥n

Ejecuta el script de validaci√≥n que inspecciona toda la estructura documental (`docs/`).

## üîß Comando

```bash
bash scripts/validar_documentacion.sh
```

## üß™ Alias recomendado

```bash
alias alma_valida='bash ~/Alma/ALMA_RESIST/scripts/validar_documentacion.sh'
```

Agregalo en tu archivo `~/.bashrc` o `~/.zshrc` para usarlo f√°cilmente:

```bash
source ~/.bashrc
# o
source ~/.zshrc
```

## üìå Detalles

Este script realiza:

- Validaci√≥n sint√°ctica de los metadatos YAML
- Normalizaci√≥n de nombres de m√≥dulos a `snake_case`
- Correcci√≥n autom√°tica de campos requeridos


module: utilidades/scripts/alma_cli
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


## üß™ Subcomandos disponibles

### 1. Audit
Audita inconsistencias sem√°nticas como:
- `domain` no presente en `tags`
- `core` sin campo `linked_to`

```bash
python3 scripts/alma-cli.py audit UnificacionMetadatos --rules docs/01_methodologies/metodologia_interaccion_ia_v2.md
```

### 2. Batch-update
Actualiza campos YAML en lote:

```bash
python3 scripts/alma-cli.py batch-update --field domain --value IA --type core
```

Opcionales:
- `--missing-only`: Solo modifica si el campo no existe
- `--dry-run`: No guarda cambios, solo simula
- `--verbose`: Detalles de ejecuci√≥n


## üìÅ Estructura de logs generados

```
logs/
‚îî‚îÄ‚îÄ auditorias/
    ‚îî‚îÄ‚îÄ auditoria_YYYYMMDD_HHMM_SPRINT.md
```

## Archivo: compress_alma_resist.md
Contenido:
#!/bin/bash

# Ruta del zip final
OUTPUT="/home/bird/Alma/ALMA_RESIST/alma_resist_compressed.zip"

# Nos movemos al root del proyecto
cd /home/bird/Alma/ALMA_RESIST || exit 1

# Creamos el zip solamente con los archivos que no est√©n ignorados por Git
git ls-files > /tmp/files_to_zip.txt

# Comprimimos
zip -r "$OUTPUT" -@ < /tmp/files_to_zip.txt

echo "‚úÖ Proyecto comprimido correctamente en: $OUTPUT"



title: Fix Metadata
author: ALMA_RESIST
module: utilidades/scripts/fix_metadata
created: 2025-05-23
type: tool
status: stable

## Archivo: force_snake_case_modules.md
Contenido:
# force_snake_case_modules.py

Fuerza el campo `module` en cada archivo Markdown a seguir la convenci√≥n `snake_case`.

## Uso

```bash
python3 force_snake_case_modules.py --root ./docs --backup --verbose
```


module: utilidades/scripts/run_auditoria_automatica
type: core
status: in_progress
created: '2025-05-27'
linked_to:
- metodologia_doc_ia_v2.md


## üìÇ Archivo: `run_auditoria_automatica.sh`

```bash
#!/bin/bash

# ALMA_RESIST ‚Äì Script de auditor√≠a automatizada Sprint 2.5
# Ejecuta: entorno, instalaci√≥n, normalizaci√≥n y validaci√≥n

echo "üöÄ Iniciando entorno ALMA_RESIST..."

# 1. Activar entorno virtual
echo "üîß Activando entorno virtual..."
source .venv/bin/activate

# 2. Instalar dependencias necesarias
echo "üì¶ Instalando dependencias requeridas..."
pip install -q pyyaml

# 3. Ejecutar force_snake_case_modules.py
echo "üêç Normalizando campo 'module' a snake_case..."
python3 docs/utilidades/scripts/force_snake_case_modules.py --verbose

# 4. Ejecutar fix_metadata.py
echo "üõ†Ô∏è Corrigiendo metadatos YAML..."
python3 docs/utilidades/scripts/fix_metadata.py --verbose --backup

# 5. Ejecutar add_linked_to_minimo.py
echo "üîó Agregando 'linked_to' m√≠nimo a documentos tipo 'core'..."
python3 docs/utilidades/scripts/add_linked_to_minimo.py --verbose

# 6. Ejecutar validate_docs.py
echo "‚úÖ Validando estructura de metadatos YAML..."
python3 docs/utilidades/scripts/validate_docs.py --verbose

echo "üéâ Auditor√≠a autom√°tica finalizada."
```


## ‚ñ∂Ô∏è C√≥mo usarlo (paso a paso)

1. **Abr√≠ tu terminal** en la ra√≠z del proyecto ALMA_RESIST.
2. Asegurate de tener el entorno `.venv` creado.

source .venv/bin/activate

üß™ Tip adicional:

Si el entorno no existe a√∫n, pod√©s crearlo as√≠:

python3 -m venv .venv

3. Dale permisos de ejecuci√≥n al script:

```bash
chmod +x run_auditoria_automatica.sh
```

4. Ejecutalo:

bash docs/utilidades/scripts/run_auditoria_automatica.sh


5. Esper√° a que termine. Al finalizar vas a ver un resumen de validaci√≥n.


Este script forma parte del **proceso oficial de control de calidad documental** para cerrar cada Sprint en ALMA_RESIST.


module: versiones/v0_0_0_4_sprint_2_5_auditoria/archivos/scripts_index
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


## üóÇÔ∏è Tabla General

| Script                        | Tipo   | Funci√≥n principal                                     | Estado       | Notas                 |
|------------------------------|--------|------------------------------------------------------|--------------|------------------------|
| add_linked_to_minimo.py      | Python | Agrega 'linked_to' m√≠nimo a documentos type: core    | activo     |  |
| alma-cli.py                  | Python | Interfaz CLI para auditar y hacer batch-update de YAML | activo     | Requiere archivo de reglas |
| ayuda.py                     | Python | Muestra mensaje de ayuda o comandos disponibles      | borrador   | Script CLI auxiliar |
| buscar_memoria.py            | Python | Busqueda interna en registros/memoria del sistema    | borrador   | Posible integraci√≥n futura con LLM |
| cargar_modelo.py             | Python | Carga o inicializa modelo IA local                   | borrador   | No validado en sprint |
| fix_metadata.py              | Python | Corrige y normaliza metadatos YAML (`module`, `type`, etc.) | activo     | Usar con `--backup` |
| force_snake_case_modules.py  | Python | Fuerza snake_case en campo 'module'                  | activo     | Recomendado en fase de cierre |
| resumir.py                   | Python | Generador de resumen autom√°tico desde archivos markdown | pendiente  | No usado en auditor√≠a |
| salir.py                     | Python | Script de salida del CLI o apagado                   | borrador   | Auxiliar de CLI |
| validar_documentacion.sh     | Bash   | Script shell para lanzar validaciones sobre markdowns | activo     | Wrapper manual |
| validate_docs.py             | Python | Valida consistencia del YAML seg√∫n reglas ALMA_RESIST | activo     | Script oficial de validaci√≥n |
| README.md                    | Markdown | Explicaci√≥n general de la carpeta scripts            | activo     | Debe mantenerse actualizado |

## Archivo: start_server.md
Contenido:
#!/bin/bash

# ================================
# ALMA_RESIST - Iniciar Servidor LLM
# ================================

# Activar entorno virtual
echo "üîß Activando entorno virtual..."
source .venv/bin/activate || { echo "‚ùå No se pudo activar el entorno virtual"; exit 1; }

# Establecer puerto y host (personalizable)
HOST="0.0.0.0"
PORT="8000"
APP_PATH="core.llm_server.main:app"

# Verificar modelo cargado
MODEL_PATH="core/llm_server/models/mistral-7b-q4.gguf"
if [ ! -f "$MODEL_PATH" ]; then
  echo "‚ùå Modelo no encontrado en $MODEL_PATH"
  exit 1
fi

# Iniciar servidor FastAPI con Uvicorn
echo "üöÄ Iniciando servidor en http://$HOST:$PORT ..."
uvicorn "$APP_PATH" --reload --host "$HOST" --port "$PORT"


title: Validador Documental
author: ALMA_RESIST
module: utilidades/scripts/validate_docs
created: 2025-05-23
type: tool
status: stable

## Archivo: comandos_utiles.md
Contenido:
# üß∞ Comandos √∫tiles del sistema ALMA_RESIST

Este documento re√∫ne comandos Bash y alias recomendados para el uso y mantenimiento del sistema.


## üîÅ Actualizaci√≥n de metadatos

```bash
python3 scripts/fix_metadata.py --backup
```


## üîç Validaci√≥n avanzada (estructura, tipo, estado, fechas)

```bash
python3 scripts/validate_docs.py --path ./docs --verbose
```


## üìÅ Ubicaci√≥n de scripts clave

| Script                        | Prop√≥sito                                |
|------------------------------|-------------------------------------------|
| `scripts/validate_docs.py`   | Validaci√≥n integral de metadatos          |
| `scripts/fix_metadata.py`    | Correcci√≥n autom√°tica de metadatos        |
| `scripts/force_snake_case_modules.py` | Normalizaci√≥n de nombres de m√≥dulos |
| `scripts/validar_documentacion.sh` | Orquestador de validaciones y limpieza |



## üöÄ Paso 2: Iniciar el servidor

```bash
uvicorn core.llm_server.main:app --reload --host 0.0.0.0 --port 8000
```


### 2. Verificar salud del sistema (GET /health)

```bash
curl http://localhost:8000/health
```

Respuesta esperada:
```json
{
  "status": "OK",
  "model_loaded": true,
  "model_info": {
    "nombre": "mistral-7b-q4.gguf",
    "cuantizaci√≥n": "Q4",
    "contexto": 4096,
    "tokens_maximos": 512,
    "parametros": "7.0B",
    "versi√≥n_llama.cpp": "0.1.0"
  },
  "context_entries": 5,
  "graph_nodes": 42
}
```


### 4. Exportar grafo de memoria (POST /memory/export)

```bash
curl -X POST "http://localhost:8000/memory/export?format=json"
```


## ‚öôÔ∏è Configuraci√≥n del modelo

- **Ubicaci√≥n del modelo**: `core/llm_server/models/`
- **Ejemplo de variable en `main.py`**:
```python
model_path = "models/tu-modelo.gguf"
```


## üß¨ Variables de entorno

Crear archivo `.env`:
```
MODEL_PATH=models/mistral-7b-q4.gguf
QUANTIZATION=Q4
```


## ‚ùó Problemas comunes

- El modelo no carga:
  - Aseg√∫rate de que el archivo del modelo existe.
  - Verifica permisos de lectura.
  - Proba con un modelo m√°s liviano si ten√©s poca RAM.

## Archivo: tags_recomendados.md
Contenido:
# üéØ Tags Recomendados por Dominio (Base ALMA_RESIST)

## üåê Dominio: infraestructura
- backups
- CLI
- versiones
- logs
- snapshot

## ü§ñ Dominio: IA
- prompt_engineering
- interaccion_ia
- memoria
- sugerencias

## üìÑ Dominio: documentaci√≥n
- estructura
- validacion
- plantilla
- indexado

## üîÅ Dominio: metodolog√≠a
- sprint
- versionado
- auditoria
- decisiones

## ‚öôÔ∏è Dominio: automatizaci√≥n
- scripts
- batch_update
- metadata_tools
- alma-cli


module: versiones/v0_0_0_1_auditoria/readme_v0_0_0_1_auditoria
type: core
status: in_progress
created: '2025-05-22'
linked_to:
- metodologia_doc_ia_v2.md

## Archivo: README_v0.0.0.2_documentacion.md
Contenido:
# üì¶ v0.0.0.2_documentacion ‚Äì Sprint de Normalizaci√≥n de Documentaci√≥n ALMA_RESIST

## üîç Objetivo del Sprint

Este paquete contiene los resultados del **Sprint 2.3 - Correcci√≥n de Metadatos y Documentaci√≥n** del proyecto ALMA_RESIST. El objetivo principal fue estandarizar y validar todos los archivos Markdown (`.md`) del repositorio bajo una metodolog√≠a automatizada, asegurando:

- Metadatos YAML completos, v√°lidos y en formato correcto.
- Nombres de m√≥dulos en `snake_case`.
- Respaldo y trazabilidad de los archivos modificados.
- Validaci√≥n autom√°tica de la estructura documental.
- Preparaci√≥n para integraci√≥n sem√°ntica con IA.


## üß† Scripts Clave

- `fix_metadata.py`: Corrige campos YAML (`module`, `type`, `status`, `created`).
- `force_snake_case_modules.py`: Normaliza el campo `module` a formato `snake_case`.
- `validate_docs.py`: Verifica que todos los documentos tengan estructura y metadatos v√°lidos.
- `integrar_nuevo_archivo.sh`: Ejecuta todo el proceso completo para nuevos archivos (integraci√≥n oficial v8).


## üßæ Logs de Sprint

Los archivos `log_integracion.md` y `mapeo_sprint_archivos.md` documentan cada agregado, su origen y su vinculaci√≥n con tareas y sprints.


## ü§ñ Futuras Integraciones

La estructura est√° preparada para futuras automatizaciones con los m√≥dulos:

- `memory_graph_builder`
- `context_tracker`
- `reflection_engine`

## Archivo: README_v0.0.0.2_idea_base_unificada.md
Contenido:
# üß† ALMA_RESIST ‚Äì Snapshot: v0.0.0.2_idea_base_unificada

Este snapshot corresponde al cierre del Sprint 2.3, enfocado en la consolidaci√≥n de la **idea base unificada** del sistema ALMA_RESIST.

Incluye:

- Integraci√≥n del documento `ALMA_RESIST_idea_base_0.0.0.1.md`
- Archivos legacy correctamente archivados en `_legacy/`
- Registro hist√≥rico, decisiones, changelogs y bit√°coras asociadas
- Conformidad con la metodolog√≠a `metodologia_agregado_archivos.md`

Este hito representa el cierre conceptual del dise√±o ideol√≥gico del sistema y prepara la base para futuras implementaciones t√©cnicas automatizadas.



title: v0.0.0.2_idea_base_unificada
author: ALMA_RESIST
date: 2025-05-23
version: 0.0.0.2
type: integration
module: versiones/v0_0_0_2_idea_base_unificada/version_v0_0_0_2_idea_base_unificada
status: in_progress
created: '2025-05-23'

## Archivo: README_v0.0.0.3_snapshot_sprint_2.4.md
Contenido:
# üì¶ Snapshot v0.0.0.3 ‚Äì Post Sprint 2.4

Este snapshot representa el estado consolidado del sistema documental y de scripts luego del Sprint 2.4.

## üìã Contenido Clave

- Scripts actualizados:
  - `validate_docs.py` (v0.3)
  - `add_linked_to_minimo.py`
  - `alma-cli.py` (CLI modular)
  - `alma_valida_v2.sh`
- Documentos fundamentales:
  - `README.md` ra√≠z
  - `Methodology_Index.md`
  - `tags_recomendados.md`
  - `utilidades/scripts/README.md`
- Reporte de auditor√≠a generado por IA (`alma-cli audit`)
- Metadatos corregidos en 100% de archivos `core`

## üìå Prop√≥sito

Este snapshot permite:
- Validar evoluci√≥n del sistema
- Facilitar rollback en caso de error
- Auditar coherencia sem√°ntica e IA



module: versiones/v0_0_0_3_snapshot_sprint_2_4/version_v0_0_0_3_snapshot_sprint_2_4
type: core
status: stable
created: 2025-05-23
linked_to:
- README_v0.0.0.3_snapshot_sprint_2.4.md

## Archivo: README_ALMA_RESIST.md
Contenido:
# ALMA_RESIST

**ALMA_RESIST** es un sistema modular, port√°til y asistido por inteligencia artificial dise√±ado para gestionar, automatizar y documentar proyectos complejos con trazabilidad total.

> Versi√≥n actual: `v0.0.0.5`  
> Estado: `estable`  
> Sprint: `2.5` ‚Äì Auditor√≠a Final y Consolidaci√≥n  
> √öltima actualizaci√≥n: `2025-05-28`


## üîó Archivos clave

- `docs/version.md` ‚Üí versi√≥n y ciclo de vida actual
- `docs/changelog.md` ‚Üí cambios hist√≥ricos y lecciones aprendidas
- `docs/control/sprints_activos/sprint_2.5_auditoria_checklist.md` ‚Üí auditor√≠a estructural
- `docs/arquitectura/whitepaper/whitepaper_v1.md` ‚Üí consolidaci√≥n conceptual
- `docs/arquitectura/prompt_tecnico/prompt_tecnico_base.md` ‚Üí entrada t√©cnica para IAs


## üë§ Autor√≠a

Desarrollado por **Santiago Calvo**, con asistencia t√©cnica de IA (GPT-4 y variantes locales como Mistral)  
Contacto / Proyecto: `ALMA_RESIST`, Argentina ‚Äì 2025

## Archivo: checklist_auditoria_inicial.md
Contenido:
# ‚úÖ Checklist de Tareas Pendientes ‚Äì Auditor√≠a y Regularizaci√≥n Inicial

Fecha de generaci√≥n: 2025-05-20


## üßπ Limpieza y Reorganizaci√≥n

- [x] Revisar carpeta `backups/` ‚Üí mover a `config/backups/` o eliminar si es temporal
- [x] Revisar carpeta `archivos/` ‚Üí renombrar con sentido o eliminar
- [x] Mover cualquier script no vinculado a `core/` o `tests/` o eliminar


## üõ°Ô∏è Gobernanza y Automatizaci√≥n

- [x] Crear `docs/RFC_metodologia.md` para futuras propuestas de cambio
- [x] Agregar `docs/dependencias.md` si se van a listar m√≥dulos o librer√≠as externas
- [x] Activar `docs/plantillas/` para prompts, scripts, tests y changelogs

## Archivo: readme1.md
Contenido:
# ALMA_RESIST - README General

Este repositorio contiene la arquitectura y documentaci√≥n completa de **ALMA_RESIST**, una iniciativa modular y evolutiva que integra IA, automatizaci√≥n y an√°lisis contextual para desarrollo de sistemas complejos.


## üß† Funcionalidades de Integraci√≥n

La metodolog√≠a actual incluye:

- Validaci√≥n de estructura y metadatos YAML.
- Normalizaci√≥n autom√°tica a snake_case.
- Correcci√≥n de campos `module`, `type`, `status`, `created`.
- Ejecuci√≥n automatizada con `integrar_nuevo_archivo.sh`.


## üß™ Metodolog√≠as Relevantes

- `docs/01_methodologies/metodologia_agregado_archivos.md`: Define el flujo completo para incorporar un archivo nuevo en el sistema.
- `docs/01_methodologies/metodologia_sprints_v2.md`: Gu√≠a de ejecuci√≥n y cierre de sprints.
- `docs/01_methodologies/metodologia_doc_ia_v2.md`: Reglas para estructuraci√≥n documental sem√°ntica IA-compatible.


## üìå √öltima Versi√≥n

Sprint actual: `Sprint_2.3_Correccion_Metadatos`  
Metodolog√≠a vigente: `metodologia_agregado_archivos_v8`  
Estado: ‚úÖ Cerrado y validado


## ü§ñ Futuras Integraciones

- `alma-cli`: Utilidad para automatizar la integraci√≥n desde l√≠nea de comandos.
- `memory_graph_builder.py`: Vinculaci√≥n sem√°ntica autom√°tica de documentos.
- `reflection_engine`: Generaci√≥n autom√°tica de an√°lisis de impacto IA.
- Soporte para campos inteligentes como `linked_to`, `context_tags`, `sha256`.


## üìé Ap√©ndice ‚Äì Validaci√≥n y herramientas integradas (2025-05-23)


## üõ† Uso recomendado

```bash
bash scripts/validar_documentacion.sh
```

Alias sugerido para agilizar su ejecuci√≥n:

```bash
alias alma_valida='bash ~/Alma/ALMA_RESIST/scripts/validar_documentacion.sh'
```

Agregalo a tu archivo `~/.bashrc` o `~/.zshrc` para uso persistente.


## Archivo: apendice_complementario_sprint_2_5.md
Contenido:
# üß© Ap√©ndice Complementario ‚Äì Sprint 2.5 (Tareas Pendientes Detectadas por Auditor√≠a)

Este ap√©ndice detalla acciones adicionales no contempladas expl√≠citamente en el checklist original, pero detectadas durante la auditor√≠a del Sprint 2.5. Estas tareas no duplican elementos previos, sino que ampl√≠an la profundidad de la verificaci√≥n con mejoras necesarias para la consolidaci√≥n estructural de ALMA_RESIST.


## ‚úÖ Siguientes pasos sugeridos

- Implementar un script `detect_inconsistencias_yaml.py` para validar campos `module`, `type`, `status` versus su contenido y ubicaci√≥n real.
- Establecer convenci√≥n para rutas completas en `module`, incluyendo prefijo de m√≥dulo ra√≠z.
- Generar y versionar snapshot de cierre del sprint con todos los cambios aplicados.
- Crear script de curadur√≠a autom√°tica de documentos obsoletos (`status: archived`).

## Archivo: index_snapshot_v0.0.0.4.md
Contenido:
# üìö √çndice de Archivos ‚Äì Snapshot v0.0.0.4

Este archivo resume el contenido incluido en la versi√≥n `v0.0.0.4_sprint_2.5_auditoria`, facilitando la navegaci√≥n tanto para humanos como para sistemas automatizados (IA).

## Archivo: sprint_2.5_auditoria_checklist.md
Contenido:
# Sprint 2.5: Auditor√≠a estructural ALMA_RESIST

## Objetivo
Reorganizar, limpiar y optimizar la estructura documental del proyecto ALMA_RESIST, asegurando el cumplimiento total de convenciones internas.

## Fase 1: Preparaci√≥n
- [x] Crear branch o copia local (`sprint_2.5_auditoria`)
- [x] Realizar backup completo (`zip` o similar)
- [x] Leer y repasar metodolog√≠a de sprints (`metodologia_sprints_v2.md`)

## Fase 2: Eliminaci√≥n de redundancias
- [x] Eliminar carpetas vac√≠as o innecesarias:
  - [x] `backup_metadata/`
  - [x] `backup_linked_to/`
  - [x] `backup_snakecase/`
  - [x] `commands/`
  - [x] `venv/`
- [x] Consolidar pruebas:
  - [x] Mover contenido √∫til de `testing/` a `tests/`
  - [x] Eliminar `testing/` y `test_kits/`
- [x] Unificar auditor√≠as:
  - [x] Trasladar contenido de `docs/auditorias/` a `logs/auditorias/`
  - [x] Eliminar carpeta vac√≠a (`docs/auditorias/`)

## Fase 3: Correcci√≥n de estructura documental
- [x] Corregir nombres incorrectos:
  - [x] Renombrar `docs/resgistros/` a `docs/registros/`
  - [x] Renombrar `logs_histo‚ï†√ºricos/` a `logs_historicos/`
- [x] Aplicar `snake_case` uniforme en todos los archivos
- [x] Verificar y corregir prefijo de versionado (`ideas_base_legacy` ‚Üí `v0.0.0.0_legacy`)
- [x] Reubicar archivos clave:
  - [x] `CONTEXT.md` ‚Üí `docs/introduccion/context.md`
  - [x] `version.md` ‚Üí `docs/introduccion/version.md`
- [ ] Crear o actualizar `README.md` en cada carpeta principal

## Fase 4: Validaci√≥n de metadatos YAML
- [x] A√±adir o corregir bloque YAML `frontmatter` en todos los `.md` importantes
  - Campos obligatorios:
    - [x] `module`
    - [x] `type`
    - [x] `status`
    - [x] `created`
- [x] Ejecutar script de validaci√≥n YAML (si aplica)

## Fase 5: Organizaci√≥n modular de carpetas
- [x] Organizar documentaci√≥n dentro de `docs/` por m√≥dulos claros:
  - [x] `introduccion/`
  - [x] `arquitectura/`
  - [x] `metodologias/`
  - [x] `control/` (auditor√≠as, bit√°coras)
  - [x] `utilidades/`
- [x] Consolidar y ordenar carpetas cronol√≥gicamente dentro de `versiones/`
- [x] Trasladar respaldos relevantes a `archive/`

## Fase 6: Automatizaci√≥n y Scripts
- [x] Centralizar scripts y herramientas:
  - [x] Mover automatizaciones de otras carpetas a `scripts/`
  - [x] Actualizar `README.md` en `scripts/`

## Fase 7: Control de calidad y revisi√≥n final
- [x] Ejecutar revisi√≥n cruzada:
  - [x] Verificaci√≥n manual de estructura
  - [x] Validar checklist con script autom√°tico (si aplica)
- [x] Generar √°rbol visual actualizado (`tree`)
- [x] Realizar commit detallado describiendo cambios realizados
- [x] Actualizar `CHANGELOG.md` con acciones del Sprint 2.5

## Fase 8: Cierre del Sprint
- [x] Solicitar revisi√≥n t√©cnica interna o externa
- [x] Documentar aprendizajes o ajustes metodol√≥gicos
- [x] Integrar cambios definitivos a rama principal
- [x] Comunicar cierre del Sprint 2.5 al equipo



## üìå Principios rectores

- **Minimalismo estructural:** menos carpetas, m√°s significado. Toda redundancia debe eliminarse o fusionarse.
- **Modularidad estricta:** cada carpeta/documento debe responder a una funci√≥n, no a una ocurrencia ca√≥tica.
- **Nombrado determinista:** los nombres deben permitir inferir su funci√≥n y nivel jer√°rquico sin abrir los archivos.
- **Versionado sem√°ntico:** ning√∫n archivo o carpeta sin una raz√≥n de versi√≥n clara debe sobrevivir.
- **YAML como contrato sem√°ntico:** todo archivo Markdown relevante debe iniciar con metadatos YAML claros, v√°lidos y coherentes.
- **Separaci√≥n de contextos:** documentaci√≥n no es c√≥digo, c√≥digo no es bit√°cora, bit√°cora no es auditor√≠a. Cada tipo de contenido tiene su lugar y reglas.


## üß≠ Criterios de √©xito

- Estructura final reduce el n√∫mero total de carpetas innecesarias sin p√©rdida de significado.
- Todos los `.md` clave tienen un bloque YAML v√°lido con al menos los campos: `module`, `type`, `status`, `created`.
- Los `README.md` existen en todas las carpetas de primer y segundo nivel con explicaci√≥n funcional del contenido.
- El √°rbol de carpetas puede visualizarse de forma clara en una sola pantalla (m√°ximo 3 niveles).
- Se puede ejecutar un script y validar que no hay archivos mal ubicados, sin prefijos, ni carpetas vac√≠as.


## ‚ö†Ô∏è Errores a evitar

- Reorganizar sin respaldo previo.
- Borrar contenido sin verificar si es redundante o s√≥lo mal ubicado.
- No dejar trazabilidad de los cambios: todo cambio debe ser registrado en `CHANGELOG.md` y el commit debe ser descriptivo.
- Romper rutas relativas usadas en scripts, si a√∫n no fueron modularizadas.


# üß© Ap√©ndice para Auditor√≠a T√©cnica Futura ‚Äì Sprint 2.6 o superior (2025-05-25)

Este ap√©ndice documenta ideas de mejora y expansi√≥n para futuras auditor√≠as estructurales o t√©cnicas dentro de ALMA_RESIST, basadas en la experiencia del Sprint 2.5.

## üîß Propuestas de mejora para `validate_docs.py`

- **Autocompletado de YAML faltante:** Opci√≥n `--fix-missing` para insertar un bloque m√≠nimo si no existe.
    
- **Validaci√≥n de nombre de archivo:** Comprobar que el nombre del archivo `.md` siga `snake_case`.
    
- **Salida estructurada JSON:** Agregar opci√≥n `--json` para integraci√≥n con CI/CD o IA.
    
- **Generaci√≥n de reporte Markdown:** Crear `docs/reportes/validacion_sprint_X.md` al finalizar la validaci√≥n.
    
- **Validaci√≥n cruzada de ubicaci√≥n real del archivo con su campo** `**module**`**.**
    

## üß† Oportunidades para extensi√≥n IA

- **An√°lisis sem√°ntico del frontmatter**: Sugerir autom√°ticamente cambios si el m√≥dulo, tipo o estado no coinciden con el contenido.
    
- **Clasificaci√≥n autom√°tica de archivos nuevos sin YAML.**
    
- **Sugerencias de mejora estil√≠stica para documentos `.md` incompletos o con errores.
  

## üîÅ Tareas complementarias sugeridas

1. **Normalizaci√≥n profunda del campo `module` en YAML**  
   Detectar y corregir rutas incompletas o inconsistentes dentro del campo `module` del frontmatter. Muchos archivos s√≥lo declaran un subnivel (ej. `estructura_doc/plantilla_documento`) sin incluir el m√≥dulo ra√≠z (`arquitectura/estructura_doc/...`).

2. **Revisi√≥n cruzada de campos `linked_to`**  
   Varios archivos YAML no incluyen el campo `linked_to`, o hacen referencia a rutas obsoletas. Deber√≠a implementarse validaci√≥n sem√°ntica cruzada para alinear cada documento con su versi√≥n, bit√°cora o checklist correspondiente.

3. **Detecci√≥n de archivos hu√©rfanos fuera de m√≥dulos**  
   Se encontraron archivos en la ra√≠z de `docs/` y en `ideas/` que no encajan en ning√∫n m√≥dulo ni est√°n registrados en `scripts_index.md` o README. Deber√≠an reubicarse o archivarse si no cumplen con funciones activas.

4. **Autoetiquetado de documentos hist√≥ricos**  
   Proponer una pol√≠tica para marcar autom√°ticamente los documentos obsoletos o legacies con `status: archived` o similar, y separarlos del flujo operativo actual. Podr√≠a automatizarse en el futuro con un script de `curado_archivos.py`.

5. **Validaci√≥n de consistencia sem√°ntica entre YAML y contenido real**  
   Varios documentos declaran en su frontmatter `type: core` pero no contienen contenido central, sino propuestas, pruebas o plantillas. Se recomienda implementar an√°lisis IA para detectar esta inconsistencia y sugerir reclasificaci√≥n.

6. **Control de duplicidad de scripts entre `scripts/` y `core/`**  
   Algunos scripts antiguos a√∫n est√°n presentes en `core/` o `commands/` pese a haber sido migrados a `docs/utilidades/scripts/`. Se recomienda forzar verificaci√≥n de duplicados por hash y eliminar los residuales.

7. **Versi√≥n snapshot Sprint 2.5 faltante en `docs/versiones/`**  
   El snapshot correspondiente a este sprint a√∫n no se encuentra registrado formalmente. Se sugiere generar la carpeta `v0.0.0.5_snapshot_sprint_2.5` y documentar su estructura resultante.


Este ap√©ndice complementa el checklist de Sprint 2.5 como insumo t√©cnico para el Sprint 2.6.


## ‚úÖ Diagn√≥stico de Orden General

### üß± Estructura principal

- ‚úÖ `docs/introduccion/` est√° bien organizada: contiene `context.md`, `version.md`, y `changelog.md` (si segu√≠s con esta l√≥gica, va perfecta para uso IA directo).
    
- ‚úÖ `docs/control/` funciona como **centro de mando** operativo. Est√° alineado con tu visi√≥n (sprints, bit√°coras, checklists, logs).
    
- ‚úÖ `docs/arquitectura/` aparece bien dividida (aunque puede refinarse m√°s con las tres secciones que hablamos: `idea_base/`, `whitepaper/`, `prompt_tecnico/`).
    
- ‚úÖ `docs/utilidades/scripts/` est√° consolidado, y tiene README e √≠ndice.
    
- ‚ö†Ô∏è `backup_*` tiene mucha redundancia y peso muerto sem√°ntico (ver sugerencia).
    


## ‚úÖ Recomendaciones finales para dejar el sistema robusto

### üîß Paso 1: Reordenar y fusionar la arquitectura

```bash
docs/arquitectura/
‚îú‚îÄ‚îÄ idea_base/
‚îÇ   ‚îî‚îÄ‚îÄ idea_base_0.0.1.md
‚îú‚îÄ‚îÄ whitepaper/
‚îÇ   ‚îî‚îÄ‚îÄ whitepaper_v1.md
‚îú‚îÄ‚îÄ prompt_tecnico/
‚îÇ   ‚îî‚îÄ‚îÄ prompt_tecnico_base.md
‚îî‚îÄ‚îÄ README.md  ‚Üê explica la relaci√≥n entre los 3
```

### üîß Paso 2: Mantener `CHANGELOG.md`, `version.md`, `context.md` en `introduccion/`

Es correcto y √∫til para IA externas.

### üîß Paso 3: Eliminar (o archivar comprimido) todo `backup_snakecase`, `backup_metadata`, `backup_linked_to`

Dej√° solo un zip por backup si realmente quer√©s conservarlos.

### üîß Paso 4: Crear README.md en cada subcarpeta importante de `control/`, `sprints_activos/`, `registros/`, `logs/`, `planificacion/`

### üîß Paso 5: Etiquetar todos los archivos con campos YAML v√°lidos (`module`, `type`, `status`, `created`) si a√∫n no se hizo tras `fix_metadata.py`

----
### ‚úÖ **Checklist para el Snapshot v0.0.0.5**

1. üìÅ Crear carpeta: `docs/versiones/v0.0.0.5/`
    
2. üìÑ Copiar dentro:
    
    - `README.md` ra√≠z
        
    - `docs/introduccion/version.md`
        
    - `docs/introduccion/changelog.md`
        
    - `docs/introduccion/context.md`
        
3. üì¶ Comprimir `ALMA_RESIST/` completo como `snapshot_v0.0.0.5.zip`
    
4. üìÑ Guardar changelog resumen dentro del zip
    
5. üîñ Dejar registro en `docs/versiones/index.md` si us√°s √≠ndice de versiones
    
6. üß† Probarlo en GPT local con: ‚Äú¬øQu√© es ALMA_RESIST y c√≥mo funciona?‚Äù

module: versiones/v0_0_0_5_llm_server/appendix_sprint_2_6_deepseek
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


## üîß Ajustes a Tareas Existentes

### ‚úÖ Fase 1 ‚Äì Servidor LLM MVP

- [ ] A√±adir manejo de errores en `/responder`:
  - Validar si el modelo est√° cargado
  - Detectar prompts inv√°lidos

### ‚úÖ Fase 2 ‚Äì Logging y Seguridad

- [ ] Conectar `memory_graph` para indexar embeddings de respuestas
- [ ] Integrar `context_tracker` al registrar actividad/logs

### ‚úÖ Fase 3 ‚Äì Pruebas

- [ ] Reemplazar `test_llm.py` con prueba **end-to-end**:
  - Validar flujo `CLI ‚Üí servidor ‚Üí memoria` directamente
  - Evitar mocks innecesarios

### ‚úÖ Fase 4 ‚Äì Documentaci√≥n

- [ ] Incluir requisitos de hardware m√≠nimo:
  - Mistral 7B Q4 (~6GB RAM)
  - Alternativa: TinyLlama 1.1B (~2GB RAM)
- [ ] Esquematizar `decisiones_arquitectonicas.md` sin detalle excesivo


## üìÜ Plan Semanal Ajustado

### Semana 1-2:
- FastAPI + `/responder`
- `ModelWrapper`
- Manejo de errores

### Semana 2-3:
- Logging cifrado
- `memory_graph`
- `context_tracker`

### Semana 3:
- Test end-to-end
- Validaci√≥n de logs

### Semana 4:
- README.md + requisitos
- Congelar versi√≥n + lecciones aprendidas

## Archivo: idea_base_llm_server_0.0.0.4.0.md
Contenido:
# üß† ALMA_RESIST: Idea Base para el Servidor LLM Local (v0.0.0.4.0)

## üåü Objetivo General
Construir un **servidor local de modelos IA** que sea modular, seguro, escalable y portable. Este servidor servira como puente entre los prompts generados desde la CLI/ALMA y la ejecuci√≥n de modelos como Mistral 7B, TinyLlama o DeepSeek, permitiendo carga paralela, enrutamiento sem√°ntico y logging cifrado.


## üöÄ Criterios Clave
- Ejecutable en PC local o desde disco externo (modo ALMA_RESIST)
- Bajo consumo en modo cuantizado (ej: GGUF Q4)
- Modular: cada modelo es intercambiable
- Preparado para escalar a gRPC y NATS en v0.5+
- Validaci√≥n sem√°ntica de prompts
- Logging seguro y rastreable


## üîí Consideraciones de Seguridad
- Capa de sandbox por contenedor
- Validaci√≥n y limpieza de prompt (anti-injection)
- Logging cifrado y segmentado por modelo


## üí° Conclusi√≥n
Este servidor se convertir√° en el **cerebro computacional** de ALMA_RESIST. Su dise√±o modular, cifrado y colaborativo permite que m√∫ltiples modelos IA trabajen en paralelo sin interferencia. Esta es la piedra angular para la mente simbi√≥tica reflexiva que estamos construyendo.

> "No se trata de velocidad, sino de claridad y continuidad. ALMA debe pensar como una red, no como un ca√±√≥n."


module: versiones/v0_0_0_5_llm_server/idea_base_llm_server_0_0_0_4_0_feedback
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


### **1. Priorizaci√≥n: Roadmap vs. Escalabilidad del Servidor**

**Decisi√≥n:**  
**Completar primero los m√≥dulos cr√≠ticos del roadmap** (`context_tracker`, `reflection_engine`, y tests automatizados), pero **implementar el servidor LLM en su versi√≥n m√≠nima viable (MVP)**.

- **Razones:**
    
    - Sin `context_tracker` y `reflection_engine`, el servidor carece de contexto para operar de forma simbi√≥tica.
        
    - Un servidor MVP (FastAPI + 1 modelo local) permite validar el flujo `CLI ‚Üí servidor ‚Üí memoria` sin sobre-ingenier√≠a.
        
    - **Evitar deuda t√©cnica:** Dise√±ar el servidor para que sea modular, facilitando futuras mejoras (ej: migrar a Docker/gRPC cuando los otros m√≥dulos est√©n estables).
        


### **3. Escalabilidad Futura**

**Fortalezas y mejoras:**

- **ModelWrapper + Router** son una base s√≥lida, pero requieren:
    
    - **Abstracci√≥n de transporte:** Implementar una capa `TransportLayer` para soportar gRPC, REST, o sockets sin cambiar el core.
        
    - **Contratos estrictos:** Definir schemas con Protobuf/JSON Schema para inputs/salidas.
        
- **Federaci√≥n de ALMAs:** La arquitectura podr√≠a escalar si:
    
    - Se usa NATS/JetStream para mensajer√≠a distribuida.
        
    - Se implementa autenticaci√≥n mTLS entre nodos.
        


### **5. SQLite vs. DuckDB**

**Recomendaci√≥n:**

- **Mantener SQLite en MVP:** Es portable, requiere cero configuraci√≥n, y funciona en disco externo.
    
- **Planificar migraci√≥n a DuckDB:** Cuando:
    
    - El volumen de logs supere 1GB.
        
    - Se necesiten consultas anal√≠ticas complejas (ej: joins entre embeddings y bit√°cora).
        

## Archivo: idea_base_llm_server_0.0.0.4.1.md
Contenido:
## üîß Componentes del MVP

### 1. API b√°sica con FastAPI

- Endpoint `/responder` que recibe un prompt y devuelve la respuesta del modelo
    
- As√≠ncrono, con `asyncio.to_thread()` para ejecutar LLM sin bloquear
    

### 2. `ModelWrapper`

- Clase base para instanciar cualquier modelo local (inicia con `llama.cpp`)
    
- M√©todos: `.load_model()`, `.generate()`
    
- Cuantizaci√≥n: Q4 (GGUF) para hardware modesto
    

### 3. `TransportLayer`

- Interfaz abstracta: `.send(data, endpoint)`, `.receive(endpoint)`
    
- Implementaci√≥n MVP: lectura/escritura local con JSON
    

### 4. Logging seguro

- Cifrado AES-GCM
    
- Almacenamiento en SQLite
    
- Integrado con `context_tracker` (registro de inputs/salidas)
    

### 5. `memory_graph`

- Registro sem√°ntico post-inferencia
    
- Indexaci√≥n de prompt + respuesta
    

### 6. Contratos de Datos

- Esquemas JSON en `docs/contracts/`:
    
    - `schema_prompt.json`
        
    - `schema_respuesta.json`
        


## üèõ Estructura Recomendada

```
llm_server/
‚îú‚îÄ‚îÄ main.py                # API principal
‚îú‚îÄ‚îÄ model_wrapper.py       # Clase base
‚îú‚îÄ‚îÄ transport_layer.py     # Abstracci√≥n de transporte
‚îú‚îÄ‚îÄ contracts/
‚îÇ   ‚îú‚îÄ‚îÄ schema_prompt.json
‚îÇ   ‚îî‚îÄ‚îÄ schema_respuesta.json
‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îú‚îÄ‚îÄ context_tracker.py
‚îÇ   ‚îî‚îÄ‚îÄ memory_graph.py
‚îî‚îÄ‚îÄ utils/
    ‚îî‚îÄ‚îÄ log_crypto.py      # AES-GCM
```


## üìà Meta

Establecer una arquitectura s√≥lida, √©tica y modular que permita a ALMA pensar cr√≠ticamente con un solo modelo, registrar sus reflexiones y preparar el camino para operar simb√≥licamente a escala.

> "Una mente no se expande con potencia, sino con coherencia."

module: versiones/v0_0_0_5_llm_server/prompt_auditoria_llm_server_hibrido
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md


### üìò IDEA BASE 0.0.0.1 ‚Äì Fundacional y Reflexiva

- Foco: identidad simbi√≥tica, flujo diario con CLI, `alma_loader`, `context_tracker`, `memory_graph`
- Filosof√≠a: IA local, cr√≠tica, modular
- Servidor LLM: m√≠nimo viable (1 modelo, FastAPI, SQLite)
- Seguridad: tokens est√°ticos, cifrado AES, JSON Schema
- Meta: MVP de pensamiento reflexivo aut√≥nomo


### üìå ROADMAP ACTUAL (v0.0.0.2)

- Implementar CLI + `alma_loader` + `memory_graph`
- Servidor LLM MVP (`llm_server.py`) solo con FastAPI y un modelo cuantizado
- Consolidar `context_tracker`, `reflection_engine`, `test_basico.sh`
- Validar flujo: prompt ‚Üí respuesta ‚Üí reflexi√≥n ‚Üí memoria ‚Üí cifrado


## ‚ùì PREGUNTAS PARA AUDITOR√çA

1. ¬øTe parece correcto priorizar la idea 0.0.0.1 como base y postergar la expansi√≥n t√©cnica de la 0.0.0.2?
2. ¬øQu√© elementos de la 0.0.0.2 deber√≠an ya incluirse de forma simplificada para evitar tener que reescribir el server luego?
3. ¬øQu√© riesgos t√©cnicos o filos√≥ficos ves en este enfoque h√≠brido?
4. ¬øC√≥mo deber√≠amos versionar el crecimiento del servidor para que escale sin romper la coherencia simbi√≥tica?
5. ¬øQu√© estructura o capas m√≠nimas deber√≠amos dejar listas desde ahora (aunque se usen m√°s adelante)?

## Archivo: TODO.md
Contenido:
# ‚úÖ TODO.md ‚Äì Seguimiento de Tareas (Sprint 2.1 ‚Üí 2.5)

üìÖ √öltima actualizaci√≥n: 2025-05-28  
üîÅ Formato tipo Kanban para seguimiento de tareas y pendientes t√©cnicos en ALMA_RESIST.

## Archivo: api_rest.md
Contenido:
# API REST (Propuesta Inicial)
- /generate [POST]: genera texto desde prompt
- /status [GET]: retorna estado del modelo


module: decisiones_arquitectonicas
type: core
status: in_progress
created: '2025-05-20'
linked_to:
- metodologia_doc_ia_v2.md


## üìå Objetivo

Registrar y justificar las decisiones t√©cnicas clave que definen la arquitectura, los principios de dise√±o y los criterios estructurales del sistema ALMA RESIST.

Este documento act√∫a como **memoria estrat√©gica** para revisiones futuras, auditor√≠as internas o incorporaci√≥n de nuevos colaboradores o IA.

