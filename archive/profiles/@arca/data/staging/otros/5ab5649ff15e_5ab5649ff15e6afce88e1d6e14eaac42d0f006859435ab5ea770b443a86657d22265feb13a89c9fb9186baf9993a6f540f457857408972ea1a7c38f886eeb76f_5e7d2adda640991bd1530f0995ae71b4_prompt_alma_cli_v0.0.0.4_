---
module: prompts/prompt_alma_cli_v0_0_0_4
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# üß† Prompt T√©cnico ‚Äì alma-cli v0.0.0.4 (ALMA_RESIST)

## üìå Contexto general

Estamos desarrollando un CLI modular en Python para **gestionar, auditar y corregir** documentaci√≥n t√©cnica en formato Markdown que contiene **metadatos en bloques YAML** al inicio (`---`). Esta documentaci√≥n pertenece al sistema ALMA_RESIST.

---

## üéØ Objetivo del CLI

Centralizar la ejecuci√≥n de todas las tareas de validaci√≥n, reparaci√≥n, estandarizaci√≥n y auditor√≠a sem√°ntica bajo un solo comando:

```bash
python alma-cli.py <comando> [opciones]
```

---

## ‚öôÔ∏è Subcomandos a integrar

| Comando               | Descripci√≥n                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `validate`            | Ejecuta validaci√≥n completa de YAML en todos los `.md` (basado en `validate_docs.py`) |
| `fix-metadata`        | Corrige y completa campos YAML (`module`, `type`, `status`, `created`) usando l√≥gica est√°ndar |
| `enforce-snakecase`   | Normaliza `module:` a snake_case (reusa `force_snake_case_modules.py`)     |
| `add-linked-minimo`   | Agrega campo `linked_to` cuando el `type` es `core` (usa `add_linked_to_minimo.py`) |
| `batch-update`        | Modifica campos YAML en lote, con filtros por tipo y condiciones (`missing-only`) |
| `audit`               | Ejecuta auditor√≠a sem√°ntica de campos (`domain`, `linked_to`) con reglas externas |
| `report`              | Genera informe Markdown/JSON de errores, advertencias y acciones sugeridas |
| `auto-fix`            | Corre `validate`, `fix-metadata`, `enforce-snakecase` y `add-linked-minimo` en orden autom√°tico con backup |

---

## üìÅ Estructura esperada

```
alma-cli.py
/docs
/scripts
/logs/auditorias/
    auditoria_YYYYMMDD_HHMM_sprint_X.md
```

---

## üìÑ Campos YAML a validar

Todos los `.md` deben iniciar con un bloque como este:

```yaml
---
module: docs/01_methodologies/metodologia_sprints_v2
type: core
status: in_progress
created: 2025-05-24
linked_to:
  - metodologia_doc_ia_v2.md
---
```

---

## ‚úÖ Reglas de validaci√≥n

- `module` debe reflejar la ruta relativa y estar en snake_case
- `type` debe ser uno de: `core`, `tool`, `external`, `integration`, `draft`
- `status`: `in_progress`, `stable`, `deprecated`
- `created`: formato `YYYY-MM-DD`
- Si `type == core`, `linked_to` es obligatorio
- Si `domain` est√° definido, debe estar tambi√©n en `tags`

---

## üõ† Consideraciones t√©cnicas

- Debe usar `argparse`
- Debe incluir manejo de `--verbose`, `--dry-run`, `--backup`
- Debe ser compatible con Python 3.8+
- Modular, cada subcomando es un m√©todo separado
- Manejo de errores limpio y expl√≠cito
- Permitir salida en Markdown o JSON con `--output-format`
- Generar backups autom√°ticos en `logs/backups/` si se modifica algo

---

## üß™ Ejemplo de uso

```bash
# Validar documentos
python alma-cli.py validate --path ./docs --verbose

# Corregir campos YAML con backup
python alma-cli.py fix-metadata --backup

# Normalizar nombres de m√≥dulo
python alma-cli.py enforce-snakecase

# Agregar linked_to donde falta
python alma-cli.py add-linked-minimo --dry-run

# Ejecutar pipeline completo de limpieza
python alma-cli.py auto-fix --backup --verbose
```

---


# üìé Ap√©ndice ‚Äì Mejoras Propuestas para `alma-cli v0.0.0.4`

Este documento resume las sugerencias de mejora y su justificaci√≥n para implementar en la versi√≥n `v0.0.0.4` de `alma-cli.py`.

---

## 1. Reorganizaci√≥n de Secciones

### ‚úÖ Cambio
Mover la secci√≥n üìÅ Estructura esperada antes de ‚öôÔ∏è Subcomandos a integrar.

### üí° Justificaci√≥n
Ayuda a contextualizar la estructura de archivos antes de describir los comandos que interact√∫an con ella, mejorando la coherencia l√≥gica.

---

## 2. Ampliaci√≥n de Subcomandos

### ‚ûï Nuevo Subcomando: `init`
| Comando | Descripci√≥n |
|---------|-------------|
| `init`  | Crea la estructura de directorios base (`/docs`, `/scripts`, `/logs`) si no existen |

**Justificaci√≥n:** Facilita la inicializaci√≥n del proyecto para nuevos usuarios, evitando errores por falta de directorios.

---

### ‚úçÔ∏è Mejora en `batch-update`
A√±adir ejemplo de uso:

```bash
# Actualizar campos en lote (ej: a√±adir `domain` a todos los archivos de tipo `core`)
python alma-cli.py batch-update --filter-type core --set-field domain:ai --dry-run
```

**Justificaci√≥n:** Clarifica el uso avanzado del comando y su flexibilidad.

---

## 3. Manejo de Casos Extremos

### ‚ûï Nuevo Subcomando: `add-yaml-block`
| Comando           | Descripci√≥n |
|-------------------|-------------|
| `add-yaml-block`  | Agrega un bloque YAML b√°sico a archivos Markdown que carecen de √©l |

**Justificaci√≥n:** Resuelve casos donde los archivos no tienen metadatos, asegurando compatibilidad con el resto de comandos.

---

## 4. Documentaci√≥n de Dependencias

### ‚ûï Secci√≥n: üì¶ Dependencias

```markdown
## üì¶ Dependencias
- `PyYAML` para an√°lisis de bloques YAML.
- `python-slugify` para normalizar snake_case.
```

**Justificaci√≥n:** Informa a los desarrolladores sobre las bibliotecas externas requeridas, evitando errores de importaci√≥n.

---

## 5. Personalizaci√≥n de Reglas

### ‚úçÔ∏è Mejora en `validate`

A√±adir opci√≥n `--config <ruta>` para cargar reglas de validaci√≥n personalizadas desde un archivo YAML/JSON.

```bash
python alma-cli.py validate --config custom_rules.yaml
```

**Justificaci√≥n:** Permite adaptar el CLI a proyectos con requisitos espec√≠ficos sin modificar el c√≥digo base.

---

## 6. Ejemplos Completos

### ‚ûï Ejemplo para `report`

```bash
# Generar informe en formato JSON
python alma-cli.py report --output-format json
```

**Justificaci√≥n:** Demuestra c√≥mo usar salidas alternativas (JSON) para integraci√≥n con otras herramientas.

---

## 7. Manejo de Errores Expl√≠cito

### ‚ûï Secci√≥n: üö® Errores Comunes

```markdown
## üö® Errores Comunes
- Si un archivo no tiene bloque YAML: se sugiere usar `add-yaml-block`.
- Si `--dry-run` est√° activo: se muestra un resumen de cambios sin aplicarlos.
- Permisos denegados: se registra el error en `/logs/errors.log`.
```

**Justificaci√≥n:** Gu√≠a al usuario en la resoluci√≥n de problemas frecuentes.

---

## 8. Extensibilidad del Proyecto

### ‚ûï Nota: Contribuir

```markdown
> üí° **Contribuir**: Este CLI es modular. Para a√±adir nuevos subcomandos, implemente funciones en `/scripts` y reg√≠strelas en `alma-cli.py`.
```

**Justificaci√≥n:** Fomenta la colaboraci√≥n y extensi√≥n del proyecto por parte de la comunidad.

---
