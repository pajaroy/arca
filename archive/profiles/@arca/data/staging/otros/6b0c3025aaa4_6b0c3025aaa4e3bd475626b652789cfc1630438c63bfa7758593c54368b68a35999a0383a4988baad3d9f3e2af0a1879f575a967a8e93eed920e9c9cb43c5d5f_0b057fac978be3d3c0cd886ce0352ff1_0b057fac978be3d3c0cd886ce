# ðŸ§  Prompt TÃ©cnico â€“ `log_writer.py` v1.0 â€“ ALMA_RESIST

Este mÃ³dulo forma parte de `Sprint 1` del roadmap tÃ©cnico de ALMA_RESIST.
Su propÃ³sito es implementar un sistema de logging antifrÃ¡gil, seguro, y compatible con sistemas offline y de bajos recursos.


## ðŸ“„ Detalles Funcionales

### 1. `log_event(event_type, message, module="core")`
- Valida los parÃ¡metros:
  - `event_type` debe ser `INFO`, `WARNING`, o `ERROR`
  - Si es invÃ¡lido, debe **forzarse a "ERROR"** y emitir un `warnings.warn()`
  - Lanza `TypeError` si se pasan tipos incorrectos

- Agrega metadatos automÃ¡ticos:
  - `timestamp` en formato ISO UTC
  - `pid`, `host`, `platform`, `module`
  

### 2. `write_log(event: dict)`
- Escribe el evento en el archivo diario `logs/alma_<fecha>.log`
- Usa **escritura atÃ³mica**:
  - Crea archivo `.tmp`, escribe, y luego renombra con `os.replace()`
- Crea el directorio `logs/` si no existe, con permisos `0700`
- Maneja errores:
  - `JSONEncodeError`, `PermissionError` â†’ Warning + return False
  - `OSError: errno 28` (sin espacio) â†’ Lanza `SystemError`


## ðŸ§ª Ejemplo de uso:

```python
from core.log_writer import log_event, write_log

entry = log_event("WARNING", "Umbral de CPU excedido", "monitor")
write_log(entry)
```


## ðŸ§± Dependencias del sistema operativo

- Python 3.10+
- Soporte POSIX (`os.replace`, `os.makedirs`, permisos octales)
- No se requiere sistema grÃ¡fico ni librerÃ­as adicionales

