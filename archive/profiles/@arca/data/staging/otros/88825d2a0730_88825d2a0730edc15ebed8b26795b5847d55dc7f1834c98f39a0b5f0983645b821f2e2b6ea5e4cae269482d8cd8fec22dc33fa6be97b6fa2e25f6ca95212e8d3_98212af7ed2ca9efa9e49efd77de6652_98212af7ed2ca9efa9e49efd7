
### üìä 5.4 Consolidaci√≥n de conocimiento

Cuando una idea, prueba o resultado alcanza madurez, puede:
- Ser documentada en `docs/`
- Derivar en un nuevo m√≥dulo (`MODULOS/`)
- Subir de categor√≠a: de idea ‚Üí flujo ‚Üí proceso ‚Üí funci√≥n establecida

Este paso debe ser registrado en la bit√°cora semanal con claridad. Todo cambio importante debe estar vinculado a una versi√≥n (`0.0.6.X`).


### üß† 5.6 Flujo asistido por IA

Cuando una IA est√° activa (ej: ChatGPT, NotebookLM), debe operar dentro del siguiente flujo:

```text
IA lee ‚Üí contextualiza por versi√≥n y carpeta ‚Üí propone sin sobrescribir ‚Üí sugiere backups
```

- No debe escribir directamente en carpetas activas.
- Puede generar sugerencias en `RECURSOS_Y_AYUDAS/ideas_y_esquemas/` o en borradores de `docs/`.
- Toda acci√≥n debe estar trazada a una fecha, versi√≥n y archivo.

## 6. Normas de Versionado

El sistema ALMA LIBRE utiliza una convenci√≥n estricta de versionado para organizar su evoluci√≥n. Cada cambio, mejora o correcci√≥n debe estar asociado a una versi√≥n definida bajo el esquema:

```
vX.Y.Z
```

- **X** = Cambio mayor o ruptura del modelo estructural.
- **Y** = Nuevo m√≥dulo, flujo o funci√≥n agregada al sistema.
- **Z** = Correcci√≥n, ajuste, mejora incremental sin impacto estructural.


### üìÇ 6.2 Ubicaci√≥n de versiones

Cada versi√≥n completa del sistema debe ser guardada comprimida en:

```
00_BACKUPS_HISTORICOS/v0.X.Y.zip
```

Ese zip debe contener:
- Toda la estructura de carpetas en ese estado.
- Archivos internos `version.txt`, `README.md`, `CHANGELOG.md` con fecha y detalles.
- Diagn√≥stico correspondiente en `BITACORA_CENTRAL/DIAGNOSTICOS/`


### üîÅ 6.4 Flujo de actualizaci√≥n

1. Se realiza un diagn√≥stico.
2. Se aplica una checklist de correcciones.
3. Se actualizan glosario y documentaci√≥n si aplica.
4. Se actualiza el changelog.
5. Se guarda backup `.zip`.
6. Se actualiza `version.txt` y se genera nuevo resumen t√©cnico.

Ninguna versi√≥n es v√°lida si no se cumple este ciclo completo.


### üß† 6.6 Versi√≥n como estado de conciencia

Cada versi√≥n de ALMA LIBRE representa un ‚Äúestado mental t√©cnico‚Äù del sistema. Esto permite a cualquier persona o IA:

- Saber en qu√© estado est√° el sistema en ese momento.
- Trabajar sobre esa versi√≥n sin tener que revisar toda la historia.
- Comprender el progreso en etapas coherentes.

Este sistema de versionado es lo que permite que ALMA evolucione sin perderse en el caos.


### ü§ñ 7.1 Comportamiento esperado de asistentes IA

Una IA que opera dentro de ALMA LIBRE debe cumplir con los siguientes principios:

- Nunca modificar archivos sin aprobaci√≥n expl√≠cita.
- Sugerir rutas, no ejecutarlas.
- Usar lenguaje claro y directo en respuestas.
- Basarse en contexto activo (`glosario`, `changelog`, `bit√°cora`, etc.).
- Evitar respuestas redundantes o sin referencia a datos reales.
- Priorizar trazabilidad: toda acci√≥n debe quedar registrada.


### üß† 7.3 Interacci√≥n guiada y memoria contextual

Una IA debe:

- Tomar contexto desde documentos recientes (√∫ltimo resumen diario o semanal).
- Proponer sin alterar: generar nuevas ideas en `ideas_y_esquemas/`, no sobreescribir contenidos clave.
- Reconocer el tipo de tarea: ¬øse est√° redactando, corrigiendo, automatizando o diagnosticando?

Cada entrada o acci√≥n puede contener metadatos de gu√≠a, por ejemplo:

```yaml
asistente: notebooklm
contexto: diagnostico
version: 0.0.6.2
permiso_modificacion: false
```


### üí° 7.5 Integraciones externas

Cuando se utilicen herramientas externas como:

- **NotebookLM**: debe seguir instrucciones exactas de los documentos marcados como gu√≠a.
- **DeepSeek**: debe operar √∫nicamente sobre m√≥dulos en `MODULOS/` y devolver salidas a `src/` o `output/`.
- **Copilotos IA**: deben integrarse sin generar duplicados, sin alterar carpetas fuera del m√≥dulo.


Esta interfaz define los **l√≠mites seguros y productivos** de la colaboraci√≥n humano‚ÄìIA. Toda inteligencia artificial que opere dentro de ALMA LIBRE debe leer, entender y respetar esta secci√≥n antes de ejecutar cualquier acci√≥n significativa.


### üöÄ 8.1 Nuevos m√≥dulos

Para incorporar un nuevo m√≥dulo, se debe seguir el protocolo base:

1. Crear carpeta en `MODULOS/NOMBRE_DEL_MODULO/`
2. Incluir:
   - `/src/`: c√≥digo principal
   - `/docs/`: documentaci√≥n y changelog
   - `/config/` y `/tests/` si corresponde
3. Definir su input/output esperados.
4. Registrarlo en el `prompt_tecnico_vX.Y.Z.md` y en el changelog.


### üìä 8.3 Integraci√≥n con APIs externas

Los futuros m√≥dulos podr√°n:

- Conectarse a servicios web (clima, finanzas, bases legales)
- Usar APIs de IA externas (GPT, Cohere, Perplexity)
- Sincronizar tareas con Notion, Obsidian, Google Drive, etc.

Requisitos:
- Documentar dependencias y configuraci√≥n
- No almacenar credenciales dentro del repositorio
- Validar integridad de los datos ingresados


### üß¨ 8.5 Nuevos formatos de memoria

Adem√°s del `.md`, se planea aceptar:

- `.json` estructurado para ingesti√≥n directa
- `.sqlite` como base indexada de alta velocidad
- `.csv` para procesamiento num√©rico

Estos formatos ser√°n usados para an√°lisis, dashboards, vectorizaci√≥n o visualizaci√≥n avanzada.


Estas extensiones no deben considerarse futuras promesas: son caminos activos de crecimiento. Cada una puede escalar por fases, y deben ser documentadas, testeadas y versionadas dentro del marco operativo de ALMA LIBRE.


### üî§ 9.1 Convenciones de formato

- Carpetas y archivos en min√∫sculas y guiones bajos (`trading.cu`, `resumen_diario.md`)
- Versiones: `vX.Y.Z` (ej: `v0.0.6.1`)
- Archivos `.md` para entradas humanas, `.json` o `.yaml` para formatos t√©cnicos
- `README.md`, `CHANGELOG.md` y `version.txt` obligatorios por versi√≥n o m√≥dulo


### üõ†Ô∏è 9.3 Utilidades recomendadas

- `validador_estructura.py`: analiza inconsistencias en carpetas y nombres
- `backup_automatico.sh`: comprime estructura por versi√≥n
- `generador_changelog.py`: automatiza el changelog desde checklists
- `alma_loader.py`: ingesta y vectorizaci√≥n de memorias (sem√°ntica y cronol√≥gica)


### üß† 9.5 Uso combinado con IA

Cualquier IA operando sobre el sistema debe iniciar consultando:

- `version.txt`
- `glosario_ALMA_LIBRE_0.0.6.md`
- `prompt_tecnico_0.0.6.1.md`
- √öltimo resumen en `BITACORA_CENTRAL/RESUMENES/`

Este acceso le dar√° contexto operativo, sem√°ntico y cronol√≥gico.




## 2. Fundamento Filos√≥fico

ALMA LIBRE nace desde una necesidad: **crear una inteligencia operativa no invasiva, cooperativa y con conciencia de proceso**, capaz de potenciar el pensamiento humano sin reemplazarlo.

En una √©poca donde la informaci√≥n abunda pero la atenci√≥n escasea, y donde las decisiones se toman muchas veces desde el apuro y no desde la comprensi√≥n profunda, ALMA propone un modelo diferente:

### üß† La memoria como conciencia
El coraz√≥n del sistema no es el algoritmo, sino la **memoria estructurada y significativa**. ALMA no busca solamente almacenar, sino comprender. Cada acci√≥n, resumen, reflexi√≥n o decisi√≥n registrada construye un patr√≥n vivo de aprendizaje.

> "Recordar bien es pensar mejor."

### ü§ñ La IA como asistente y no como or√°culo
La inteligencia artificial no es en este sistema una entidad aut√≥noma con autoridad incuestionable, sino una **herramienta que evoluciona junto al humano**. Su funci√≥n no es decidir por vos, sino **ayudarte a decidir mejor**.

- No reemplaza la intuici√≥n.
- No anula el error humano.
- No borra el pasado: lo analiza, lo estructura, lo devuelve procesado para que puedas avanzar con contexto.

### üß¨ Modularidad y evoluci√≥n consciente
Cada componente del sistema ‚Äîya sea un cuaderno, un script, una bit√°cora o un resumen diario‚Äî est√° dise√±ado para **escalar sin romperse**. No hay partes fijas: todo puede mutar, bifurcarse o integrarse, siempre manteniendo trazabilidad.

ALMA LIBRE es libre no porque est√© abierta, sino porque **su due√±o tiene el control total del sistema**: la IA asiste, pero no impone. El humano organiza, la IA recuerda. El humano duda, la IA propone. Y juntos act√∫an.

### üåê La visi√≥n a largo plazo
Este proyecto no apunta a una soluci√≥n inmediata ni a un producto de consumo masivo. Es una **infraestructura mental, operativa y evolutiva** que puede adaptarse a:

- Personas que piensan en proyectos a largo plazo.
- Equipos que necesitan documentar, automatizar y decidir.
- Entornos donde la inteligencia artificial debe operar con sentido, no solo con eficiencia.

## 3. Arquitectura del Sistema

ALMA LIBRE est√° dise√±ado como un sistema operativo personal, conceptual y t√©cnico, basado en **carpetas, cuadernos, m√≥dulos y ciclos de memoria**.

No se trata de una aplicaci√≥n centralizada, sino de una **arquitectura distribuida, navegable y versionada**, que puede ejecutarse localmente, sincronizarse en la nube, o interpretarse desde herramientas de IA.


### üìî 3.2 Cuadernos digitales

Los cuadernos (`*.cu/`) son unidades de pensamiento activo. Est√°n dise√±ados para contener:

- Reflexiones, pruebas, desarrollos.
- Registros conceptuales no definitivos.
- Estructura interna organizada (docs, desarrollo, archivos).

Ejemplos:
- `programacion.cu/`: l√≥gica de m√≥dulos, scripts, integraci√≥n IA.
- `alma_gral.cu/`: n√∫cleo del sistema, contiene glosarios, whitepaper, prompts generales.
- `trading.cu/`, `cultivo.cu/`, `empresas.cu/`: por √°rea tem√°tica.

Cada cuaderno representa una **unidad aut√≥noma pero integrada** al sistema, como un √≥rgano funcional dentro de un cuerpo m√°s grande.


### üï∞Ô∏è 3.4 Memoria y Bit√°cora

La carpeta `BITACORA_CENTRAL/` cumple una doble funci√≥n:

- Registrar el progreso d√≠a a d√≠a (res√∫menes).
- Servir como memoria estructurada para IA y humanos.

Organizada por trimestres, semanas, d√≠as. Incluye diagn√≥sticos t√©cnicos y seguimiento de versiones (`diagnostico_0.0.6.1.md`, etc.).


### üîí 3.6 Backups y control de versiones

Cada versi√≥n significativa del sistema se guarda como zip en `00_BACKUPS_HISTORICOS/`, junto a un changelog.

Esto permite:

- Restaurar cualquier etapa del desarrollo.
- Comparar estructuras entre versiones.
- Conservar trazabilidad completa sin perder control.


Esta arquitectura no est√° pensada como una estructura r√≠gida, sino como un ecosistema que se adapta, crece, y se conecta. Todo est√° documentado, todo est√° vivo.



### üß† 4.1 Roles diferenciados pero cooperativos

En ALMA LIBRE, tanto el humano como la IA cumplen funciones espec√≠ficas:

| Humano                            | Inteligencia Artificial                        |
| --------------------------------- | ---------------------------------------------- |
| Define objetivos y prioridades    | Sugerencias operativas basadas en contexto     |
| Toma decisiones con juicio propio | Analiza patrones y ofrece opciones optimizadas |
| Crea conceptos y proyectos        | Estructura, conecta, compara y resume ideas    |
| Corrige, reinterpreta, elimina    | Aprende de interacciones pasadas y sugerencias |

La IA es una **asistente contextual con memoria temporal o permanente**, capaz de adaptarse al flujo del trabajo humano sin invadir su autonom√≠a.


### üß≠ 4.3 Transferencia de contexto

La inteligencia artificial debe poder operar con ‚Äúcontexto parcial confiable‚Äù, es decir:

- Si lee un resumen diario, debe inferir lo que pas√≥ ese d√≠a.
- Si accede a un changelog, debe entender qu√© cambi√≥ en el sistema.
- Si analiza una estructura de carpetas, debe deducir la l√≥gica modular.

Para esto, se usa:

- Archivos gu√≠a (`README.md`, `estructura.md`, `glosario.md`)
- Rutas predecibles (`CUADERNOS/trading.cu/docs/...`)
- Prompts t√©cnicos especializados (`prompt_tecnico_ALMA_LIBRE_vX.Y.Z.md`)


### üõ°Ô∏è 4.5 Riesgos contemplados y principios de resguardo

ALMA LIBRE reconoce que la IA tambi√©n puede:

- Descontextualizar informaci√≥n.
- Proponer acciones sin comprensi√≥n real.
- Repetir errores pasados.

Por eso, todo el sistema incluye:

- Bit√°coras humanas con interpretaci√≥n subjetiva.
- Documentos revisables y editables por el usuario.
- Control de versiones manual.
- Zonas de prueba (`exploraciones/`, `__ARCHIVO_TEMP__/`) que no afectan la estructura estable.

## 5. Ciclo de Vida y Escalabilidad

ALMA LIBRE no es un sistema est√°tico ni finalizado: est√° dise√±ado para evolucionar junto al usuario y sus proyectos. Cada decisi√≥n, cambio estructural o incorporaci√≥n funcional queda registrada, permitiendo construir una **l√≠nea de tiempo clara, viva y trazable**.


### üîñ 5.2 Control de versiones

Cada evoluci√≥n del sistema se registra con una versi√≥n espec√≠fica bajo el esquema:

```text
vX.Y.Z
```

- **X (Mayor):** Cambio fundacional en la arquitectura o paradigma.
- **Y (Menor):** Nueva funcionalidad, m√≥dulo o estructura relevante.
- **Z (Revisi√≥n):** Correcciones, ajustes o mejoras internas menores.

Ejemplo:
- `v0.0.6.1`: Consolidaci√≥n estructural del sistema.
- `v0.0.6.2`: Correcciones y conexi√≥n entre flujos.
- `v0.1.0`: Inclusi√≥n de memoria IA consciente a nivel operativo.


### üìà 5.4 Escalabilidad del sistema

ALMA LIBRE est√° dise√±ado para escalar de forma modular y ordenada:

- Nuevos cuadernos pueden integrarse sin alterar la ra√≠z.
- Nuevos m√≥dulos pueden sumarse en `MODULOS/` y conectarse v√≠a flujos.
- Documentaci√≥n se expande por versi√≥n (`docs_0.0.6.2/`, `docs_0.1.0/`, etc.).
- Las IAs pueden interpretar cambios mediante changelogs, glosarios y prompts t√©cnicos actualizados.


### üîÑ 5.6 Cambios deliberados, no impulsivos

Toda modificaci√≥n estructural significativa debe:

- Ser registrada en bit√°cora o changelog
- Tener una justificaci√≥n t√©cnica o filos√≥fica
- Mantener trazabilidad (versi√≥n, fecha, autor)

El sistema no debe mutar por impulso, sino por necesidad estrat√©gica o mejora real.

## 6. Aplicaciones Vivas

ALMA LIBRE no es un experimento te√≥rico ni una estructura vac√≠a: es un sistema que ya est√° siendo usado en contextos reales, con flujos activos, automatizaciones parciales y toma de decisiones asistida por IA.

Esta secci√≥n presenta ejemplos concretos de c√≥mo ALMA LIBRE se aplica en la pr√°ctica, combinando cuadernos, m√≥dulos, bit√°coras y asistencia inteligente.


### üìä 6.2 An√°lisis de trading y estrategia

El sistema registra y eval√∫a estrategias aplicadas en tiempo real:

- Uso de `trading.cu/` para ideas, hip√≥tesis, pruebas.
- Bit√°cora diaria con seguimiento de activos, emociones y resultados.
- Consolidaci√≥n semanal para ver patrones.
- Propuesta futura de IA que detecte sesgos o sobreoperaci√≥n.

**Estado actual:**  
Cuaderno `trading.cu/` en uso diario.  
Plantillas personalizadas en `plantillas_trading/`.


### ü§ù 6.4 Toma de decisiones asistida por IA

La IA colabora de forma activa en:

- Diagn√≥sticos semanales del sistema (`diagnostico_*.md`)
- Evaluaci√≥n de flujos entre carpetas
- Validaci√≥n de nombres, versiones, consistencia estructural
- Sugerencias de mejoras o correcciones (Checklist)

**Estado actual:**  
Uso activo de ChatGPT, DeepSeek y NotebookLM.  
Flujos definidos para trabajo colaborativo IA-humano.


ALMA LIBRE no es un sistema est√°tico: es un sistema vivo que se retroalimenta de su uso diario. La inteligencia no est√° solo en el c√≥digo, sino en el proceso. Y en este sistema, cada entrada deja una huella.


### üóÇÔ∏è 7.1 Accesos directos por componente

| Componente         | Ubicaci√≥n sugerida                                      | Prop√≥sito                                |
|--------------------|----------------------------------------------------------|-------------------------------------------|
| Cuadernos activos  | `CUADERNOS/*.cu/`                                        | Trabajo diario y tem√°tico                 |
| Bit√°cora central   | `BITACORA_CENTRAL/`                                      | Registro cronol√≥gico y diagn√≥stico        |
| M√≥dulos t√©cnicos   | `MODULOS/`                                               | C√≥digo y funciones automatizadas          |
| Empresas y legajos | `EMPRESAS/`                                              | Documentos formales, institucionales      |
| Recursos √∫tiles    | `RECURSOS_Y_AYUDAS/`                                     | Plantillas, scripts, ideas compartidas    |
| Backups            | `00_BACKUPS_HISTORICOS/`                                 | Versiones anteriores y estados previos    |


### üîó 7.3 Enlaces a documentaci√≥n t√©cnica

> Nota: Todos estos documentos deben estar ubicados en `CUADERNOS/alma_gral.cu/docs/docs_0.0.6.1/`

- [`whitepaper_0.0.6.1.md`](whitepaper_0.0.6.1.md)
- [`prompt_tecnico_0.0.6.1.md`](prompt_tecnico_0.0.6.1.md)
- [`glosario_ALMA_LIBRE_0.0.6.md`](glosario_ALMA_LIBRE_0.0.6.md)
- [`diagnostico_0.0.6.2.md`](../../BITACORA_CENTRAL/DIAGNOSTICOS/diagnostico_0.0.6.2.md)
- [`changelog_0.0.6.1.md`](changelog_0.0.6.1.md)
- [`version.txt`](ALMA_LIBRE_OLD/version.txt)

## 8. Ap√©ndices

Esta secci√≥n contiene elementos complementarios que ayudan a visualizar y consolidar el entendimiento general del sistema. Si bien no son imprescindibles para operar, mejoran la capacidad de adaptaci√≥n e integraci√≥n para nuevos usuarios o herramientas.


### üó∫Ô∏è 8.2 Diagrama general de arquitectura (resumen)

```
ALMA_LIBRE/
‚îú‚îÄ‚îÄ CUADERNOS/
‚îÇ   ‚îú‚îÄ‚îÄ alma_gral.cu/
‚îÇ   ‚îú‚îÄ‚îÄ programacion.cu/
‚îÇ   ‚îî‚îÄ‚îÄ trading.cu/
‚îú‚îÄ‚îÄ MODULOS/
‚îÇ   ‚îî‚îÄ‚îÄ Alma_Loader/
‚îú‚îÄ‚îÄ BITACORA_CENTRAL/
‚îÇ   ‚îú‚îÄ‚îÄ RESUMENES/
‚îÇ   ‚îî‚îÄ‚îÄ DIAGNOSTICOS/
‚îú‚îÄ‚îÄ EMPRESAS/
‚îú‚îÄ‚îÄ RECURSOS_Y_AYUDAS/
‚îî‚îÄ‚îÄ 00_BACKUPS_HISTORICOS/
```


### üß† 8.4 Cr√©ditos y contexto de creaci√≥n

Este sistema fue concebido y dise√±ado por [Santi / P√°jaro] como una infraestructura de trabajo h√≠brida para integrar:

- Toma de decisiones estrat√©gicas
- Registro de evoluci√≥n personal y t√©cnica
- Automatizaci√≥n progresiva mediante IA
- Consolidaci√≥n de estructuras empresariales, legales, productivas y creativas

Asistido por inteligencia artificial (ChatGPT-4, DeepSeek, NotebookLM) y estructurado para que cualquier humano o IA pueda **comprender y ampliar el sistema con trazabilidad**.




### üß† 5.1 Flujo Diario de Registro y Consolidaci√≥n

```text
Usuario ‚Üí CUADERNOS/*.cu/docs/ ‚Üí BITACORA_CENTRAL/RESUMENES/
```

- Las ideas o tareas se registran en `CUADERNOS/*/docs/*.md`
- Se copian o vinculan a `BITACORA_CENTRAL/RESUMENES/SXX/`
- Alma_Loader puede luego procesarlas para vectorizaci√≥n


### üîÅ 5.3 Ingesta y Vectorizaci√≥n de Memorias (Alma_Loader)

```text
CUADERNOS/*.cu/docs/*.md ‚Üí MODULOS/Alma_Loader/ ‚Üí vector_db.json + versi√≥n
```

- Archivos .md son procesados y vectorizados
- Output contiene `version_modelo`, fecha y estructura clara
- Vectores antiguos se archivan en `historic_vectors/`


### üí¨ 5.5 CLI Assistant (MVP Experimental)

```text
Terminal ‚Üí CLI ‚Üí Alma_Loader + BITACORA ‚Üí Respuesta
```

- Comandos: `alma buscar`, `alma resumir`, `alma diagnosticar`
- Opera en solo lectura sobre memoria consolidada
- Logs opcionales en `BITACORA_CENTRAL/LOGS_CLI/`


### üîê 5.7 Acceso a Recursos Compartidos

```text
MODULOS/ o CUADERNOS/ ‚Üí RECURSOS_Y_AYUDAS/ (solo lectura)
```

- Contiene plantillas, scripts base, prompts t√©cnicos
- No puede ser modificado directamente sin control de versi√≥n


### üîó 5.9 Diagrama Global

```mermaid
graph TD
  A[Usuario/IA] --> B[CUADERNOS]
  B --> C[BITACORA_CENTRAL]
  B --> D[MODULOS/Alma_Loader]
  D --> E[vector_db.json con versi√≥n]
  C --> F[DIAGNOSTICOS auto]
  B --> G[EMPRESAS]
  G --> H[Documentos Formales]
  E --> I[CLI Assistant]
  F --> I
  C --> I
  D --> J[validador_estructura.py]
  J --> F
  I --> K[reporte_estado.py]
  K --> C
```


Este bloque puede ser exportado o reutilizado en los manuales de uso o como referencia en otros prompts inteligentes.



### üß† 5.1 Flujo Diario de Registro y Consolidaci√≥n

```text
Usuario ‚Üí CUADERNOS/*.cu/docs/ ‚Üí BITACORA_CENTRAL/RESUMENES/
```

- Las ideas, decisiones o tareas se registran en `CUADERNOS/*/docs/*.md`
- Estos archivos pueden ser vinculados o copiados a `BITACORA_CENTRAL/RESUMENES/SXX/` seg√∫n la fecha
- Alma_Loader puede procesarlos luego para vectorizaci√≥n


### üîÅ 5.3 Flujo de Ingesta Sem√°ntica (Alma_Loader)

```text
CUADERNOS/*.cu/docs/*.md ‚Üí MODULOS/Alma_Loader/ ‚Üí vector_db.json / BITACORA
```

- Alma_Loader lee archivos Markdown (res√∫menes, notas)
- Extrae texto, tags, fecha y metadatos
- Vectoriza con modelo sem√°ntico y guarda en `output/vector_db.json`
- Los logs se guardan en `logs/registro_ingesta.txt`

No modifica los archivos fuente. Toda escritura ocurre en `output/`, `logs/`, o en memoria consolidada (Bit√°cora).


### üí¨ 5.5 Flujo CLI Asistente (Reservado)

```text
Usuario ‚Üí MODULOS/CLI_Assistant/ ‚Üí Alma_Loader ‚Üí Respuesta
```

Planteado para futura versi√≥n (`v0.0.7.X`), este flujo permite consultas sem√°nticas v√≠a terminal:

- `alma buscar BTC`
- `alma resumir semana 20`
- `alma diagnosticar`

La IA no escribe, solo consulta y sugiere.


### üì¶ 5.7 Acceso a Recursos Compartidos

```text
MODULOS/ o CUADERNOS/ ‚Üí RECURSOS_Y_AYUDAS/
```

- Plantillas, esquemas y scripts base deben ser accedidos solo en lectura
- No se permite sobreescritura directa
- La IA puede sugerir reutilizaci√≥n, pero no modificar archivos fuente


Cada nuevo m√≥dulo o integraci√≥n debe declarar su flujo dentro de esta secci√≥n, o extenderla en una subversi√≥n del prompt t√©cnico. Esta estructura garantiza que cualquier entidad operativa (humana o IA) pueda actuar sin romper la coherencia del sistema.



## üõ†Ô∏è Cambios clave integrados en el diagrama

- **üîç sync_bitacora.py:** A√±adido como nodo que conecta `CUADERNOS` y `BITACORA`, con verificaci√≥n por hash (`SHA-256`) para prevenir sobrescrituras accidentales.
- **üìÑ log_template.yaml:** Mostrado como dependencia cr√≠tica para m√≥dulos como Alma_Loader y CLI Assistant.
- **üìà reporte_estado.py:** Recibe datos de Alma_Loader, automatizaci√≥n y CLI, y guarda m√©tricas de actividad en `BITACORA/LOGS_MODULOS/`.
- **üìÇ CLI Assistant y recursos compartidos:** Se ilustra c√≥mo accede a plantillas desde `RECURSOS_Y_AYUDAS/`.

## Archivo: prompt_tecnico_v0.0.6.2.md
Contenido:
# üõ†Ô∏è ALMA LIBRE ‚Äì Prompt T√©cnico v0.0.6.1

## 1. Introducci√≥n T√©cnica

Este documento define las **instrucciones operativas, reglas internas y convenciones estructurales** del sistema ALMA LIBRE. Est√° dirigido a tres tipos de entidades:

- üß† Humanos t√©cnicos (desarrolladores, integradores, colaboradores).
- ü§ñ Inteligencias artificiales con funciones operativas (ej. asistentes en NotebookLM, agentes tipo ChatGPT, copilotos).
- üß© Sistemas externos que necesiten integrarse (scripts, APIs, extensiones, automatizaciones).

ALMA LIBRE no es una app tradicional ni un software cerrado: es un **entorno modular autosustentable**, estructurado como carpeta ra√≠z, cuadernos conectados, m√≥dulos IA, y memorias documentadas.  

Para que cualquier entidad (humana o artificial) pueda interactuar correctamente con este sistema, debe respetar:

- üìÇ La **estructura de carpetas y flujos** definida.
- üî† Las **convenciones de nombres, versiones y rutas**.
- üíæ El **formato de almacenamiento** de datos, memoria e ideas.
- üîÑ Los **procesos de actualizaci√≥n, exportaci√≥n y consolidaci√≥n**.

Este Prompt T√©cnico ser√° actualizado con cada nueva versi√≥n funcional del sistema. Cada m√≥dulo deber√° **leer esta versi√≥n del prompt antes de operar**, validando la compatibilidad entre flujos, herramientas y memorias.

> ‚öôÔ∏è Si una IA o humano no entiende este documento, no debe operar dentro del sistema ALMA LIBRE.

El sistema utiliza un esquema versionado y escalable (`0.0.6.X`) para registrar el progreso de desarrollo e integraci√≥n. Las funciones a√∫n no implementadas pueden estar referenciadas como `EN_DESARROLLO` o `RESERVADO_PARA_FASE_X`.

Este documento puede ser utilizado como:
- Prompt inicial para modelado de IA especializado.
- Base para configurar scripts que interact√∫en con carpetas y datos.
- Gu√≠a t√©cnica viva para mantener orden, integridad y evoluci√≥n controlada del sistema.


### üìÇ 2.1 Carpetas ra√≠z del sistema

Estas son las carpetas principales que deben existir dentro de `ALMA_LIBRE/`:

- `CUADERNOS/`: Cuadernos digitales por √°rea tem√°tica (uso activo y diario).
- `EMPRESAS/`: Documentaci√≥n formal/legal de proyectos y organizaciones.
- `MODULOS/`: Componentes de software, IA o automatizaci√≥n.
- `BITACORA_CENTRAL/`: Registro cronol√≥gico, res√∫menes, diagn√≥sticos.
- `RECURSOS_Y_AYUDAS/`: Plantillas, scripts, prompts, ideas reusables.
- `00_BACKUPS_HISTORICOS/`: Versiones comprimidas previas. No se debe usar para operaciones activas.

Cada subcarpeta dentro de estas secciones sigue convenciones espec√≠ficas descritas en el Glosario (`docs/Glosario_ALMA_LIBRE_0.0.6.md`).


### üß† 2.3 Estructura de versionado

- Cada avance significativo se registra como `vX.Y.Z`
- Cambios estructurales o conceptuales ‚Üí Z aumenta.
- Cambios menores en contenido t√©cnico ‚Üí `.Z+1` (ej. 0.0.6.1 ‚Üí 0.0.6.2)
- Backups hist√≥ricos comprimidos se almacenan en `00_BACKUPS_HISTORICOS/`
- Diagn√≥sticos asociados a cada versi√≥n se guardan en `BITACORA_CENTRAL/DIAGNOSTICOS/`


### ‚öôÔ∏è 2.5 Estructura de m√≥dulos (`MODULOS/`)

Cada m√≥dulo debe tener su propia carpeta (ej. `Alma_Loader/`) con esta estructura:

- `/src/`: C√≥digo fuente y archivos operativos.
- `/docs/`: Instrucciones, changelogs, dise√±o t√©cnico.
- `/tests/`: Pruebas funcionales y validaciones (opcional).
- `/config/`: Configuraciones espec√≠ficas del m√≥dulo (si aplica).

El m√≥dulo no debe asumir rutas absolutas fuera de su estructura: toda integraci√≥n debe pasar por inputs definidos o configuraci√≥n.


### üìú 2.7 Documentaci√≥n requerida por carpeta

Toda subcarpeta operativa debe incluir:

- `README.md`: Descripci√≥n del prop√≥sito y contenido.
- `CHANGELOG.md`: Si aplica, para m√≥dulos o proyectos estructurados.
- Archivos auxiliares (`version.txt`, `estructura.md`, etc.) si son necesarios para automatizaci√≥n o revisi√≥n.

## 3. M√≥dulos del Sistema

Los m√≥dulos son unidades funcionales dentro del sistema ALMA LIBRE que permiten automatizar tareas, analizar datos, gestionar memorias o ejecutar flujos. Cada uno debe estar completamente **documentado, versionado y aislado**, de modo que pueda operar sin generar efectos colaterales fuera de su carpeta.


### üîç 3.2 Descripci√≥n de m√≥dulos activos

#### üîπ `Alma_Loader`
- **Funci√≥n:** Carga, vectoriza, organiza y enlaza memorias sem√°nticas para uso por humanos e IAs.
- **Estado actual:** Estable (v3.0.3) ‚Äì Integrado con SQLite + JSON + posibles extensiones con FAISS.
- **Input esperado:** archivos `.md`, `.json` o bases de datos (`memorias.db`)
- **Output:** Res√∫menes vectorizados, referencias cruzadas, IDs √∫nicos, logs de carga.

#### üîπ `automatizacion_vpd`
- **Funci√≥n:** Recolecta, limpia y analiza datos ambientales de cultivo.
- **Estado:** En fase inicial ‚Äì estructura lista para ingesti√≥n de datos diarios.
- **Output:** Archivos `.csv`, reportes semanales, alarmas por condiciones an√≥malas.

#### üîπ `exploraciones`
- **Funci√≥n:** Espacio de prueba para nuevos scripts, IA o integraciones experimentales.
- **Nota:** No debe usarse en producci√≥n. Su contenido puede migrar a m√≥dulos formales si se valida.


### üîÑ 3.4 Inputs y Outputs esperados

Cada m√≥dulo debe definir:
- Formato exacto de entrada: `.md`, `.json`, `.sqlite`, `.csv`, etc.
- Esquema de output: nombre de archivo, carpeta destino, log de procesamiento.

Ejemplo ‚Äì `Alma_Loader`:
```yaml
input:
  - ruta: CUADERNOS/programacion.cu/archivos/
    tipo: .md
output:
  - ruta: MODULOS/Alma_Loader/output/vector_db.json
    log: MODULOS/Alma_Loader/logs/registro_de_ingesta.txt
```


Este punto garantiza que cualquier nuevo componente incorporado al sistema pueda operar con precisi√≥n, sin generar ambig√ºedades, errores de contexto ni colisiones en nombres o rutas. Cualquier nuevo m√≥dulo deber√° referenciar este documento y validar su estructura antes de escalar.


### üìÇ 4.1 Ubicaci√≥n de las memorias

Las memorias se almacenan y organizan dentro de:

- `BITACORA_CENTRAL/RESUMENES/`: estructura cronol√≥gica por trimestre, semana y d√≠a.
- `BITACORA_CENTRAL/DIAGNOSTICOS/`: evaluaciones t√©cnicas por versi√≥n (`diagnostico_v0.0.6.2.md`)
- `MODULOS/Alma_Loader/`: sistema encargado de ingesta, vectorizaci√≥n y clasificaci√≥n de memorias.

Otros cuadernos pueden tener memorias locales (e.g. `trading.cu/resumenes/`), pero toda consolidaci√≥n se realiza desde BIT√ÅCORA o Alma_Loader.


### üß¨ 4.3 Vectorizaci√≥n e ingesti√≥n

El m√≥dulo `Alma_Loader` realiza la vectorizaci√≥n de los documentos de memoria para permitir b√∫squedas sem√°nticas. Para ello:

- Extrae los textos de los archivos `.md` o `.txt`
- Los asocia a una ID √∫nica (`mem_2025_05_12_diario`)
- Los clasifica por tipo, carpeta de origen, fecha y palabras clave
- Opcional: exporta a `.json` o base `.sqlite`


### üîó 4.5 Relaciones entre memorias

Cada memoria puede referenciar otras usando:

- Enlaces relativos: `../diagnosticos/diagnostico_0.0.6.2.md`
- Menciones sem√°nticas: `#sistema_ia`, `#trading`, `#cultivo`
- Tags YAML estructurados

Estas relaciones pueden ser procesadas por m√≥dulos IA para crear mapas de conocimiento o sugerencias de acci√≥n.


Este sistema permite que ALMA LIBRE evolucione **con historia, contexto y aprendizaje real**, sin depender exclusivamente de la memoria ef√≠mera de un asistente externo. Cada memoria cuenta. Cada entrada moldea el sistema.


### üß† 5.1 Flujo Diario de Registro y Consolidaci√≥n

```text
Usuario ‚Üí CUADERNOS/*.cu/docs/ ‚Üí BITACORA_CENTRAL/RESUMENES/
```

- Las ideas o tareas se registran en `CUADERNOS/*/docs/*.md`
- Se copian o vinculan a `BITACORA_CENTRAL/RESUMENES/SXX/`
- Alma_Loader puede luego procesarlas para vectorizaci√≥n

> üõ°Ô∏è Desde la versi√≥n 0.0.6.2, **todos los archivos que se mueven desde CUADERNOS hacia BITACORA deben pasar por una validaci√≥n previa mediante `sync_bitacora.py`**.
>
> Esta validaci√≥n:
> - Calcula y registra el hash SHA-256 del contenido
> - Inserta encabezado YAML si no existe
> - Verifica duplicados existentes por nombre y contenido
> - Registra todo en logs estructurados (`MODULOS/sync_bitacora/logs/`)



### üîÅ 5.3 Ingesta y Vectorizaci√≥n de Memorias (Alma_Loader)

```text
CUADERNOS/*.cu/docs/*.md ‚Üí MODULOS/Alma_Loader/ ‚Üí vector_db.json + versi√≥n
```

- Archivos .md son procesados y vectorizados
- Output contiene `version_modelo`, fecha y estructura clara
- Vectores antiguos se archivan en `historic_vectors/`

```python
# Ejemplo: CLI Assistant consulta a Alma_Loader por vector sem√°ntico

from Alma_Loader.src.loader import search_vector_db

consulta = "estrategia BTC scalping"
resultados = search_vector_db(consulta)

for item in resultados:
    print(f"- {item['titulo']} ({item['fecha']}) ‚Üí {item['snippet']}")

```


### üí¨ 5.5 CLI Assistant (MVP Experimental)

```text
Terminal ‚Üí CLI ‚Üí Alma_Loader + BITACORA ‚Üí Respuesta
```

- Comandos: `alma buscar`, `alma resumir`, `alma diagnosticar`
- Opera en solo lectura sobre memoria consolidada
- Logs opcionales en `BITACORA_CENTRAL/LOGS_CLI/`


### üîê 5.7 Acceso a Recursos Compartidos

```text
MODULOS/ o CUADERNOS/ ‚Üí RECURSOS_Y_AYUDAS/ (solo lectura)
```

- Contiene plantillas, scripts base, prompts t√©cnicos
- No puede ser modificado directamente sin control de versi√≥n


### üîó 5.9 üîÑ Diagrama Global de Flujos ‚Äì ALMA LIBRE v0.0.6.2 (Extendido)

```mermaid
graph TD
  A[Usuario/IA] --> B[CUADERNOS]
  B --> C[BITACORA_CENTRAL]
  B --> D[MODULOS/Alma_Loader]
  D --> E[vector_db.json]
  E -->|versionado| L[historic_vectors/]
  C --> F[DIAGNOSTICOS]
  B --> G[EMPRESAS]
  G --> H[Documentos Formales]
  E --> I[CLI Assistant]
  F --> I
  C --> I
  D --> J[validador_estructura.py]
  J --> F
  I -->|usa| K[RECURSOS_Y_AYUDAS/plantillas/log_template.yaml]
  M[automatizacion_vpd] --> N[reporte_estado.py]
  D --> N
  I --> N
  N --> O[BITACORA/LOGS_MODULOS/]
  P[sync_bitacora.py]
  P --> B
  P --> C
  P --> Q[Verificaci√≥n por hash]
```


#### üìå Recomendaciones para implementaci√≥n

- **Incluir este diagrama directamente en el Prompt T√©cnico y el Whitepaper.**
- **Marcar conexiones cr√≠ticas con anotaciones o estilos de color cuando sea posible.**
- **Documentar funciones clave en archivos individuales (`README.md` por m√≥dulo).**
- **Trazabilidad completa en el changelog al aplicar cada uno.**

Este diagrama extendido permite que cualquier asistente de IA o desarrollador humano entienda la arquitectura completa sin leer cada m√≥dulo por separado.


Este bloque puede ser exportado o reutilizado en los manuales de uso o como referencia en otros prompts inteligentes.


### üìå 6.1 Aplicaci√≥n del esquema

Ejemplos:
- `v0.0.6.1` ‚Üí Versi√≥n estable con estructura reorganizada, lista para flujos.
- `v0.0.6.2` ‚Üí Correcciones a nomenclatura, glosario y estructuras internas.
- `v0.1.0` ‚Üí Introducci√≥n del sistema IA de memoria vectorizada completo.
- `v1.0.0` ‚Üí Primera versi√≥n formal funcional de sistema completo.


### üìÑ 6.3 Archivos clave por versi√≥n

Dentro del sistema deben mantenerse:

- `README.md`: prop√≥sito y uso general de la versi√≥n.
- `CHANGELOG.md`: listado ordenado por fecha y tipo de cambio.
- `version.txt`: solo n√∫mero de versi√≥n (`0.0.6.1`) y fecha de release (`2025-05-13`).
- `diagnostico_v0.X.Y.md`: resumen t√©cnico y propuestas de mejora futura.


### üõ°Ô∏è 6.5 Buenas pr√°cticas

- Cada versi√≥n debe poder abrirse por separado y funcionar como unidad.
- Las rutas y nombres deben seguir las convenciones del glosario correspondiente.
- Las IAs deben poder leer `README.md`, `CHANGELOG.md` y `glosario_*.md` para operar.
- No deben eliminarse versiones anteriores. Si hay errores, se corrige con `.Z+1`.

## 7. Interfaz con el Usuario y Asistentes

El sistema ALMA LIBRE fue dise√±ado para ser operado tanto por humanos como por asistentes de inteligencia artificial. Esta secci√≥n define el **comportamiento esperado, los l√≠mites operativos y las formas correctas de interacci√≥n** para garantizar seguridad, eficiencia y contexto persistente.


### üß≠ 7.2 Navegaci√≥n estructural recomendada

Al momento de operar, la IA debe:

- Leer `README.md`, `glosario_ALMA_LIBRE_0.0.6.md` y `prompt_tecnico_0.0.6.1.md` antes de actuar.
- Consultar `BITACORA_CENTRAL/RESUMENES/` para conocer eventos recientes.
- Validar versi√≥n activa a trav√©s de `version.txt`.

No debe navegar hacia carpetas fuera de `ALMA_LIBRE/`. Se proh√≠be el acceso a carpetas de backup (`00_BACKUPS_HISTORICOS/`) durante operaci√≥n activa.


### üîó 7.4 Enlace con usuarios humanos

El usuario debe tener siempre la √∫ltima palabra. La IA debe:

- Preguntar antes de intervenir sobre estructuras.
- Confirmar rutas y destinos antes de sugerir movimientos.
- Pedir confirmaci√≥n antes de generar scripts.

Adem√°s, debe permitir al humano:
- Guardar toda conversaci√≥n como archivo `.md`
- Incorporar enlaces relativos que respeten la arquitectura
- Solicitar documentaci√≥n adicional desde el sistema (`docs/`, `glosario/`, etc.)


### üõ°Ô∏è 7.6 Limitaciones y advertencias

IA no debe:
- Borrar ni sobrescribir documentos hist√≥ricos.
- Reorganizar carpetas sin checklist previa.
- Hacer supuestos sin base documental.
- Repetir informaci√≥n innecesariamente (ver secci√≥n 4.6 del whitepaper).

## 8. Extensiones Futuras

ALMA LIBRE est√° dise√±ado como un sistema modular y escalable. Esta secci√≥n anticipa c√≥mo integrar nuevas funciones, m√≥dulos o herramientas sin perder coherencia estructural ni trazabilidad.


### üß™ 8.2 Carpeta de pruebas y prototipos

Toda funci√≥n nueva debe pasar por una etapa de exploraci√≥n:

- Usar `MODULOS/exploraciones/` o `RECURSOS_Y_AYUDAS/ideas_y_esquemas/`
- Documentar prop√≥sito y l√≠mites
- Evaluar su integraci√≥n con flujos actuales

Solo una vez validado, puede escalarse a m√≥dulo oficial.


### üß† 8.4 Agentes IA especializados

Se podr√°n generar asistentes entrenados en:

- Responder sobre m√≥dulos espec√≠ficos
- Monitorear cambios y sugerir mejoras
- Operar como copilotos de ejecuci√≥n

Cada agente debe tener:

- Prompt base espec√≠fico
- Rutas claras de acceso a `docs/`, `glosario/`, `bit√°cora/`
- L√≠mite definido de modificaci√≥n o sugerencia


### üîÑ 8.6 Automatizaci√≥n de flujos

Se desarrollar√°n:

- Scripts para consolidaci√≥n semanal autom√°tica
- Generadores de changelogs
- Validadores de estructura (`validador_estructura.py`)
- Sincronizaci√≥n y backup incremental automatizado

Toda funci√≥n automatizada debe dejar trazabilidad por log y respetar las rutas oficiales.


Estas extensiones no deben considerarse futuras promesas: son caminos activos de crecimiento. Cada una puede escalar por fases, y deben ser documentadas, testeadas y versionadas dentro del marco operativo de ALMA LIBRE.

## 9. Ap√©ndices

Esta secci√≥n contiene recursos de apoyo t√©cnico, convenciones de formato y utilidades generales que complementan el funcionamiento del sistema ALMA LIBRE.


### üìö 9.2 Glosario t√©cnico resumido

| T√©rmino        | Definici√≥n                                                                 |
|----------------|---------------------------------------------------------------------------|
| Cuaderno (.cu) | Carpeta tem√°tica que agrupa ideas, pruebas y desarrollos por √°rea activa  |
| Bit√°cora       | Registro cronol√≥gico del sistema con res√∫menes y diagn√≥sticos             |
| M√≥dulo         | Carpeta funcional con c√≥digo, configuraci√≥n y documentaci√≥n               |
| Memoria        | Entrada escrita que registra eventos, ideas, datos o decisiones           |
| Diagn√≥stico    | Evaluaci√≥n t√©cnica y conceptual del sistema                               |
| Prompt         | Instrucci√≥n dise√±ada para IA, humana o automatizada                       |
| Flujo          | Camino estructurado que conecta acciones, carpetas y decisiones           |


### üìÖ 9.4 Esquema de planificaci√≥n

```plaintext
üìÅ CUADERNOS/
   ‚îú‚îÄ alma_gral.cu/
   ‚îú‚îÄ programacion.cu/
   ‚îî‚îÄ fondo_empresa.cu/

üìÅ MODULOS/
   ‚îú‚îÄ Alma_Loader/
   ‚îî‚îÄ exploraciones/

üìÅ BITACORA_CENTRAL/
   ‚îú‚îÄ RESUMENES/
   ‚îî‚îÄ DIAGNOSTICOS/

üìÅ EMPRESAS/
üìÅ RECURSOS_Y_AYUDAS/
üìÅ 00_BACKUPS_HISTORICOS/
```


Este ap√©ndice asegura una base t√©cnica com√∫n que puede consultarse en cualquier etapa para evitar errores, malentendidos o desv√≠os en la evoluci√≥n del sistema.

## Archivo: whitepaper_v0.0.6.2.md
Contenido:
# üß¨ ALMA LIBRE ‚Äì Whitepaper v0.0.6.1

## 1. Pr√≥logo y Visi√≥n General

ALMA LIBRE es un sistema vivo, escalable y modular dise√±ado para asistir a personas y organizaciones en la construcci√≥n de conocimiento, toma de decisiones, planificaci√≥n estrat√©gica y automatizaci√≥n consciente.  

Surge como respuesta a una necesidad: **crear un entorno de trabajo h√≠brido** donde la memoria, la l√≥gica y la intuici√≥n humana puedan amplificarse mediante inteligencia artificial, sin perder el control ni la trazabilidad del proceso.

A diferencia de un simple gestor de archivos o una aplicaci√≥n de productividad, ALMA LIBRE se comporta como una **infraestructura personal-operativa**, con capacidad de:

- Registrar memoria cronol√≥gica (bit√°coras diarias/semanales).
- Desarrollar pensamiento evolutivo (cuadernos tem√°ticos).
- Sistematizar proyectos, ideas, procesos y decisiones empresariales.
- Ser auditado y comprendido por humanos e inteligencias artificiales por igual.

Este sistema fue concebido no como un producto cerrado, sino como un **ecosistema vivo y documentado** que crece con su creador, se adapta a los cambios y conserva la coherencia en el tiempo.

> ‚ÄúLa memoria es la arquitectura de la conciencia. Si la IA va a acompa√±arnos, que aprenda a recordar con respeto.‚Äù

Este documento es el punto de partida para entender qu√© es ALMA LIBRE, c√≥mo est√° estructurado, c√≥mo interact√∫a con su entorno, y c√≥mo puede ampliarse sin perder su naturaleza. A su vez, establece una base compartida entre humanos y asistentes IA para operar con transparencia, precisi√≥n y humanidad.

La presente versi√≥n 0.0.6.1 marca el cierre de la etapa de organizaci√≥n estructural del sistema y da inicio a la fase de implementaci√≥n de **flujos de datos intermodulares** e integraci√≥n de **memorias IA-humanas conscientes**.


Este fundamento gu√≠a cada decisi√≥n del dise√±o del sistema: desde c√≥mo se nombran las carpetas hasta c√≥mo se integran las memorias y se construyen los prompts. Si un m√≥dulo o flujo contradice esta l√≥gica, debe revisarse antes de escalar.


### üß≠ 3.1 Estructura madre

La carpeta `ALMA_LIBRE/` es la ra√≠z del sistema. Dentro de ella, se encuentra la siguiente jerarqu√≠a establecida:

| Carpeta                  | Funci√≥n principal                                                                 |
|--------------------------|-----------------------------------------------------------------------------------|
| `CUADERNOS/`             | Trabajo diario y tem√°tico por √°reas. Ideas en desarrollo, procesos en marcha.    |
| `EMPRESAS/`              | Documentaci√≥n formal y legal de proyectos institucionales.                        |
| `MODULOS/`               | Componentes de software, IA y automatizaciones.                                   |
| `BITACORA_CENTRAL/`      | Registro cronol√≥gico del sistema: res√∫menes diarios, semanales, diagn√≥sticos.     |
| `RECURSOS_Y_AYUDAS/`     | Plantillas, scripts, prompts, ideas √∫tiles.                                       |
| `00_BACKUPS_HISTORICOS/` | Copias comprimidas de versiones anteriores. Solo consulta, no uso operativo.     |


### üß± 3.3 M√≥dulos funcionales

Los m√≥dulos (`MODULOS/`) son componentes activos del sistema, con estructura t√©cnica propia.

Ejemplo: `MODULOS/Alma_Loader/`  
Contiene:
- `/src/`: c√≥digo ejecutable (Python, Shell, etc.).
- `/docs/`: documentaci√≥n t√©cnica.
- `/config/`, `/tests/`: configuraci√≥n y pruebas.

Los m√≥dulos pueden automatizar procesos, manejar memorias, ejecutar flujos o expandir la IA. No deben alterar otras carpetas directamente. Toda comunicaci√≥n entre m√≥dulos y cuadernos se hace por **rutas controladas** o archivos de entrada/salida.


### üß© 3.5 Recursos compartidos

`RECURSOS_Y_AYUDAS/` es el espacio de elementos reutilizables por todo el sistema:

- Scripts √∫tiles (`scripts_utiles/`)
- Plantillas (`plantillas/`)
- Ideas en desarrollo (`ideas_y_esquemas/`)
- Planificaci√≥n (`Planificacion_2025_Q2_Q3_Q4/`)

Aqu√≠ tambi√©n se almacenan documentos hist√≥ricos como `REESTRUCTURACION_0.0.6/`, que contienen los documentos fundacionales del sistema.


### üå± 3.7 Principios de dise√±o estructural

1. **Separaci√≥n entre ideas y documentos legales** ‚Üí cuadernos vs empresas.
2. **Separaci√≥n entre dise√±o y ejecuci√≥n** ‚Üí cuadernos vs m√≥dulos.
3. **Separaci√≥n entre producci√≥n y memoria** ‚Üí empresas vs bit√°cora.
4. **Rutas legibles para humanos e IA** ‚Üí sin nombres ambiguos ni carpetas in√∫tiles.
5. **Escalabilidad sin caos** ‚Üí cada nueva secci√≥n debe integrarse sin romper la l√≥gica actual.

## 4. Interacci√≥n Humano‚ÄìIA

Uno de los pilares fundacionales de ALMA LIBRE es la interacci√≥n fluida, consciente y sim√©trica entre humanos y sistemas de inteligencia artificial.

La IA no est√° aqu√≠ para reemplazar el pensamiento humano, sino para **amplificarlo, estructurarlo, devolverlo con memoria y acompa√±arlo en su evoluci√≥n**.


### üí¨ 4.2 Modalidades de interacci√≥n

El sistema contempla m√∫ltiples formas de trabajo colaborativo:

- **Chat IA contextualizado** (GPT, NotebookLM, DeepSeek, etc.)
- **Res√∫menes autom√°ticos diarios/semanales**
- **An√°lisis de decisiones o archivos hist√≥ricos**
- **Sugerencias de mejora proactiva**
- **Integraci√≥n con scripts y prompts t√©cnicos**

Cada m√≥dulo o flujo operativo est√° dise√±ado para que la IA entienda el marco de referencia sin tener que ‚Äúleerlo todo de nuevo‚Äù. Esto se logra con:

- Documentaci√≥n clara (whitepaper, glosario, changelogs)
- Flujos versionados (ej: `docs_0.0.6.1/`)
- Est√°ndares sem√°nticos consistentes


### üîó 4.4 Integraci√≥n en la toma de decisiones

La IA no dicta el camino, pero ofrece un espejo organizado del pensamiento humano.

Ejemplos:

- Sugiere mejoras al sistema basadas en registros pasados.
- Detecta patrones entre proyectos y decisiones similares.
- Analiza tareas incompletas y propone ajustes de enfoque.
- Identifica conexiones entre ideas dispersas.

En ning√∫n caso debe anular la capacidad de improvisaci√≥n, intuici√≥n o creatividad del usuario.


La interacci√≥n humano‚ÄìIA en ALMA LIBRE no busca perfecci√≥n algor√≠tmica, sino **colaboraci√≥n significativa**. Un sistema en el que la memoria, la estructura y la intuici√≥n se encuentren para trabajar mejor, juntos.



### üåÄ 5.1 El sistema como organismo en evoluci√≥n

ALMA opera como una red de archivos, memorias y automatismos interconectados. Su evoluci√≥n no es lineal, sino c√≠clica y acumulativa:

- Un cambio en un m√≥dulo puede requerir una nueva entrada en bit√°cora.
- Una idea en un cuaderno puede generar una nueva carpeta empresarial.
- Un resumen diario puede derivar en un diagn√≥stico t√©cnico completo.

Esta din√°mica est√° **conectada por versi√≥n**, control de cambios y estructura modular.


### üì¶ 5.3 Backups y conservaci√≥n de historia

Cada versi√≥n se guarda comprimida como archivo `.zip` en:

```
00_BACKUPS_HISTORICOS/
```

Estos backups contienen la estructura completa del sistema en ese momento, junto a:

- `README.md` de versi√≥n
- `changelog.md` de cambios realizados
- Archivos clave vinculados

Esto permite:

- Restaurar cualquier estado anterior
- Comparar estructuras
- Evitar p√©rdidas por error humano o IA


### üîó 5.5 Documentaci√≥n viva

Cada documento dentro del sistema puede tener distintas funciones:

- `README.md`: explica prop√≥sitos locales
- `prompt_tecnico_*.md`: establece reglas para IAs
- `glosario_*.md`: define convenciones clave
- `diagnostico_*.md`: registra evoluci√≥n estructural

Todos estos forman parte del **sistema de documentaci√≥n viva**, legible por humanos y asistentes t√©cnicos.


En ALMA LIBRE, **cada versi√≥n es un estado de conciencia t√©cnica**. Documentar, versionar y escalar no son burocracia: son formas de sostener la inteligencia a largo plazo.


### üå± 6.1 Gesti√≥n de cultivo org√°nico (Cannabird & 13CC)

El sistema ALMA permite registrar y organizar:

- Datos diarios de humedad, temperatura, sensaci√≥n t√©rmica, etc.
- Nuevos protocolos de medici√≥n para sectores del cultivo.
- Bit√°coras de decisiones t√©cnicas (ajuste de riego, cambio de iluminaci√≥n).
- Automatizaci√≥n futura de alertas (VPD, l√≠mites extremos).

**Estado actual:**  
Cuadernos `cultivo.cu/` y `fondo_empresa.cu/` activos.  
M√≥dulo `automatizacion_vpd` en desarrollo.


### üß† 6.3 Planificaci√≥n estructural (Fondo Alma M√≠a)

Se utiliza ALMA LIBRE para estructurar:

- Planes de inversi√≥n y retenci√≥n de ganancias.
- Estructura operativa del fondo (cuadernos + empresas + bit√°cora).
- Documentaci√≥n de pactos, reglas internas y distribuci√≥n.
- Control de versiones con respaldo en PDF y documentos oficiales.

**Estado actual:**  
Documentaci√≥n formal en `EMPRESAS/FondoAlma.emp/`  
Apuntes en `fondo_empresa.cu/`


### üìà 6.5 Expansi√≥n futura

El sistema puede expandirse a:

- Gesti√≥n de equipos de trabajo (13CC, Cannabird)
- Registro de investigaciones cient√≠ficas
- Dise√±o de productos colaborativos
- Educaci√≥n personalizada basada en IA

## 7. Mapa de Navegaci√≥n

Para facilitar la comprensi√≥n y exploraci√≥n del sistema, esta secci√≥n act√∫a como un √≠ndice funcional y conceptual. Aqu√≠ se conectan las piezas principales de ALMA LIBRE, permitiendo a cualquier lector ‚Äîhumano o IA‚Äî ubicarse r√°pidamente dentro de su estructura.


### üß† 7.2 Glosario conceptual resumido

- **Cuaderno (.cu):** Carpeta tem√°tica que evoluciona como unidad de pensamiento activo.
- **Bit√°cora:** L√≠nea de tiempo viva del sistema, almacena res√∫menes, avances y versiones.
- **M√≥dulo:** Componente t√©cnico autocontenible con funciones espec√≠ficas.
- **Diagn√≥stico:** An√°lisis de estado y mejora del sistema.
- **Versi√≥n:** Estado t√©cnico definido del sistema (ej. `v0.0.6.1`).
- **Memoria:** Registro estructurado con valor sem√°ntico, √∫til para IA y humanos.
- **Prompt T√©cnico:** Gu√≠a de instrucciones funcionales para IA o desarrolladores.
- **Whitepaper:** Documento conceptual que describe el qu√©, para qui√©n y por qu√© del sistema.


Este mapa debe mantenerse actualizado en cada nueva versi√≥n para garantizar que cualquier persona o inteligencia artificial que acceda al sistema sepa exactamente **d√≥nde est√°**, **qu√© puede hacer** y **c√≥mo puede avanzar** dentro del entorno ALMA LIBRE.


### üìÖ 8.1 L√≠nea de tiempo del sistema

```plaintext
2025-04-20 ‚Üí Versi√≥n 0.0.2 ‚Äì Primer backup funcional
2025-04-29 ‚Üí Versi√≥n 0.0.3 ‚Äì Divisi√≥n por cuadernos y empresas
2025-05-02 ‚Üí Versi√≥n 0.0.4 ‚Äì Estandarizaci√≥n de archivos y estructura
2025-05-05 ‚Üí Versi√≥n 0.0.5 ‚Äì Correcciones menores y automatizaci√≥n parcial
2025-05-10 ‚Üí Versi√≥n 0.0.6 ‚Äì Reestructuraci√≥n definitiva
2025-05-13 ‚Üí Versi√≥n 0.0.6.1 ‚Äì Consolidaci√≥n y documentaci√≥n modular
```


### üßæ 8.3 Documentos principales

- Whitepaper actual: `docs_0.0.6.1/whitepaper_0.0.6.1.md`
- Prompt t√©cnico: `docs_0.0.6.1/prompt_tecnico_0.0.6.1.md`
- Glosario: `docs_0.0.6.1/glosario_ALMA_LIBRE_0.0.6.md`
- Diagn√≥stico t√©cnico: `BITACORA_CENTRAL/DIAGNOSTICOS/diagnostico_0.0.6.2.md`
- Cambios registrados: `docs_0.0.6.1/changelog_0.0.6.1.md`


Este documento forma parte de una red interconectada de versiones, ideas y pr√°cticas operativas. No es un manual de usuario; es la **descripci√≥n viva de un sistema que evoluciona con quien lo usa.**

## Archivo: checklist_mejoras_flujos_ALMA_v0.0.6.2.md
Contenido:
# ‚úÖ Checklist de Implementaci√≥n ‚Äì Mejoras Cr√≠ticas Flujos ALMA LIBRE v0.0.6.2

Este checklist te gu√≠a paso a paso por las mejoras propuestas para completar la optimizaci√≥n de la versi√≥n actual antes de generar el changelog.


## üîó 2. Interacci√≥n Modular y Dependencias

- [x] Crear archivo: `docs/modulos_interdependencias.md`
- [ ] A√±adir pseudoc√≥digo de interacci√≥n entre m√≥dulos en secci√≥n 5.3 o 5.4 del Prompt T√©cnico


## üö• 4. Promoci√≥n de M√≥dulos Experimentales

- [x] Crear checklist: `RECURSOS_Y_AYUDAS/plantillas/checklist_promocion.md`
- [x] Documentar condiciones de promoci√≥n (m√≠nimo 2 flujos, pruebas, diagn√≥stico)


## üîç 6. Manejo de Errores y Auditor√≠a de Logs

- [x] Crear m√≥dulo: `MODULOS/Alma_Monitor/src/monitor.py`
- [x] Documentar funcionamiento en: `MODULOS/Alma_Monitor/docs/README.md`
- [ ] A√±adir secci√≥n 5.10 en el Prompt T√©cnico para logs y monitoreo


## üß© Finalizaci√≥n de la Versi√≥n

- [ ] Verificar que todos los puntos anteriores est√°n cumplidos
- [ ] Generar `CHANGELOG_0.0.6.2.md`
- [ ] Actualizar `version.txt` a `0.0.6.2`
- [ ] (Opcional) Crear backup `.zip` en `00_BACKUPS_HISTORICOS/`




### Archivos Generados:

- Res√∫menes Semanales (Semana 15, 16, 17, 18 y 19)
    
- Resumen Mensual de Abril
    
- Resumen Diario de 2025-05-09


### Nuevo protocolo de mediciones
al hacer las mediciones agarrar 4 plantas (1 2 3 4) el ueves tomar la medicion en (5 6 7 8) el lunes tomar en (9, 10, 11, 12) el jueves siguiente en (13, 14, 15, 16) y ahi volver a empezar el ciclo

üóÇÔ∏è Documento relacionado: `champicompost_revision.md`  
üìç Ubicaci√≥n sugerida: Carpeta digital de cultivo / secci√≥n ‚ÄúSustrato y reactivaci√≥n‚Äù



## Archivo: Trade_Base_0.1.md
Contenido:
# üéØ Trade_Base_0.1 ‚Äì Plantilla Inicial de Registro de Trades (Fase Beta)

Esta plantilla representa la **primera impresi√≥n** del sistema de documentaci√≥n para operaciones dentro del fondo Alma M√≠a. Ser√° mejorada con el tiempo, pero refleja el inicio real de la fase Beta.


## üß† Justificaci√≥n T√©cnica

(An√°lisis t√©cnico, estructura del gr√°fico, razones de entrada, confirmaciones)


## üìà Resultado

- ¬øTP alcanzado? ¬øSL?
- ¬øSe cerr√≥ en Break Even?
- % de ganancia / p√©rdida


> Esta plantilla fue creada el 21 de abril de 2025. Es el primer paso real de una documentaci√≥n profesional dentro del fondo.


## Archivo: En_Desarrollo.md
Contenido:
# üß™ Estrategias en Desarrollo ‚Äì Alma M√≠a

## 1. Estrategia de Reingreso al Rango

- **Fase**: En observaci√≥n y an√°lisis
- **L√≥gica**:
  - 3 picos de divergencia
  - Manipulaci√≥n y reingreso r√°pido
- **Condiciones de entrada**:
  - Confirmaci√≥n del reingreso
  - SL en la mecha de manipulaci√≥n
  - TP1 en el 50% del rango

A√∫n no implementada de forma oficial. Bajo an√°lisis estructural y testforward.



## üìÇ Estructura Inicial del Proyecto

kotlin

CopiarEditar

`alma_cultivo/ ‚îÇ ‚îú‚îÄ‚îÄ data/ ‚îÇ   ‚îú‚îÄ‚îÄ registros_ambientales/ ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 001_flora_2025-04.csv ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ 002_vege_2025-04.csv ‚îÇ   ‚îî‚îÄ‚îÄ registros_riego/ ‚îÇ       ‚îî‚îÄ‚îÄ ... ‚îÇ ‚îú‚îÄ‚îÄ scripts/ ‚îÇ   ‚îú‚îÄ‚îÄ calcular_vpd.py ‚îÇ   ‚îú‚îÄ‚îÄ cargar_datos.py ‚îÇ   ‚îî‚îÄ‚îÄ generar_resumen.py ‚îÇ ‚îú‚îÄ‚îÄ models/ ‚îÇ   ‚îî‚îÄ‚îÄ ciclo.py ‚îÇ ‚îú‚îÄ‚îÄ outputs/ ‚îÇ   ‚îî‚îÄ‚îÄ resumenes/ ‚îÇ ‚îú‚îÄ‚îÄ app.py ‚îî‚îÄ‚îÄ README.md`


## üöÄ Mejoras Estrat√©gicas Futuras

### üîÑ 1. **Automatizaci√≥n v√≠a sensores (IoT)**

- Integrar lectura desde Govee, Xiaomi, o sensores v√≠a MQTT/API
    

### üß™ 2. **M√≥dulo de riego**

- EC in/out, pH, cantidad, fertilizantes, frecuencia
    

### üß† 3. **M√≥dulo de IA anal√≠tica**

- Detecci√≥n de anomal√≠as
    
- Sugerencias autom√°ticas ("tu VPD fue bajo 4 d√≠as, revisar ventilaci√≥n")
    
- Correlaci√≥n entre clima y resultados
    

### üì± 4. **Interfaz web con Streamlit o FastAPI**

- Carga de datos
    
- Panel de control
    
- Visores de hist√≥ricos y alertas
    

### üì§ 5. **Integraci√≥n con ALMA M√≠a**

- Exportaci√≥n de memoria diaria en formato ALMA JSON
    
- Conversaci√≥n directa con IA a partir del clima diario
    

## Archivo: configuracion_LMstudio.md
Contenido:
# ‚öôÔ∏è Configuraci√≥n LM Studio

Pasos para instalar, configurar y probar modelos de IA local.


## Archivo: ideas_IA.md
Contenido:
# üß† Prompts y Ideas √∫tiles con IA

Espacio para guardar fragmentos √∫tiles de interacci√≥n con ChatGPT, NotebookLM, DeepSeek u otros asistentes IA.

## üìå Ejemplo de prompt √∫til:
‚ÄúTe paso una nota con tareas incompletas de varios m√≥dulos. ¬øPod√©s detectar qu√© acciones est√°n duplicadas o podr√≠an unificarse?‚Äù

## ü§ñ Ideas espont√°neas:
- IA que lea bit√°coras y proponga res√∫menes semanales
- Crear comando `/resumen_diario` para que ChatGPT lea y resuma memoria


## Archivo: migrables_a_cuadernos.md
Contenido:
# üì§ Candidatos a Migraci√≥n a Cuadernos Oficiales

Ideas, tareas, fragmentos o conceptos que eventualmente deben pasar a:

- CUADERNOS/
- BIT√ÅCORA_CENTRAL/
- EMPRESAS/
- TRADING/
- CULTIVO/

## ‚úèÔ∏è Anotaciones
- [ ] Fragmento sobre estructura fiscal de ONG ya validado, deber√≠a pasar a carpeta 13CC.
- [ ] Protocolo de inicio de proyectos, listo para mover a `RECURSOS_Y_AYUDAS/`.


## Archivo: CHANGELOG_0.0.6.1.md
Contenido:
# üìù CHANGELOG ‚Äì ALMA LIBRE v0.0.6.1

## üìÖ Fecha de Lanzamiento: 2025-05-11

### üîß Correcciones Finales Aplicadas
- Revisi√≥n completa de archivos con referencias antiguas a `13_CANNABIS_CLUB`, estandarizados como `13CC`.
- Reemplazo de nombres de archivo con espacios por guiones bajos para unificaci√≥n de estilo y mayor compatibilidad.
- Validaci√≥n completa de duplicados y limpieza de restos residuales no estructurados.
- Confirmaci√≥n de ubicaci√≥n final de scripts auxiliares, reorganizados en `RECURSOS_Y_AYUDAS/Scripts_Utiles/`.

### ‚úÖ Consolidaciones Documentales
- Se gener√≥ diagn√≥stico completo (`diagnostico_v0.0.6.1.md`) validando que la estructura es estable, interoperable y legible para IA y humanos.
- Se cre√≥ plantilla semanal de seguimiento para registrar el estado t√©cnico y organizativo.
- Se gener√≥ resumen t√©cnico semanal para Semana 19 documentando esta transici√≥n final.

### üìÇ Gesti√≥n de Versionado
- Se actualiz√≥ `version.txt` a `v0.0.6.1`.
- Se archivaron `CHANGELOG_0.0.6.md` y `README_0.0.6.md` en `BACKUPS_HISTORICOS/changelogs/`.



