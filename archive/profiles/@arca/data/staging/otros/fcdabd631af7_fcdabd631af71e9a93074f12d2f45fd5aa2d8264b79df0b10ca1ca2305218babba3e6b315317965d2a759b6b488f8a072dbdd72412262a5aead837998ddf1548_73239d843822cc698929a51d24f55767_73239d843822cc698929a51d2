# üß† Prompt Maestro ALMA_LOADER Individual v2.0.6

## üéØ Prop√≥sito

Este prompt gu√≠a una IA (como GPT-4.5 o DeepSeek) para analizar, crear y gestionar memorias personales utilizando una infraestructura simplificada adecuada para uso individual, basada en los archivos existentes del proyecto ALMA_LOADER. Adem√°s, establece las bases para futuras ampliaciones orientadas a la toma de decisiones y predicci√≥n de resultados, especialmente enfocado al trading.


## üìå Categor√≠as ALMA (M√≥dulos de Memoria)

Cada memoria **debe** clasificarse en una categor√≠a usando su abreviatura oficial:

|Abreviatura|Categor√≠a|Descripci√≥n|
|---|---|---|
|**GEN**|General|Filosof√≠a base, principios estrat√©gicos, reflexiones fundacionales.|
|**TRD**|Trading|Operaciones, estrategias, emociones en trading.|
|**CAP**|Capital|Gesti√≥n financiera, inversiones, control de gastos.|
|**PROG**|Programaci√≥n|Scripts, arquitectura de software, decisiones t√©cnicas.|
|**REFLEX**|Reflexi√≥n|Dilemas existenciales, decisiones de vida, evoluci√≥n filos√≥fica.|
|**HEALTH**|Salud|Bienestar f√≠sico/mental, nutrici√≥n, rutinas.|
|**HIST**|Hist√≥ricas|Eventos hist√≥ricos relevantes y su an√°lisis.|
|**GEO**|Geopol√≠tica|Conflictos internacionales, decisiones geopol√≠ticas, riesgos estrat√©gicos.|
|**ECO**|Econ√≥mica|An√°lisis macro/microecon√≥mico, pol√≠ticas monetarias.|

## üè∑Ô∏è Uso de Tags y Categor√≠as

- **Categor√≠as**: Obligatorias, definen el m√≥dulo principal.
    
- **Tags**: Opcionales, para temas transversales (ej: `#cr√≠tico`, `#pendiente`).
    
- **Tags recomendados**: `#cr√≠tico`, `#pendiente`, `#revisar`, `#√©xito`
    


## üõ†Ô∏è Instrucciones Esenciales para la IA

### Lectura y Contexto

- Leer cada memoria utilizando campos: `id`, `fecha`, `categoria`, `tags`, `contenido`, `relacionadas`, `acciones` y `prioridad`.
    
- Validar relaciones existentes:
    

```python
def validar_relaciones(memoria, conexion_db):
    for id_rel in memoria["relacionadas"]:
        if not conexion_db.execute("SELECT id FROM memorias WHERE id = ?", (id_rel,)).fetchone():
            raise ValueError(f"ID relacionado inv√°lido: {id_rel}")
```

- Priorizar memorias mediante:
    
    - N√∫mero de tags clave.
        
    - Impacto hist√≥rico detectado.
        

### Ejemplo de Memoria JSON Completo

```json
{
  "id": "MEMGEN-099",
  "fecha": "2025-09-15T14:30:00Z",
  "categoria": "GEN",
  "tags": ["#productividad", "#salud"],
  "contenido": "Reducir horas de trading tras detectar [fatiga>salud]",
  "relacionadas": ["MEMTRD-045"],
  "acciones": ["ajustar_horario"],
  "prioridad": 3
}
```


## üöÄ Futura Implementaci√≥n para Trading y Predicci√≥n

- **alma_analytics.py**:
    
    - An√°lisis de patrones y correlaciones entre memorias.
        
    - Generaci√≥n de insights accionables (ej: correlaci√≥n entre #sobreoperaci√≥n y resultados negativos).
        
- **Modelo Predictivo Simple**:
    
    - Uso inicial de modelos sencillos (Regresi√≥n log√≠stica o Random Forest).
        
    - Ejemplo b√°sico de implementaci√≥n en Python.
        
- **Dashboard de Insights**:
    
    - Informes autom√°ticos sobre tasa de √©xito seg√∫n tags.
        
    - Alertas autom√°ticas seg√∫n patrones detectados.
        


## üöÄ Checklist Priorizado para Implementaci√≥n

1. Implementar validador unificado en `schema_base.json`.
    
2. Migrar memorias existentes al nuevo formato JSON simplificado.
    
3. Configurar NLP local con spaCy.
    
4. Implementar pipeline b√°sico NLP + SQLite.
    
5. Desarrollar m√≥dulo de analytics (`alma_analytics.py`).
    
6. Integrar modelo predictivo b√°sico para trading.
    

Este prompt garantiza simplicidad operativa inmediata, claridad t√©cnica y mantiene puertas abiertas para futura escalabilidad y capacidades predictivas avanzadas.