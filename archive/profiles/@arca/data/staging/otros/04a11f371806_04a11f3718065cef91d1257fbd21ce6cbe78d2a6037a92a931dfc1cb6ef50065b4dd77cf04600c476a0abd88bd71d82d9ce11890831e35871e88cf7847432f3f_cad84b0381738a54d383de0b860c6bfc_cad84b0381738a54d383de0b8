# üß† Prompt T√©cnico ALMA_LOADER v3.0
## A. Roadmap T√©cnico (por fases)
### Fase 1 ‚Äì Core estable
- Registro estructurado
- Validaci√≥n con JSON Schema
- Guardado en SQLite
- Res√∫menes diarios

### Fase 2 ‚Äì Sem√°ntico
- Embeddings de contenido + FAISS
- Router atencional
- An√°lisis predictivo simple
- Relaciones entre memorias

### Fase 3 ‚Äì Expansi√≥n
- Gamificaci√≥n, metas y refuerzos
- Sistema de reglas con acciones encadenadas
- Integraci√≥n con apps externas (API REST, Telegram, Shortcuts, voz)

## 1. Prop√≥sito del Sistema
Este prompt define todas las funciones t√©cnicas, estructuras internas y flujos de interacci√≥n del sistema ALMA_LOADER. Su objetivo es que cualquier modelo IA o humano t√©cnico pueda ejecutar, extender o auditar el sistema con claridad total. Consolidado a partir de versiones 2.1.1 y 2.2.0.
El Prompt T√©cnico: **‚Äúenfoque t√©cnico y operacional‚Äù**
Para la perspectiva emocional y filos√≥fica del sistema, ver el Pr√≥logo del Whitepaper.‚Äù
> üìò Para entender el prop√≥sito humano, los casos de uso y la visi√≥n general del sistema,  
> consult√° el [Whitepaper de ALMA_LOADER](3.0.0_Alma/cuadernos/programming/Alma_loader_dev/alma_loader_3.0/v3.0.3_docs/docs/archivos_fundamentales/whitepaper_ALMA_LOADER_v3.0.2.md)

## 2. M√≥dulos Funcionales
- `core_nl.py` ‚Äì Conversi√≥n NL ‚Üí JSON mediante reglas y patrones
- `validador.py` ‚Äì Validaci√≥n con `schema_base.json` y normalizaci√≥n de campos
- `sqlite_storage.py` ‚Äì Almacenamiento actual, optimizado con JSON1 para consultas internas
- `base_storage.py` ‚Äì Interfaz abstracta de almacenamiento compatible con m√∫ltiples motores
- `vector_storage.py` ‚Äì B√∫squeda sem√°ntica con embeddings v√≠a FAISS (alpha)
- `router_atencional.py` ‚Äì Enrutamiento seg√∫n intenci√≥n detectada (acci√≥n, reflexi√≥n, memoria)
- `resumenes.py` ‚Äì Generaci√≥n de resumen en Markdown diario o semanal
- `alma_analytics.py` ‚Äì Detecci√≥n de patrones, correlaciones y disparadores
- `gamificacion.py` ‚Äì Sistema de motivaci√≥n por puntos, niveles y h√°bitos (fase 3)

Los m√≥dulos de ALMA_LOADER est√°n dise√±ados para ser independientes y f√°cilmente intercambiables. A continuaci√≥n, se indican las principales tecnolog√≠as asociadas a cada uno:

### üõ†Ô∏è Tecnolog√≠as Utilizadas por M√≥dulo

| M√≥dulo                   | Tecnolog√≠a / Herramienta              |
|--------------------------|--------------------------------------|
| NLP / Parsing            | `regex`, `spaCy` (plan futuro)       |
| Vectorizaci√≥n sem√°ntica | `sentence-transformers`, `FAISS`     |
| Almacenamiento           | `SQLite` (con JSON1), `FAISS` (alpha)|
| Visualizaci√≥n / Testing  | `pytest`, `Mermaid` (para diagramas) |
| Relaciones sem√°nticas    | `dict`, relaciones cruzadas (`Neo4j`, `networkx` ‚Äì futuro) |


## 3. JSON Schema de Memoria
```json
{
  "id": "MEM-TRD-2025-XXXX",
  "categoria": "TRD",
  "contenido": "texto plano",
  "tags": ["#btc", "#reflexi√≥n"],
  "resumen_inferido": "...",
  "embedding_id": "EMB-abc123",
  "vector": [0.123, 0.987, ...],
  "intencion_detectada": "registro",
  "origen_input": "usuario",
  "relaciones": [
    { "tipo": "temporal", "target_id": "MEM-TRD-2025-XXXX", "peso": 0.8 }
  ]
}
```

> Este prompt t√©cnico permite que cualquier IA ejecute acciones correctas dentro de ALMA_LOADER sin ambig√ºedades ni errores de interpretaci√≥n. Complementa al whitepaper 3.0 (explicativo y estrat√©gico).

## 9. Testing y Validaciones

### üß™ Test Unitario ‚Äì Validaci√≥n de Memoria

Este test permite verificar que el esquema base JSON acepte estructuras v√°lidas y rechace incorrectas. Se usa como prueba m√≠nima para `validador.py`.

```python
def test_validar_memoria():
    memoria_valida = {
        "id": "MEM-TRD-2025-05-06-001",
        "categoria": "TRD",
        "contenido": "Hoy oper√© en BTC y me sent√≠ confiado",
        "tags": ["#btc", "#emoci√≥n:confianza"]
    }
    assert validar_esquema(memoria_valida) == True
```

Este tipo de test puede ejecutarse con `pytest`, `unittest`, o integrarse en un pipeline de verificaci√≥n previa al guardado.

### üß™ Test Unitario ‚Äì Vectorizaci√≥n Sem√°ntica

Este test valida que la funci√≥n de embeddings est√© operativa y produzca un vector v√°lido (usualmente de 384 o 768 dimensiones, seg√∫n modelo).

```python
def test_vectorizacion():
    texto = "Hoy oper√© bajo presi√≥n y me sent√≠ impulsivo."
    vector = generar_embedding(texto)
    
    assert isinstance(vector, list)
    assert len(vector) >= 128
    assert all(isinstance(x, float) for x in vector)
```

> Este test puede servir tanto para debug local como para verificar integridad del motor FAISS en producci√≥n.

## 10. Relaciones entre Memorias ‚Äì Grafo Dirigido

ALMA_LOADER permite establecer v√≠nculos expl√≠citos entre memorias usando el campo `relaciones`. Esto habilita un grafo dirigido de conocimiento interno.

Cada relaci√≥n incluye:
- `tipo`: naturaleza de la relaci√≥n (ej: `temporal`, `causal`, `emocional`, `refuerzo`)
- `target_id`: ID de la memoria relacionada
- `peso`: valor entre 0 y 1 que indica la fuerza del v√≠nculo

### üìÑ Ejemplo:
```json
"relaciones": [
  { "tipo": "causal", "target_id": "MEM-TRD-2025-05-04-002", "peso": 0.85 },
  { "tipo": "temporal", "target_id": "MEM-TRD-2025-05-03-001", "peso": 0.6 }
]
```

Este grafo puede analizarse para:
- Descubrir patrones encadenados (causas ‚Üí consecuencias)
- Medir recurrencia o acumulaci√≥n emocional
- Visualizar el recorrido mental de un tema

### üõ†Ô∏è Futuras integraciones:
- `networkx` (Python) para an√°lisis de grafos
- `Neo4j` para persistencia de relaciones complejas
- Mermaid o D3.js para visualizaci√≥n gr√°fica

> El objetivo es pasar de registros aislados a una red din√°mica de aprendizaje personal.

## üîå Integraci√≥n con M√≥dulos Externos

ALMA_LOADER est√° dise√±ado para operar como n√∫cleo de memoria e inteligencia sem√°ntica para m√∫ltiples aplicaciones.

Esta versi√≥n 3.0.2 introduce una estructura preparada para la futura integraci√≥n de m√≥dulos externos. Cada uno de estos m√≥dulos podr√° interactuar con el sistema a trav√©s de sus interfaces y funciones expuestas.

### Ejemplos de m√≥dulos potenciales (en evaluaci√≥n):
- üìä Analizador de Trading Emocional
- üå± Gestor Inteligente de Cultivo
- üìî Bit√°cora Personal Automatizada
- üß† Asistente de Decisiones Estrat√©gicas
- üí∞ Controlador de Fondos y Riesgo

> En futuras versiones, cada m√≥dulo tendr√° su documentaci√≥n (`README`) y prompt local, conectado a ALMA_LOADER como backend de memoria.

Esta secci√≥n ser√° actualizada a medida que se confirmen las integraciones.