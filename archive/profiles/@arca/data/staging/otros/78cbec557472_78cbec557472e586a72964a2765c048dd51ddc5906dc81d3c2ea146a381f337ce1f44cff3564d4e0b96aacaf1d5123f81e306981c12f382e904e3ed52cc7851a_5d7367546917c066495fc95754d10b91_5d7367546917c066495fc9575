[ARCHIVO HISTORICO - NO ACTUAL]
# üõ†Ô∏è ALMA LIBRE ‚Äì Prompt T√©cnico v0.0.6.1

## 1. Introducci√≥n T√©cnica

Este documento define las **instrucciones operativas, reglas internas y convenciones estructurales** del sistema ALMA LIBRE. Est√° dirigido a tres tipos de entidades:

- üß† Humanos t√©cnicos (desarrolladores, integradores, colaboradores).
- ü§ñ Inteligencias artificiales con funciones operativas (ej. asistentes en NotebookLM, agentes tipo ChatGPT, copilotos).
- üß© Sistemas externos que necesiten integrarse (scripts, APIs, extensiones, automatizaciones).

ALMA LIBRE no es una app tradicional ni un software cerrado: es un **entorno modular autosustentable**, estructurado como carpeta ra√≠z, cuadernos conectados, m√≥dulos IA, y memorias documentadas.  

Para que cualquier entidad (humana o artificial) pueda interactuar correctamente con este sistema, debe respetar:

- üìÇ La **estructura de carpetas y flujos** definida.
- üî† Las **convenciones de nombres, versiones y rutas**.
- üíæ El **formato de almacenamiento** de datos, memoria e ideas.
- üîÑ Los **procesos de actualizaci√≥n, exportaci√≥n y consolidaci√≥n**.

Este Prompt T√©cnico ser√° actualizado con cada nueva versi√≥n funcional del sistema. Cada m√≥dulo deber√° **leer esta versi√≥n del prompt antes de operar**, validando la compatibilidad entre flujos, herramientas y memorias.

> ‚öôÔ∏è Si una IA o humano no entiende este documento, no debe operar dentro del sistema ALMA LIBRE.

El sistema utiliza un esquema versionado y escalable (`0.0.6.X`) para registrar el progreso de desarrollo e integraci√≥n. Las funciones a√∫n no implementadas pueden estar referenciadas como `EN_DESARROLLO` o `RESERVADO_PARA_FASE_X`.

Este documento puede ser utilizado como:
- Prompt inicial para modelado de IA especializado.
- Base para configurar scripts que interact√∫en con carpetas y datos.
- Gu√≠a t√©cnica viva para mantener orden, integridad y evoluci√≥n controlada del sistema.


### üìÇ 2.1 Carpetas ra√≠z del sistema

Estas son las carpetas principales que deben existir dentro de `ALMA_LIBRE/`:

- `CUADERNOS/`: Cuadernos digitales por √°rea tem√°tica (uso activo y diario).
- `EMPRESAS/`: Documentaci√≥n formal/legal de proyectos y organizaciones.
- `MODULOS/`: Componentes de software, IA o automatizaci√≥n.
- `BITACORA_CENTRAL/`: Registro cronol√≥gico, res√∫menes, diagn√≥sticos.
- `RECURSOS_Y_AYUDAS/`: Plantillas, scripts, prompts, ideas reusables.
- `00_BACKUPS_HISTORICOS/`: Versiones comprimidas previas. No se debe usar para operaciones activas.

Cada subcarpeta dentro de estas secciones sigue convenciones espec√≠ficas descritas en el Glosario (`docs/Glosario_ALMA_LIBRE_0.0.6.md`).


### üß† 2.3 Estructura de versionado

- Cada avance significativo se registra como `vX.Y.Z`
- Cambios estructurales o conceptuales ‚Üí Z aumenta.
- Cambios menores en contenido t√©cnico ‚Üí `.Z+1` (ej. 0.0.6.1 ‚Üí 0.0.6.2)
- Backups hist√≥ricos comprimidos se almacenan en `00_BACKUPS_HISTORICOS/`
- Diagn√≥sticos asociados a cada versi√≥n se guardan en `BITACORA_CENTRAL/DIAGNOSTICOS/`


### ‚öôÔ∏è 2.5 Estructura de m√≥dulos (`MODULOS/`)

Cada m√≥dulo debe tener su propia carpeta (ej. `Alma_Loader/`) con esta estructura:

- `/src/`: C√≥digo fuente y archivos operativos.
- `/docs/`: Instrucciones, changelogs, dise√±o t√©cnico.
- `/tests/`: Pruebas funcionales y validaciones (opcional).
- `/config/`: Configuraciones espec√≠ficas del m√≥dulo (si aplica).

El m√≥dulo no debe asumir rutas absolutas fuera de su estructura: toda integraci√≥n debe pasar por inputs definidos o configuraci√≥n.


### üìú 2.7 Documentaci√≥n requerida por carpeta

Toda subcarpeta operativa debe incluir:

- `README.md`: Descripci√≥n del prop√≥sito y contenido.
- `CHANGELOG.md`: Si aplica, para m√≥dulos o proyectos estructurados.
- Archivos auxiliares (`version.txt`, `estructura.md`, etc.) si son necesarios para automatizaci√≥n o revisi√≥n.

## 3. M√≥dulos del Sistema

Los m√≥dulos son unidades funcionales dentro del sistema ALMA LIBRE que permiten automatizar tareas, analizar datos, gestionar memorias o ejecutar flujos. Cada uno debe estar completamente **documentado, versionado y aislado**, de modo que pueda operar sin generar efectos colaterales fuera de su carpeta.


### üîç 3.2 Descripci√≥n de m√≥dulos activos

#### üîπ `Alma_Loader`
- **Funci√≥n:** Carga, vectoriza, organiza y enlaza memorias sem√°nticas para uso por humanos e IAs.
- **Estado actual:** Estable (v3.0.3) ‚Äì Integrado con SQLite + JSON + posibles extensiones con FAISS.
- **Input esperado:** archivos `.md`, `.json` o bases de datos (`memorias.db`)
- **Output:** Res√∫menes vectorizados, referencias cruzadas, IDs √∫nicos, logs de carga.

#### üîπ `automatizacion_vpd`
- **Funci√≥n:** Recolecta, limpia y analiza datos ambientales de cultivo.
- **Estado:** En fase inicial ‚Äì estructura lista para ingesti√≥n de datos diarios.
- **Output:** Archivos `.csv`, reportes semanales, alarmas por condiciones an√≥malas.

#### üîπ `exploraciones`
- **Funci√≥n:** Espacio de prueba para nuevos scripts, IA o integraciones experimentales.
- **Nota:** No debe usarse en producci√≥n. Su contenido puede migrar a m√≥dulos formales si se valida.


### üîÑ 3.4 Inputs y Outputs esperados

Cada m√≥dulo debe definir:
- Formato exacto de entrada: `.md`, `.json`, `.sqlite`, `.csv`, etc.
- Esquema de output: nombre de archivo, carpeta destino, log de procesamiento.

Ejemplo ‚Äì `Alma_Loader`:
```yaml
input:
  - ruta: CUADERNOS/programacion.cu/archivos/
    tipo: .md
output:
  - ruta: MODULOS/Alma_Loader/output/vector_db.json
    log: MODULOS/Alma_Loader/logs/registro_de_ingesta.txt
```


Este punto garantiza que cualquier nuevo componente incorporado al sistema pueda operar con precisi√≥n, sin generar ambig√ºedades, errores de contexto ni colisiones en nombres o rutas. Cualquier nuevo m√≥dulo deber√° referenciar este documento y validar su estructura antes de escalar.


### üìÇ 4.1 Ubicaci√≥n de las memorias

Las memorias se almacenan y organizan dentro de:

- `BITACORA_CENTRAL/RESUMENES/`: estructura cronol√≥gica por trimestre, semana y d√≠a.
- `BITACORA_CENTRAL/DIAGNOSTICOS/`: evaluaciones t√©cnicas por versi√≥n (`diagnostico_v0.0.6.2.md`)
- `MODULOS/Alma_Loader/`: sistema encargado de ingesta, vectorizaci√≥n y clasificaci√≥n de memorias.

Otros cuadernos pueden tener memorias locales (e.g. `trading.cu/resumenes/`), pero toda consolidaci√≥n se realiza desde BIT√ÅCORA o Alma_Loader.


### üß¨ 4.3 Vectorizaci√≥n e ingesti√≥n

El m√≥dulo `Alma_Loader` realiza la vectorizaci√≥n de los documentos de memoria para permitir b√∫squedas sem√°nticas. Para ello:

- Extrae los textos de los archivos `.md` o `.txt`
- Los asocia a una ID √∫nica (`mem_2025_05_12_diario`)
- Los clasifica por tipo, carpeta de origen, fecha y palabras clave
- Opcional: exporta a `.json` o base `.sqlite`


### üîó 4.5 Relaciones entre memorias

Cada memoria puede referenciar otras usando:

- Enlaces relativos: `../diagnosticos/diagnostico_0.0.6.2.md`
- Menciones sem√°nticas: `#sistema_ia`, `#trading`, `#cultivo`
- Tags YAML estructurados

Estas relaciones pueden ser procesadas por m√≥dulos IA para crear mapas de conocimiento o sugerencias de acci√≥n.


Este sistema permite que ALMA LIBRE evolucione **con historia, contexto y aprendizaje real**, sin depender exclusivamente de la memoria ef√≠mera de un asistente externo. Cada memoria cuenta. Cada entrada moldea el sistema.


### üß† 5.1 Flujo Diario de Registro y Consolidaci√≥n

```text
Usuario ‚Üí CUADERNOS/*.cu/docs/ ‚Üí BITACORA_CENTRAL/RESUMENES/
```

- Las ideas o tareas se registran en `CUADERNOS/*/docs/*.md`
- Se copian o vinculan a `BITACORA_CENTRAL/RESUMENES/SXX/`
- Alma_Loader puede luego procesarlas para vectorizaci√≥n


### üîÅ 5.3 Ingesta y Vectorizaci√≥n de Memorias (Alma_Loader)

```text
CUADERNOS/*.cu/docs/*.md ‚Üí MODULOS/Alma_Loader/ ‚Üí vector_db.json + versi√≥n
```

- Archivos .md son procesados y vectorizados
- Output contiene `version_modelo`, fecha y estructura clara
- Vectores antiguos se archivan en `historic_vectors/`


### üí¨ 5.5 CLI Assistant (MVP Experimental)

```text
Terminal ‚Üí CLI ‚Üí Alma_Loader + BITACORA ‚Üí Respuesta
```

- Comandos: `alma buscar`, `alma resumir`, `alma diagnosticar`
- Opera en solo lectura sobre memoria consolidada
- Logs opcionales en `BITACORA_CENTRAL/LOGS_CLI/`


### üîê 5.7 Acceso a Recursos Compartidos

```text
MODULOS/ o CUADERNOS/ ‚Üí RECURSOS_Y_AYUDAS/ (solo lectura)
```

- Contiene plantillas, scripts base, prompts t√©cnicos
- No puede ser modificado directamente sin control de versi√≥n


### üîó 5.9 üîÑ Diagrama Global de Flujos ‚Äì ALMA LIBRE v0.0.6.2 (Extendido)

```mermaid
graph TD
  A[Usuario/IA] --> B[CUADERNOS]
  B --> C[BITACORA_CENTRAL]
  B --> D[MODULOS/Alma_Loader]
  D --> E[vector_db.json]
  E -->|versionado| L[historic_vectors/]
  C --> F[DIAGNOSTICOS]
  B --> G[EMPRESAS]
  G --> H[Documentos Formales]
  E --> I[CLI Assistant]
  F --> I
  C --> I
  D --> J[validador_estructura.py]
  J --> F
  I -->|usa| K[RECURSOS_Y_AYUDAS/plantillas/log_template.yaml]
  M[automatizacion_vpd] --> N[reporte_estado.py]
  D --> N
  I --> N
  N --> O[BITACORA/LOGS_MODULOS/]
  P[sync_bitacora.py]
  P --> B
  P --> C
  P --> Q[Verificaci√≥n por hash]
```


## üìå Recomendaciones para implementaci√≥n

- **Incluir este diagrama directamente en el Prompt T√©cnico y el Whitepaper.**
- **Marcar conexiones cr√≠ticas con anotaciones o estilos de color cuando sea posible.**
- **Documentar funciones clave en archivos individuales (`README.md` por m√≥dulo).**
- **Trazabilidad completa en el changelog al aplicar cada uno.**

Este diagrama extendido permite que cualquier asistente de IA o desarrollador humano entienda la arquitectura completa sin leer cada m√≥dulo por separado.

Este bloque puede ser exportado o reutilizado en los manuales de uso o como referencia en otros prompts inteligentes.
## 6. Normas de Versionado

El sistema ALMA LIBRE utiliza una convenci√≥n estricta de versionado para organizar su evoluci√≥n. Cada cambio, mejora o correcci√≥n debe estar asociado a una versi√≥n definida bajo el esquema:

```
vX.Y.Z
```

- **X** = Cambio mayor o ruptura del modelo estructural.
- **Y** = Nuevo m√≥dulo, flujo o funci√≥n agregada al sistema.
- **Z** = Correcci√≥n, ajuste, mejora incremental sin impacto estructural.


### üìÇ 6.2 Ubicaci√≥n de versiones

Cada versi√≥n completa del sistema debe ser guardada comprimida en:

```
00_BACKUPS_HISTORICOS/v0.X.Y.zip
```

Ese zip debe contener:
- Toda la estructura de carpetas en ese estado.
- Archivos internos `version.txt`, `README.md`, `CHANGELOG.md` con fecha y detalles.
- Diagn√≥stico correspondiente en `BITACORA_CENTRAL/DIAGNOSTICOS/`


### üîÅ 6.4 Flujo de actualizaci√≥n

1. Se realiza un diagn√≥stico.
2. Se aplica una checklist de correcciones.
3. Se actualizan glosario y documentaci√≥n si aplica.
4. Se actualiza el changelog.
5. Se guarda backup `.zip`.
6. Se actualiza `version.txt` y se genera nuevo resumen t√©cnico.

Ninguna versi√≥n es v√°lida si no se cumple este ciclo completo.


### üß† 6.6 Versi√≥n como estado de conciencia

Cada versi√≥n de ALMA LIBRE representa un ‚Äúestado mental t√©cnico‚Äù del sistema. Esto permite a cualquier persona o IA:

- Saber en qu√© estado est√° el sistema en ese momento.
- Trabajar sobre esa versi√≥n sin tener que revisar toda la historia.
- Comprender el progreso en etapas coherentes.

Este sistema de versionado es lo que permite que ALMA evolucione sin perderse en el caos.


### ü§ñ 7.1 Comportamiento esperado de asistentes IA

Una IA que opera dentro de ALMA LIBRE debe cumplir con los siguientes principios:

- Nunca modificar archivos sin aprobaci√≥n expl√≠cita.
- Sugerir rutas, no ejecutarlas.
- Usar lenguaje claro y directo en respuestas.
- Basarse en contexto activo (`glosario`, `changelog`, `bit√°cora`, etc.).
- Evitar respuestas redundantes o sin referencia a datos reales.
- Priorizar trazabilidad: toda acci√≥n debe quedar registrada.


### üß† 7.3 Interacci√≥n guiada y memoria contextual

Una IA debe:

- Tomar contexto desde documentos recientes (√∫ltimo resumen diario o semanal).
- Proponer sin alterar: generar nuevas ideas en `ideas_y_esquemas/`, no sobreescribir contenidos clave.
- Reconocer el tipo de tarea: ¬øse est√° redactando, corrigiendo, automatizando o diagnosticando?

Cada entrada o acci√≥n puede contener metadatos de gu√≠a, por ejemplo:

```yaml
asistente: notebooklm
contexto: diagnostico
version: 0.0.6.2
permiso_modificacion: false
```


### üí° 7.5 Integraciones externas

Cuando se utilicen herramientas externas como:

- **NotebookLM**: debe seguir instrucciones exactas de los documentos marcados como gu√≠a.
- **DeepSeek**: debe operar √∫nicamente sobre m√≥dulos en `MODULOS/` y devolver salidas a `src/` o `output/`.
- **Copilotos IA**: deben integrarse sin generar duplicados, sin alterar carpetas fuera del m√≥dulo.


Esta interfaz define los **l√≠mites seguros y productivos** de la colaboraci√≥n humano‚ÄìIA. Toda inteligencia artificial que opere dentro de ALMA LIBRE debe leer, entender y respetar esta secci√≥n antes de ejecutar cualquier acci√≥n significativa.


### üöÄ 8.1 Nuevos m√≥dulos

Para incorporar un nuevo m√≥dulo, se debe seguir el protocolo base:

1. Crear carpeta en `MODULOS/NOMBRE_DEL_MODULO/`
2. Incluir:
   - `/src/`: c√≥digo principal
   - `/docs/`: documentaci√≥n y changelog
   - `/config/` y `/tests/` si corresponde
3. Definir su input/output esperados.
4. Registrarlo en el `prompt_tecnico_vX.Y.Z.md` y en el changelog.


### üìä 8.3 Integraci√≥n con APIs externas

Los futuros m√≥dulos podr√°n:

- Conectarse a servicios web (clima, finanzas, bases legales)
- Usar APIs de IA externas (GPT, Cohere, Perplexity)
- Sincronizar tareas con Notion, Obsidian, Google Drive, etc.

Requisitos:
- Documentar dependencias y configuraci√≥n
- No almacenar credenciales dentro del repositorio
- Validar integridad de los datos ingresados


### üß¨ 8.5 Nuevos formatos de memoria

Adem√°s del `.md`, se planea aceptar:

- `.json` estructurado para ingesti√≥n directa
- `.sqlite` como base indexada de alta velocidad
- `.csv` para procesamiento num√©rico

Estos formatos ser√°n usados para an√°lisis, dashboards, vectorizaci√≥n o visualizaci√≥n avanzada.


Estas extensiones no deben considerarse futuras promesas: son caminos activos de crecimiento. Cada una puede escalar por fases, y deben ser documentadas, testeadas y versionadas dentro del marco operativo de ALMA LIBRE.


### üî§ 9.1 Convenciones de formato

- Carpetas y archivos en min√∫sculas y guiones bajos (`trading.cu`, `resumen_diario.md`)
- Versiones: `vX.Y.Z` (ej: `v0.0.6.1`)
- Archivos `.md` para entradas humanas, `.json` o `.yaml` para formatos t√©cnicos
- `README.md`, `CHANGELOG.md` y `version.txt` obligatorios por versi√≥n o m√≥dulo


### üõ†Ô∏è 9.3 Utilidades recomendadas

- `validador_estructura.py`: analiza inconsistencias en carpetas y nombres
- `backup_automatico.sh`: comprime estructura por versi√≥n
- `generador_changelog.py`: automatiza el changelog desde checklists
- `alma_loader.py`: ingesta y vectorizaci√≥n de memorias (sem√°ntica y cronol√≥gica)


### üß† 9.5 Uso combinado con IA

Cualquier IA operando sobre el sistema debe iniciar consultando:

- `version.txt`
- `glosario_ALMA_LIBRE_0.0.6.md`
- `prompt_tecnico_0.0.6.1.md`
- √öltimo resumen en `BITACORA_CENTRAL/RESUMENES/`

Este acceso le dar√° contexto operativo, sem√°ntico y cronol√≥gico.

