```python
import os
import base64
import logging
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from cryptography.hazmat.backends import default_backend
from typing import Tuple

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

class LogCrypto:
    def __init__(self, algorithm: str = 'AES-256-GCM'):
        self.algorithm = algorithm

    def generar_clave(self, password: bytes = None, salt: bytes = None) -> Tuple[bytes, bytes]:
        if password is None:
            password = os.urandom(16)
        if salt is None:
            salt = os.urandom(16)

        kdf = Scrypt(
            salt=salt,
            length=32,
            n=2**14,
            r=8,
            p=1,
            backend=default_backend()
        )
        key = kdf.derive(password)
        return key, salt

    def _get_cipher(self, key: bytes):
        if self.algorithm == 'AES-256-GCM':
            return AESGCM(key)
        else:
            raise ValueError("Algoritmo no soportado")

    def encrypt_log(self, input_path: str, output_path: str, key: bytes, salt: bytes):
        with open(input_path, 'rb') as f:
            data = f.read()

        cipher = self._get_cipher(key)
        nonce = os.urandom(12)
        encrypted = cipher.encrypt(nonce, data, None)

        with open(output_path, 'wb') as f:
            f.write(salt + nonce + encrypted)

        logger.debug(f"Log cifrado: {input_path} -> {output_path}")

    def decrypt_log(self, input_path: str, output_path: str, key: bytes):
        with open(input_path, 'rb') as f_in:
            data = f_in.read()

        offset = 0
        if len(data) > 40:
            salt = data[:16]
            offset = 16
        else:
            salt = None

        nonce_len = 12 if self.algorithm == 'AES-256-GCM' else 24
        nonce = data[offset:offset + nonce_len]
        ciphertext = data[offset + nonce_len:]

        cipher = self._get_cipher(key)
        try:
            decrypted_data = cipher.decrypt(nonce, ciphertext, None)
        except Exception as e:
            logger.error(f"Error de descifrado: {str(e)}")
            raise

        with open(output_path, 'wb') as f_out:
            f_out.write(decrypted_data)

        logger.debug(f"Log descifrado: {input_path} -> {output_path}")
```