# üß† Diagn√≥stico Base ‚Äì Auditor√≠a de Limpieza Sem√°ntica en ALMA_RESIST

**Fecha:** 2025-06-01  
**Responsable IA:** auditor_textos_ALMA  
**Responsable humano:** Santi / p√°jaro  
**M√≥dulo propuesto:** alma-cli/auditor_textos/


## üîç Diagn√≥stico Inicial

### ‚úîÔ∏è Fortalezas

- Uso consistente de metodolog√≠as con buena documentaci√≥n (`estructura_modular`, `snapshots_formales`, `sprints_v2`, etc.)
- Arquitectura modular clara hasta L4
- Cultura fuerte de versionado (`versionado_backups`, `metadatos YAML`)
- Ciclo de trabajo trazado con sprints y ADR

### ‚ùå Debilidades

- A√∫n no hay un sistema automatizado de validaci√≥n sem√°ntica
- Algunas carpetas/m√≥dulos carecen de `README.md`, `metadatos.yaml` o `dev_journal.md`
- No se especifica a√∫n una pol√≠tica de nomenclatura universal de tags
- No hay todav√≠a un validador sem√°ntico que alerte sobre errores de frontmatter, etiquetas repetidas o links rotos


## üìé Reglas m√≠nimas por archivo

- YAML v√°lido, con `module`, `type`, `status`, `tags`, `linked_to`, etc.
- Sin encabezados duplicados
- Etiquetas bien declaradas en YAML
- T√≠tulos √∫nicos por documento (solo un `#`)
- Documentaci√≥n cruzada (`linked_to`)


## ‚úÖ Recomendaciones de avance

1. Crear m√≥dulo `alma-cli/auditor_textos`
2. Definir `reglas.json` con criterios de validaci√≥n
3. Cargar taxonom√≠a oficial de tags
4. Crear script `validate_yaml.py`
5. Comenzar auditor√≠a progresiva por `metodologias/` y `docs/`
6. Proyectar IA futura para `alma optimize file.md`

