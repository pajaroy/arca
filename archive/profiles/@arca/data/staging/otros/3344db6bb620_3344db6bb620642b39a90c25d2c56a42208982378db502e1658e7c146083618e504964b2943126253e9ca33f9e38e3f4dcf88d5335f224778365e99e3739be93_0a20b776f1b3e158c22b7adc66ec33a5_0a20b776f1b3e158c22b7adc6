# üß† Prompt T√©cnico ‚Äì alma-cli v0.0.0.4 (ALMA_RESIST)

## üìå Contexto general

Estamos desarrollando un CLI modular en Python para **gestionar, auditar y corregir** documentaci√≥n t√©cnica en formato Markdown que contiene **metadatos en bloques YAML** al inicio (`---`). Esta documentaci√≥n pertenece al sistema ALMA_RESIST.


## ‚öôÔ∏è Subcomandos a integrar

| Comando               | Descripci√≥n                                                                 |
|-----------------------|-----------------------------------------------------------------------------|
| `validate`            | Ejecuta validaci√≥n completa de YAML en todos los `.md` (basado en `validate_docs.py`) |
| `fix-metadata`        | Corrige y completa campos YAML (`module`, `type`, `status`, `created`) usando l√≥gica est√°ndar |
| `enforce-snakecase`   | Normaliza `module:` a snake_case (reusa `force_snake_case_modules.py`)     |
| `add-linked-minimo`   | Agrega campo `linked_to` cuando el `type` es `core` (usa `add_linked_to_minimo.py`) |
| `batch-update`        | Modifica campos YAML en lote, con filtros por tipo y condiciones (`missing-only`) |
| `audit`               | Ejecuta auditor√≠a sem√°ntica de campos (`domain`, `linked_to`) con reglas externas |
| `report`              | Genera informe Markdown/JSON de errores, advertencias y acciones sugeridas |
| `auto-fix`            | Corre `validate`, `fix-metadata`, `enforce-snakecase` y `add-linked-minimo` en orden autom√°tico con backup |


## üìÑ Campos YAML a validar

Todos los `.md` deben iniciar con un bloque como este:

```yaml
```


## üõ† Consideraciones t√©cnicas

- Debe usar `argparse`
- Debe incluir manejo de `--verbose`, `--dry-run`, `--backup`
- Debe ser compatible con Python 3.8+
- Modular, cada subcomando es un m√©todo separado
- Manejo de errores limpio y expl√≠cito
- Permitir salida en Markdown o JSON con `--output-format`
- Generar backups autom√°ticos en `logs/backups/` si se modifica algo



# üìé Ap√©ndice ‚Äì Mejoras Propuestas para `alma-cli v0.0.0.4`

Este documento resume las sugerencias de mejora y su justificaci√≥n para implementar en la versi√≥n `v0.0.0.4` de `alma-cli.py`.


## 2. Ampliaci√≥n de Subcomandos

### ‚ûï Nuevo Subcomando: `init`
| Comando | Descripci√≥n |
|---------|-------------|
| `init`  | Crea la estructura de directorios base (`/docs`, `/scripts`, `/logs`) si no existen |

**Justificaci√≥n:** Facilita la inicializaci√≥n del proyecto para nuevos usuarios, evitando errores por falta de directorios.


## 3. Manejo de Casos Extremos

### ‚ûï Nuevo Subcomando: `add-yaml-block`
| Comando           | Descripci√≥n |
|-------------------|-------------|
| `add-yaml-block`  | Agrega un bloque YAML b√°sico a archivos Markdown que carecen de √©l |

**Justificaci√≥n:** Resuelve casos donde los archivos no tienen metadatos, asegurando compatibilidad con el resto de comandos.


## 5. Personalizaci√≥n de Reglas

### ‚úçÔ∏è Mejora en `validate`

A√±adir opci√≥n `--config <ruta>` para cargar reglas de validaci√≥n personalizadas desde un archivo YAML/JSON.

```bash
python alma-cli.py validate --config custom_rules.yaml
```

**Justificaci√≥n:** Permite adaptar el CLI a proyectos con requisitos espec√≠ficos sin modificar el c√≥digo base.


## 7. Manejo de Errores Expl√≠cito

### ‚ûï Secci√≥n: üö® Errores Comunes

```markdown
## üö® Errores Comunes
- Si un archivo no tiene bloque YAML: se sugiere usar `add-yaml-block`.
- Si `--dry-run` est√° activo: se muestra un resumen de cambios sin aplicarlos.
- Permisos denegados: se registra el error en `/logs/errors.log`.
```

**Justificaci√≥n:** Gu√≠a al usuario en la resoluci√≥n de problemas frecuentes.

