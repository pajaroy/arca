# ðŸ§  MÃ³dulos Core â€“ ALMA_RESIST

Esta carpeta contiene los scripts fundamentales del sistema. Todos son compatibles con terminal y estÃ¡n preparados para correr en entornos offline con CPU limitados.

---

## ðŸ“„ `log_writer.py`

### FunciÃ³n:
Registra eventos en archivos `.jsonl` con formato estructurado.

### CaracterÃ­sticas:
- Formato JSONL (una lÃ­nea por evento)
- ValidaciÃ³n de tipos de entrada
- NormalizaciÃ³n de eventos a INFO/WARNING/ERROR
- Incluye timestamp UTC, hostname, PID, plataforma
- Escritura atÃ³mica (`.tmp` + `os.replace`) para evitar corrupciÃ³n
- Manejo de errores defensivo: warnings para problemas menores, excepciones para fallos crÃ­ticos

### Ejemplo de uso:

```python
from log_writer import log_event, write_log

evento = log_event("INFO", "InicializaciÃ³n completa", "init")
ok = write_log(evento)

if not ok:
    print("Error al registrar el log")
```

### Archivos relacionados:
- `logs/alma_YYYY-MM-DD.log`

---


---

## ðŸ’» `cli.py`

### FunciÃ³n:
ActÃºa como la interfaz de lÃ­nea de comandos del sistema ALMA_RESIST. Permite interactuar directamente con el sistema desde terminal en modo shell.

### CaracterÃ­sticas:
- Prompt interactivo (`alma>`)
- Comandos modulares cargados dinÃ¡micamente desde `commands/`
- Manejo de errores para comandos invÃ¡lidos
- FÃ¡cilmente extensible: para agregar un comando solo se necesita un archivo nuevo en `commands/`

### Comandos actuales:
- `!ayuda`: muestra los comandos disponibles
- `!salir`: termina la sesiÃ³n CLI
- `!cargar_modelo`: simula la carga de un modelo IA
- `!resumir "texto"`: simula el resumen de un texto
- `!buscar_memoria "tag"`: simula bÃºsqueda por etiqueta

### Ejemplo de uso:
```bash
python core/cli.py
```

```
alma> !ayuda
Comandos disponibles:
  !ayuda
  !salir
  !cargar_modelo
  !resumir "texto"
  !buscar_memoria "tag"
```

### Archivos relacionados:
- `commands/ayuda.py`, `salir.py`, `resumir.py`, etc.


## ðŸ”’ Permisos
- Carpeta `logs/` se crea con `chmod 700`
- Compatible con discos de solo escritura (modo read-only fallback: TODO)

---

## ðŸ§© Siguientes mÃ³dulos a desarrollar

- `log_crypto.py` â†’ cifrado de logs
- `log_integrity.py` â†’ validaciÃ³n SHA3
