---
module: prompts/test_context_tracker_prompt
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# ‚úÖ Solicitud de Test ‚Äì `test_context_tracker.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `context_tracker.py`, que se encarga de registrar interacciones (prompt/respuesta/metadata), recuperarlas y borrarlas de forma segura.

---

## üìò M√©todos clave a testear

- `track_interaction(prompt: str, response: str, metadata: dict) -> dict`
- `get_history(n: int = 10) -> list[dict]`
- `clear_history() -> None`
- `__len__()` (cantidad total de interacciones)

---

## üß™ Casos de prueba sugeridos

| Caso                                           | Resultado esperado                                     |
|------------------------------------------------|--------------------------------------------------------|
| Registro v√°lido con prompt, respuesta y metadata | Se guarda correctamente, archivo `.jsonl` actualizado |
| Recuperaci√≥n de historial con `get_history(n)` | Devuelve los √∫ltimos `n` registros                     |
| Borrado del historial                          | Archivo eliminado, nuevo archivo creado vac√≠o         |
| Manejo de l√≠neas corruptas                     | Se salta la l√≠nea, logging indica el error            |
| Validaci√≥n contra schema (falta campo)         | No registra interacci√≥n inv√°lida                      |
| Verificaci√≥n de longitud con `len(tracker)`    | Coincide con n√∫mero real de l√≠neas en archivo         |

---

## üîß Consideraciones t√©cnicas

- Usar `tmp_path` para almacenar el archivo `context_history.jsonl`
- No usar el archivo real del sistema (aislar entorno de pruebas)
- Testear tambi√©n logs de error cuando falle la validaci√≥n
- Asegurarse de que el archivo creado tenga permisos 600 (si se desea chequear seguridad)

---

## üìÇ Archivos relacionados

- `context_tracker.py` (m√≥dulo principal)
- `schema_prompt.json` y `schema_respuesta.json` (validados indirectamente)

---

¬øPod√©s generar el archivo `test_context_tracker.py` cubriendo todos estos casos con `pytest` y estructura modular?
