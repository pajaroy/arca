---
module: prompts/context_tracker_request
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# ðŸ§  Solicitud de ImplementaciÃ³n â€“ `context_tracker.py` â€“ Sprint 2.6 â€“ ALMA_RESIST

## ðŸŽ¯ Objetivo

Implementar el mÃ³dulo `context_tracker.py`, encargado de registrar y mantener un historial contextual estructurado de interacciones en el servidor ALMA_RESIST. Este historial serÃ¡ clave para futuras reflexiones automÃ¡ticas, reconstrucciÃ³n de diÃ¡logos y razonamiento semÃ¡ntico.

---

## ðŸ“˜ Requisitos

- El archivo se ubicarÃ¡ en: `core/llm_server/integration/context_tracker.py`

### Clase: `ContextTracker`

- MÃ©todos requeridos:
  - `track_interaction(prompt: str, response: str, metadata: dict) -> dict`  
    Registra una interacciÃ³n Ãºnica y devuelve el objeto almacenado.
  - `get_history(n: int = 10) -> list[dict]`  
    Recupera las Ãºltimas `n` interacciones almacenadas.
  - `clear_history() -> None`  
    Elimina todo el historial actual.

### Especificaciones:
- Almacenar interacciones como objetos `{ prompt, response, metadata, timestamp }`
- Guardar todo en un archivo local `context_history.jsonl` (un JSON por lÃ­nea)
- Validar estructura antes de guardar
- Agregar timestamps ISO 8601 automÃ¡ticamente
- Soportar recuperaciÃ³n eficiente y segura del historial
- Preparado para extender a almacenamiento cifrado o base de datos mÃ¡s adelante

---

## ðŸ§ª Ejemplo de uso

```python
from integration.context_tracker import ContextTracker

tracker = ContextTracker()
tracker.track_interaction("Â¿QuÃ© es la resiliencia?", "La capacidad de...", {"modelo": "mistral"})
historial = tracker.get_history(5)
```

---

## ðŸ“Ž Contexto

- Sprint: 2.6 â€“ LLM Server
- Complementa: `log_writer`, `transport_layer`, `memory_graph`
- Fundacional para el razonamiento a largo plazo en ALMA

