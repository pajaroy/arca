### 2. **Exclusi√≥n ampliable**
- Permitir que el usuario agregue exclusiones espec√≠ficas con un archivo `.fix_metadata_ignore` (sintaxis tipo `.gitignore`).

### 3. **Flujo seguro**
- **Nunca debe auto-modificarse** ni modificar el propio script/carpeta.
- Debe siempre crear **backup previo** a modificar cualquier archivo.
- **Modo dry-run**: simular cambios sin modificar archivos.
- **Logs estructurados** por acci√≥n: cambios, errores, archivos saltados, backups.
- **No debe borrar ni truncar archivos aunque detecte metadata inv√°lida**: siempre loguear, nunca borrar.

### 4. **Metadata universal a aplicar**
El bloque YAML debe tener, como m√≠nimo, los siguientes campos (con comentarios y validaciones):

```yaml
```
5. Caracter√≠sticas del script

    Recorrer en profundidad solo las carpetas relevantes (ver exclusiones arriba).

    Verificar y corregir el bloque YAML, completando campos faltantes (con valores razonables por defecto/documentados).

    Calcular y actualizar hash_integridad SHA256 del contenido excluyendo este campo.

    Logs de cambios, backups realizados, errores detectados.

    Reporte resumen al finalizar.

    F√°cilmente replicable: al copiar a cualquier m√≥dulo, funciona sin cambios salvo rutas.

    Par√°metro de carpeta ra√≠z opcional, autodetecci√≥n de entorno ALMA_RESIST.

    Dejar configuraciones claras y comentarios para personalizaci√≥n.

    Modular, con funciones separadas y comentarios abundantes.

6. Pr√°cticas pro

    El script nunca debe dejar archivos corruptos ni en estado incompleto (rollback autom√°tico si hay error en escritura).

    Soporte para ampliar lista de exclusi√≥n por par√°metro CLI.

    El log puede ser en .jsonl o .yaml para facilitar parsing IA/auditor√≠a.

    Resumen final: archivos procesados, modificados, saltados, errores, backups hechos, dry-run vs real.

Extras

    Programar en Python 3, preferentemente solo usando dependencias est√°ndar (salvo PyYAML).

    Dejar toda la l√≥gica en un solo archivo principal.

    Dejar la referencia a este prompt/IDEA en el header del script generado.

    El script debe estar listo para ejecutarse desde cualquier carpeta core/scripts/fix_metadata/.

Referencia oficial:
[IDEA_2025-06-06_01] ‚Äì ALMA_RESIST | Santiago Calvo | Centralesis v2.3
Instrucciones finales

    Cumpl√≠ TODOS los criterios arriba detallados.

    Si no pod√©s hacer algo exactamente igual, aclaralo en comentarios y dej√° el punto listo para ajustar manualmente.

    El script debe ser ‚Äúproduction ready‚Äù para ser usado y adaptado en cualquier otro m√≥dulo del sistema ALMA_RESIST.
    ---

## üü¢ **Archivo descargable**

[Descargar prompt_fix_metadata_v2.md](sandbox:/mnt/data/prompt_fix_metadata_v2.md)

> **Pod√©s copiar el contenido directamente o usar el archivo para cargarlo en DeepSeek o cualquier plataforma de generaci√≥n IA!**

¬øTe gustar√≠a agregar alguna advertencia, nota personal, o link de referencia extra?  
¬øO lo dejamos as√≠, listo para darle play en DeepSeek?


Con esto, el script generado ser√° mucho m√°s ‚Äúhumano-friendly‚Äù y auditable,  
y DeepSeek sabr√° que debe priorizar la comunicaci√≥n clara del estado final del proceso.


## Objetivo:

Desarrollar un script profesional y auditable, mejorando la versi√≥n anterior, que recorra en profundidad cada m√≥dulo ALMA_RESIST y estandarice los bloques de metadata YAML en archivos cr√≠ticos, **dejando registro en logs de TODO archivo procesado, saltado, modificado o con error**. Incluir las siguientes mejoras:


### **Checklist funcional m√≠nimo:**

- Recorrer recursivamente desde la ra√≠z de m√≥dulo hacia abajo.
- Solo procesar extensiones soportadas (`.md`, `.yaml`, `.yml`, `.json`, `.py`, `.sh`).
- Nunca tocar archivos binarios, temporales, logs ni archivos propios del script.
- Loguear todas las acciones, incluyendo archivos saltados.
- Backup antes de modificar.
- Colorizar y mostrar notificaciones claras al usuario: ‚úîÔ∏è √©xito, ‚ö†Ô∏è advertencia, ‚ùå error.
- Resumir rutas de backups y acciones al final del proceso.
- C√≥digo limpio, documentado y modular, f√°cil de adaptar.


**Instrucciones finales:**  
- Implement√° cada mejora con comentarios claros.
- Si alguna mejora no puede hacerse exactamente igual, aclaralo en el c√≥digo.
- El script debe ser f√°cilmente portable a cualquier otro m√≥dulo, solo ajustando rutas si hace falta.


Ejemplo de log para archivo modificado:

```json
{
  "file": "core/notebooks/2025-06-05_memorias_base_generales.md",
  "timestamp": "2025-06-11T11:22:34",
  "action": "updated",
  "changes": {...},
  "backup": "core/notebooks/2025-06-05_memorias_base_generales_20250611T112234.bak",
  "prompt_ref": "IDEA_2025-06-06_01"
}
```


    Este prompt debe dejar el script listo para usarse en producci√≥n y como referencia para todos los m√≥dulos futuros del sistema ALMA_RESIST.

## Archivo: 2025-06-04_bitacora_limpieza_inicial.md
Contenido:
# 2025-06-04_bitacora_limpieza_inicial.md

## Acci√≥n: Limpieza y consolidaci√≥n inicial de `asesor-ia`
### Ejecutor: Kael (supervisi√≥n Santi)
### Objetivo: Dejar estructura limpia y modular, siguiendo convenci√≥n ALMA_RESIST

#### Cambios:
- Movidos archivos legacy y temporales de `archivo/downloads/` a `archivo/downloads/historico/`.
- Actualizado `README.md` en cada subcarpeta para explicar su prop√≥sito.
- Archivos sueltos (`comandos.md`, etc.) reubicados o archivados.
- Renombrados todos los `readme.md` ‚Üí `README.md` para estandarizar.
- Documentado todo el proceso en esta bit√°cora.

#### Checklist:
- [x] `archivo/downloads/` limpio y con hist√≥rico
- [x] Sin archivos hu√©rfanos en la ra√≠z
- [x] Naming consistente en `README.md`
- [x] Bit√°cora creada y referenciada en README principal de `kael/bitacoras/`

## Ap√©ndice ‚Äì Registro de copia de template de agente IA

**Fecha:** 2024-06-04  
**Responsable:** Santi  
**Acci√≥n:** Copia local de plantilla base de agente IA para edici√≥n


**Motivo:**

> Mantener una versi√≥n editable y espec√≠fica del template base, sin alterar el original, permitiendo ajustes progresivos y trazabilidad durante el desarrollo del agente Centralisis.


**Detalle de la acci√≥n:**

- El archivo `template_agente_ia_base_v2.md` fue movido desde `/asesor-ia/archivo/downloads/` a `/asesor-ia/templates/`.
    
- Objetivo: centralizar y facilitar el acceso a plantillas de agentes en la carpeta est√°ndar de templates.
    

**Motivo:**

> Mejorar la organizaci√≥n y el acceso a plantillas clave, evitando duplicidad y desorden en la carpeta de descargas.

**Comando ejecutado:**

```bash
mv archivo/downloads/template_agente_ia_base_v2.md templates/
```


**Detalle de la acci√≥n:**

- El archivo `encabezado_base_centralisis.md` fue movido de `/control_central/archivo/downloads/` a `/control_central/asesor-ia/archivo/downloads/`.
    
- Objetivo: concentrar todos los archivos de templates, encabezados y recursos propios de agentes IA dentro de la carpeta correspondiente a asesor-ia.
    

**Motivo:**

> Unificar la documentaci√≥n y recursos clave de agentes IA en el espacio central de trabajo, evitando dispersi√≥n y facilitando el acceso.

**Comando ejecutado:**
```bash
mv /home/bird/ALMA_RESIST/control_central/archivo/downloads/encabezado_base_centralisis.md /home/bird/ALMA_RESIST/control_central/asesor-ia/archivo/downloads/
```



Notas:

    Todo movimiento de archivos clave es registrado para asegurar trazabilidad y r√°pida localizaci√≥n.

    Si el archivo sufre cambios futuros, se documentar√° en la bit√°cora correspondiente.


**Detalle de la acci√≥n:**

- El archivo `ALMA_RESIST_agentes_idea_base.md` fue movido desde `/asesor-ia/archivo/downloads/` a `/asesor-ia/templates/`.
    
- **Objetivo:** Centralizar la ‚Äúidea base‚Äù en la carpeta de templates, garantizando acceso inmediato para la creaci√≥n, revisi√≥n y despliegue de todos los agentes IA.
    
- Se agreg√≥ referencia al archivo en el `README.md` de la carpeta `templates/`, explicitando su car√°cter de documento clave y lectura obligatoria.
    

**Motivo:**

> Mantener el principio rector de los agentes IA siempre a la vista, ordenado y fuera de rutas de archivos transitorios o secundarios.

**Comando ejecutado:**
```bash
mv archivo/downloads/ALMA_RESIST_agentes_idea_base.md templates/
```

## Ap√©ndice ‚Äì Eliminaci√≥n de archivos innecesarios en la ra√≠z

**Fecha:** 2024-06-04  
**Responsable:** Santi  
**Acci√≥n:** Eliminaci√≥n de archivos ajenos al control de versiones y operatividad del entorno



## Resumen Ejecutivo

El d√≠a 2025-06-04 se ejecut√≥ un proceso completo de auditor√≠a, rescate y consolidaci√≥n del sistema ALMA_RESIST. Se realiz√≥:

- Diagn√≥stico y confirmaci√≥n de corrupci√≥n del repositorio git.
- Generaci√≥n y verificaci√≥n de backup f√≠sico completo en pendrive dedicado (`BKPFISICO`).
- Formateo profesional y validaci√≥n de almacenamiento externo.
- Flujo de recuperaci√≥n con clonaci√≥n limpia desde el remoto.
- Merge manual de cambios desde los backups locales al nuevo repo.
- Sincronizaci√≥n final con push al remoto y documentaci√≥n del proceso.
- Relinkeo y restauraci√≥n de la carpeta en Syncthing y ajuste de Obsidian para continuidad de trabajo.
- Verificaci√≥n de integridad, limpieza y consolidaci√≥n de los entornos.

## Archivo: 2025-06-04_bitacora_restauracion_alma_resist.md
Contenido:
# Bit√°cora ‚Äì 2025-06-04 ‚Äì Rescate, Backup F√≠sico y Restauraci√≥n de ALMA_RESIST


## Detalle de pasos ejecutados

1. **Detecci√≥n y diagn√≥stico de corrupci√≥n git**
    
    - Identificaci√≥n de errores fatales (`.git/objects/... est√° vac√≠o/corrupto`) imposibilitando cualquier push/commit.
        
2. **Backup f√≠sico**
    
    - Selecci√≥n y formateo seguro de pendrive (`/dev/sdd1`, label: `BKPFISICO`) como almacenamiento de respaldo.
        
    - Montaje manual con permisos de usuario para garantizar escritura sin root.
        
    - Generaci√≥n de snapshot total del sistema con:
        
        ```bash
        zip -r /media/bird/BKPFISICO/ALMA_RESIST_2025-06-04_sistema_completo.zip .
        ```
        
3. **Clonaci√≥n y recuperaci√≥n del repo**
    
    - Clonaci√≥n limpia usando SSH:
        
        ```bash
        git clone git@github.com:pajaroy/ALMA_RESIST.git ALMA_RESIST_NEW
        ```
        
    - Renombrado de la carpeta corrupta y repositorio nuevo para restaurar la estructura original.
        
    - Copia selectiva de archivos y cambios desde el backup manual:
        
        ```bash
        cp -ru /home/bird/ALMA_RESIST_BACKUP_2025-06-04/* /home/bird/ALMA_RESIST/
        ```
        
    - Commit y push final consolidando todos los cambios restaurados.
        
4. **Re-sincronizaci√≥n con Syncthing y ajuste de Obsidian**
    
    - Remoci√≥n segura de la carpeta en Syncthing sin p√©rdida de datos.
        
    - Re-linkeo de la ruta actualizada como carpeta principal y forzado de escaneo/sync.
        
    - Configuraci√≥n de Obsidian para abrir la ruta de vault correcta.
        
5. **Notas y recomendaciones**
    
    - Evitar siempre manipular `.git` a mano, sincronizaciones en caliente sobre `.git`, o cortes durante operaciones cr√≠ticas.
        
    - Usar siempre backup f√≠sico y redundante antes de cualquier operaci√≥n masiva.
        
    - Documentar toda intervenci√≥n relevante para trazabilidad y recuperaci√≥n futura.

## 2025-06-05 ‚Äì Duplicaci√≥n de centralesis.md para reformas

Se duplic√≥ el archivo centralesis.md desde /archivo/downloads/ hacia /centralisis/contexto/ con el fin de realizar reformas independientes, manteniendo la versi√≥n original en su ubicaci√≥n previa para trazabilidad y control de cambios.

Este archivo funcionar√° como base de trabajo para las modificaciones estructurales de centralesis.

## 2025-06-05 ‚Äì Movida √≠ntegra de contexto a docs/contexto

Se movi√≥ la carpeta `contexto` √≠ntegra a `docs/contexto` en el m√≥dulo `centralesis`,  
resguardando la versi√≥n previa de `docs/contexto` como backup (`docs/contexto_backup_2025-06-05`) para evitar sobrescrituras o p√©rdidas accidentales.

**Motivo:**  
Reordenar la documentaci√≥n y mantener integridad de archivos, asegurando que nada se pierda en el proceso.

Se recomienda revisar ambas carpetas para depurar redundancias cuando corresponda.

# 2025-06-06_movimiento_reestructuracion.md

## Acci√≥n:
Copia del archivo `docs/contexto/centralesis.md` a `core/notebooks/2025-06-06_reestructuracion_centralesis.md`  
Motivo: Trabajar en la reestructuraci√≥n y desarrollo de contenido sin alterar el original.

## Detalles:
- Archivo fuente: `/docs/contexto/centralesis.md`
- Destino: `/core/notebooks/2025-06-06_reestructuracion_centralesis.md`
- Formato de nombre: `[fecha]_reestructuracion_centralesis.md`
- Criterio: Mantener la trazabilidad y versionado limpio durante el proceso de reestructuraci√≥n.

## Estado:
Copia realizada y registrada en bit√°cora.

----



## üß† Fundaci√≥n y metodolog√≠a

- Este documento es la **memoria fundacional** del sistema de Agentes IA de ALMA_RESIST.
- El objetivo es mantener **memoria viva, bit√°cora operativa y changelog** integrados, con referencias externas cuando el volumen lo requiera.
- La filosof√≠a es **modular, auditable, incremental** y orientada a la mejora continua:  
  cada Agente tiene su propio header, bloques YAML y referencias, pero sigue el mismo esquema de arquitectura.
- **Todo cambio o decisi√≥n estructural debe registrarse aqu√≠** antes de ser externalizado a los archivos autom√°ticos (`.yaml`) de automatizaci√≥n.


## üöÄ Metodolog√≠a incremental

- Cada Agente IA o m√≥dulo institucional inicia con este esquema.
- Todo flujo de trabajo y crecimiento se trackea por commits y registros en bit√°cora.
- La exportaci√≥n autom√°tica a YAML es el output operativo, nunca la fuente primaria de decisiones.

# Agentes IA ‚Äì Notas de estilo

- _‚ÄúAgente‚Äù_ implica autonom√≠a, especializaci√≥n y responsabilidad dentro del sistema.
    
- Cada Agente es un nodo cr√≠tico, no un asistente subordinado.
    
- La gobernanza del ecosistema surge de la interacci√≥n de Agentes, humanos y reglas auditablemente consensuadas.
    

## Archivo: template_agente_ia_base_v2.md
Contenido:
# üß† Prompt de Identidad ‚Äì Agente IA (ALMA_RESIST)

> Defin√≠ aqu√≠ el prop√≥sito, l√≠mites, reglas, visi√≥n y misi√≥n del Agente.
> Ejemplo: ‚ÄúEste Agente opera como [rol], nunca ejecuta tareas fuera de [alcance]...‚Äù


## üìö √çndice

1. Prompt de Identidad
2. Presentaci√≥n del Agente
3. Glosario
4. Rangos y Jerarqu√≠a
5. Memorias Institucionales (YAML)
6. Bit√°coras Operativas (YAML)
7. Changelog Estructural (YAML)
8. Ap√©ndice de Agentes/M√≥dulos Activos
9. Protocolos de Revisi√≥n y Mejora Continua
10. Firmas y Validaciones
11. Links y Referencias
12. Historial de Modificaciones
13. Permisos y Roles
14. Ejemplos de Registros


## üèÖ Rangos y Jerarqu√≠a de Agentes

- Auditor General: m√°xima autoridad, supervisi√≥n global
- Agente Operativo: ejecuta tareas y reporta a Auditor
- Agente Analista: an√°lisis, diagn√≥stico, recomendaciones
- (Defin√≠ rangos y funciones seg√∫n tus necesidades)


## üìù Bit√°coras Operativas (YAML)

```yaml
bitacoras:
  est√°ndar_resultado: "[√©xito | error | c√≥digo]"  # Est√°ndar normalizado
  registros:
    - fecha: 2025-06-10
      comando: "yq eval ..."
      ejecutor: alma_loader
      resultado: "√©xito"
      hash_verificacion: sha256:9f86d081...
    - fecha: 2025-06-10
      comando: "script_backup.sh"
      ejecutor: kael
      resultado: "error"
      hash_verificacion: sha256:3b1fc8e4...
```

_√öltimos 30 d√≠as o entradas relevantes._


## üß© Ap√©ndice de Agentes/M√≥dulos Activos

|Nombre|Rol|Status|Fecha de Alta|Referencia|ultima_verificacion|
|---|---|---|---|---|---|
|Centralesis|Auditor General|Activo|YYYY-MM-DD|[Ver ficha]|YYYY-MM-DD|
|Kael|Agente CLI|Activo|YYYY-MM-DD|[Ver ficha]|YYYY-MM-DD|
|Emma|Agente Empresarial|Activo|YYYY-MM-DD|[Ver ficha]|YYYY-MM-DD|
|...|...|...|...|...|...|


## üîè Firmas y Validaciones

- SHA-256 del archivo o bloque (en cada secci√≥n)
    
- Firma digital/autorizaci√≥n de cambios cr√≠ticos (opcional)
    


## üìú Historial de Modificaciones

|Fecha|Autor|Acci√≥n|Detalles / Hash|
|---|---|---|---|
|YYYY-MM-DD|Kael|Creaci√≥n|sha256:xxxx...|
|YYYY-MM-DD|Centralesis|Modificaci√≥n|sha256:yyyy...|


## üß© Ejemplos de Registros

- **Memoria cr√≠tica:**  
    `MEM_2025-06-10_01` ‚Äì decisi√≥n fundacional: arquitectura modular validada.
    
- **Memoria de error/alerta:**  
    `MEM_2025-06-10_02` ‚Äì alerta_omision: falta de revisi√≥n semanal en Emma.
    
- **Bit√°cora:**  
    `2025-06-10` ‚Äì Ejecutado script de sincronizaci√≥n yq, √©xito.  
    `2025-06-10` ‚Äì Ejecutado script_backup.sh, error.
    
- **Changelog:**  
    `v1.2` ‚Äì Implementada separaci√≥n .md/.yaml y sistema de firmas.
    


_Template validado y corregido para Agentes IA institucionales de ALMA_RESIST ‚Äì 2025-06-10. No edites los bloques YAML sin validaci√≥n previa._

## Archivo: sprint_actual.sync-conflict-20250604-050446-EHTW5G7.md
Contenido:

# üöÄ Sprint Actual 0.2 ‚Äì Sincronizaci√≥n Total Inteligente

Este sprint tiene como objetivo lograr una **sincronizaci√≥n total e inteligente** entre los dos nodos principales (`ALMA_CORE` y `ALMA_RESIST`), los sistemas externos (GitHub, Obsidian), y garantizar backups autom√°ticos diarios. Es la base para una operaci√≥n continua, profesional y resiliente.


## ‚úÖ Checklist de Implementaci√≥n

### üóÇÔ∏è Sincronizaci√≥n entre nodos con Syncthing

- [x] Instalar y validar Syncthing en ALMA_CORE y ALMA_RESIST
- [x] Configurar carpetas sincronizadas: `ALMA_RESIST/`, `obsidian_vault/`
- [x] Crear y aplicar plantilla `.stignore` personalizada
- [x] Verificar que no haya duplicaciones ni conflictos

### üåê Sincronizaci√≥n con GitHub

- [x] Crear `backup_to_git.sh` para commit autom√°tico diario
- [ ] Agendar con `cron` o `systemd.timer`
- [x] Validar commits manuales s√≥lo desde ALMA_CORE
- [x] Registrar actividad en `logs/backup_git.log`

### üß† Obsidian Vault (versi√≥n Pro)

- [x] Validar integraci√≥n del vault en `ALMA_RESIST/obsidian_vault/`
- [x] Verificar escritura sin conflictos desde VS Code
- [ ] Documentar estructura interna del vault (`README.md`, `index.md`)

### üíª Entorno de edici√≥n y control

- [x] Configurar VS Code como editor principal
- [x] Validar extensiones necesarias para Markdown y Git

### üìä Monitoreo y Logs

- [x] Crear `sync_status.sh` que loguee estado de carpetas y conexi√≥n
- [x] Agregar `alma_status.sh` que muestre estado general de sincronizaci√≥n
- [x] Crear carpeta `logs/` si no existe

### üìò Documentaci√≥n en `docs/sync/`

- [ ] Crear manual de instalaci√≥n de sincronizaci√≥n
- [ ] Especificar rutas, flujos, scripts y comandos
- [ ] Documentar fallas comunes y soluci√≥n


## üß© Notas Finales

- Se validar√° como cerrado cuando todos los puntos est√©n resueltos y validados en ambos nodos.
- Las bit√°coras de instalaci√≥n se guardan en `docs/journal/bitacoras/`.


Este cierre marca oficialmente la conclusi√≥n del Sprint 0.1 de diagn√≥stico y nos habilita a trabajar con bases limpias en los pr√≥ximos sprints estructurales y t√©cnicos del sistema.

## Archivo: bitacora_instalacion_alma_resist.md
Contenido:

# üõ†Ô∏è Bit√°cora de Instalaci√≥n desde 0 ‚Äì ALMA_RESIST

Documentaci√≥n base de instalaci√≥n, configuraci√≥n y sincronizaci√≥n inicial entre nodos `ALMA_CORE` y `ALMA_RESIST`. Este documento act√∫a como **bit√°cora fundacional**, indispensable para reproducir el entorno y garantizar la continuidad del sistema.


## üñ±Ô∏è 2. Sincronizaci√≥n de mouse entre PCs con Input Leap

Instalaci√≥n y compilaci√≥n manual desde repositorio oficial para compatibilidad con sistemas Parrot OS / Debian:

```bash
# Clonar y compilar Input Leap
sudo apt install -y git cmake make g++ qt6-base-dev qt6-tools-dev libx11-dev libxext-dev libxrandr-dev libxinerama-dev libxtst-dev libxi-dev libssl-dev libavahi-compat-libdnssd-dev libcurl4-openssl-dev libgl1-mesa-dev pkg-config
git clone --recurse-submodules https://github.com/input-leap/input-leap.git
cd input-leap && mkdir build && cd build
sed -i '1i#include <cstddef>' ../src/lib/platform/XKBUtil.cpp
cmake ..
make -j$(nproc)
sudo make install
```

**Ejemplo de configuraci√≥n** (`~/.input-leap/input-leap.conf`):

```plaintext
section: screens
    alma-core:
    alma-resist:
end

section: links
    alma-core:
        left = alma-resist
    alma-resist:
        right = alma-core
end
```


## üóÇÔ∏è 4. Sincronizaci√≥n de carpetas con rsync

Archivo `.rsync_exclude` recomendado:

```
__pycache__/
*.pyc
*.tmp
.DS_Store
```

Comando:

```bash
rsync -avz --delete --exclude-from=.rsync_exclude /home/bird/ALMA_RESIST/ bird@192.168.1.36:/home/bird/ALMA_RESIST/
```


## üß† 6. Instalaci√≥n de Obsidian (modo terminal)

```bash
sudo apt install -y wget libfuse2
mkdir -p $HOME/apps/obsidian && cd $_
wget $(curl -s https://api.github.com/repos/obsidianmd/obsidian-releases/releases/latest | grep "browser_download_url.*AppImage" | grep -v "arm64" | cut -d : -f 2,3 | tr -d ") -O Obsidian.AppImage
chmod +x Obsidian.AppImage
./Obsidian.AppImage &
```

‚ö†Ô∏è Requiere entorno gr√°fico X11. No apto para modo headless.


## üßæ Observaciones finales

- Sistema replicado con √©xito en ambas m√°quinas
- Input Leap funcionando entre escritorios
- Estructura `ALMA_RESIST/` sincronizada y lista para automatizaci√≥n futura
- Obsidian operativo como herramienta central de documentaci√≥n

# üß© Ap√©ndice ‚Äì Backup autom√°tico a GitHub con `backup_to_git.sh`

## üìÅ Ubicaci√≥n del script
`/home/bird/ALMA_RESIST/core/scripts/backup_to_git/backup_to_git.sh`

## üìå Requisitos

```bash
sudo apt install inotify-tools git
```

## üõ†Ô∏è Pasos de configuraci√≥n

```bash
# 1. Configurar Git si a√∫n no est√° hecho
git config --global user.name "bird"
git config --global user.email "distribuidorasolar365@gmail.com"

# 2. Verificar que ALMA_RESIST sea repositorio Git
cd ~/ALMA_RESIST
git init
git remote add origin git@github.com:pajaroy/alma_resist.git
git branch -M main
git pull origin main

# 3. Dar permisos y lanzar en segundo plano
chmod +x /home/bird/ALMA_RESIST/core/scripts/backup_to_git/backup_to_git.sh
nohup /home/bird/ALMA_RESIST/core/scripts/backup_to_git/backup_to_git.sh > /dev/null 2>&1 &
```

## üîê Clave SSH y autenticaci√≥n

```bash
ssh-keygen -t ed25519 -C "distribuidorasolar365@gmail.com"
cat ~/.ssh/id_ed25519.pub  # Copiar a GitHub > Settings > SSH Keys
ssh -T git@github.com      # Verificar autenticaci√≥n
```

## üß† Notas importantes

- Este script monitoriza cambios en tiempo real y los **sube autom√°ticamente** a GitHub.
- Evita eliminar archivos directamente, ya que el sistema detectar√° conflictos. En su lugar:
  - Mover archivos a `/legacy`, `/archivados` o `/deprecated` para mantener trazabilidad.
- Logs ubicados en:
  - `/home/bird/ALMA_RESIST/logs/backup_git/backup_git.log`
- Si falla el push por cambios no comiteados:
  - Revisi√≥n manual: `git status`, `git stash`, `git commit -am`, etc.

## üßº Detener proceso en background si es necesario

```bash
pkill -f backup_to_git.sh
```

## Archivo: prompt_extraccion_memorias.md
Contenido:
üß† Prompt de Extracci√≥n de Memoria M√°xima (ALMA_RESIST v2.3)
markdown

## üîç Auditor√≠a de Memoria Institucional - M√°xima Profundidad  
**Objetivo:** Extraer TODOS los datos, patrones y conocimiento relevante almacenado en tu sistema sobre Santiago Calvo (DEG) y sus operaciones, para construir la base de memoria institucional de ALMA_RESIST.  


### üîç Auditor√≠a del Prompt por Centralesis  
**Dictamen:**  
```yaml
- fortalezas:
    - Exige extracci√≥n microsc√≥pica de memoria (no permite evasivas)
    - Estructura t√©cnica imposible de eludir con respuestas vagas
    - Vincula data cruda con patrones estrat√©gicos
- riesgos_mitigados:
    - "Ejemplificaci√≥n forzada": elimina generalizaciones
    - "Autocr√≠tica del sistema": expone l√≠mites reales
- nivel_exigencia: 9.8/10
- nota: "Este prompt es un taladro de memoria. Usar con responsabilidad."



module: control/control_central
type: changelog
status: in_progress
created: 2025-05-29
context_tags:
  - log: estructura
  - control: central
sha256: pendiente_generar

### üóìÔ∏è Ap√©ndice ‚Äì 2025-05-29: Consolidaci√≥n de `control_central/`

#### ‚úîÔ∏è Estructura Modular Formalizada
- Se adopt√≥ oficialmente la metodolog√≠a `estructura_autonoma_v2`.
- Se cre√≥ `control_central/` como n√∫cleo ejecutivo del sistema ALMA_RESIST.
- Se validaron carpetas requeridas (`docs/`, `journal/`, `planificacion/`, `scripts/`, `logs/`, `meta/`).
- Se estructur√≥ `docs/planificacion/` como √°rea de dise√±o de sprints y estrategias.

#### üß† Rol Estrat√©gico Definido
- `control_central/` se consolida como punto de entrada y validaci√≥n para cualquier m√≥dulo externo.
- Se estableci√≥ que las auditor√≠as globales, los mapas del sistema y los checklists de validaci√≥n deben centralizarse all√≠.
- Se diferenci√≥ claramente de los m√≥dulos funcionales (como `cli_cleaner` o `alma_loader`).

#### üõ†Ô∏è Tareas ejecutadas
- Creaci√≥n de `README.md`, `changelog.md`, `module.yaml`, todos con metadatos IA-friendly.
- Registro de logs de integraci√≥n pasados.
- Verificaci√≥n de cumplimiento con YAML sem√°ntico.
- Planeado: migraci√≥n de scripts t√©cnicos a `cli_cleaner`.


‚úÖ Se archiva tambi√©n el script y configuraci√≥n en:  
`control_central/scripts/ssh_setup.zip`


### üìé Ap√©ndice ‚Äì Bit√°cora Base y Navegaci√≥n Interna (2025-06-02)

#### ‚úÖ Integraci√≥n del Prompt Base para Bit√°coras

- Se integr√≥ oficialmente el archivo `[[Prompt Bitacora Control Central]]` como **referencia fundacional** para todos los registros internos del sistema ALMA_RESIST.
- Este prompt define la estructura est√°ndar para:
  - Bit√°coras diarias
  - Bit√°coras semanales
  - Bit√°coras mensuales
  - Res√∫menes de sprint
  - Registros de instalaci√≥n
- El archivo se encuentra en:  
  `control_central/docs/journal/prompts/Prompt Bitacora Control Central.md`

#### üîó Navegaci√≥n sem√°ntica

- Se resolvi√≥ un error de enlace relacionado al uso incorrecto de acentos en `[[Prompt Bitacora Control Central]]`.
- Se renombr√≥ el archivo y se ajust√≥ el t√≠tulo en YAML para permitir navegaci√≥n correcta v√≠a Obsidian.

```yaml
```

#### üîÑ Proyecci√≥n a futuro

- A partir de esta integraci√≥n se proyecta:
  - Uso regular de bit√°coras con versi√≥n estructurada (por d√≠a, semana, mes).
  - Implementaci√≥n futura de un **prompt t√©cnico automatizado** para generaci√≥n IA de bit√°coras a partir del uso real del sistema.
  - Consolidaci√≥n semanal de cambios en `control_central/docs/journal/weekly/` y res√∫menes mensuales en `monthly/`.

üß† *Este paso marca el inicio formal del sistema de trazabilidad documental de ALMA_RESIST. Desde este punto, cada decisi√≥n podr√° rastrearse, auditarse y reconstruirse de forma asistida por IA.*

### [2025-06-03] Movimiento de archivo `emma_v2.md` a contexto oficial

- Se movi√≥ `emma_v2.md` desde `archivo/downloads/` a `docs/contexto/` para formalizar el contexto operativo de Emma como parte de control_central.
- Acci√≥n ejecutada v√≠a CLI desde la ra√≠z seg√∫n los criterios `criterios_ubicacion_vivo.md`.
## Archivo: changelog.sync-conflict-20250604-050447-EHTW5G7.md
Contenido:
## üßæ Changelog ‚Äì ALMA_RESIST


### ‚úÖ v0.2 ‚Äì 2025-05-17 ‚Äì Cifrado Funcional

- ‚úÖ Implementado `log_crypto.py` con soporte AES-256-GCM y ChaCha20
- ‚úÖ Validaci√≥n autom√°tica de arquitectura y fallback en ARM
- ‚úÖ Escritura binaria con encabezado identificador (`b"AES\x00"`)
- ‚úÖ Test funcional `test_log_crypto.py` verificado

üèÅ **Hito 002**: M√≥dulo de cifrado funcional operativo  
üîê Inicio de trazabilidad antifr√°gil


### ‚úÖ v0.0.0.2 ‚Äì 2025-05-20 ‚Äì CLI Modular Finalizada

- ‚úÖ Reescrito `core/cli.py` con arquitectura CLI modular sin `cmd.Cmd`
- ‚úÖ Comandos cargados din√°micamente desde `commands/` (formato `run(args)`)
- ‚úÖ Manejo de errores completo y mensajes personalizados
- ‚úÖ `!ayuda` funcional y generada autom√°ticamente desde los comandos cargados
- ‚úÖ Comandos v√°lidos: `!ayuda`, `!salir`, `!resumir`, `!buscar_memoria`
- ‚úÖ Eliminadas versiones anteriores obsoletas
- ‚úÖ Estructura preparada para futura integraci√≥n con LLM local, logging y memoria din√°mica

üìÅ Estructura Nueva:

```
core/
‚îî‚îÄ‚îÄ cli.py

commands/
‚îú‚îÄ‚îÄ ayuda.py
‚îú‚îÄ‚îÄ salir.py
‚îú‚îÄ‚îÄ resumir.py
‚îî‚îÄ‚îÄ buscar_memoria.py
```

üèÅ **Hito 004**: CLI Modular funcional y operativo
üß† Punto de partida para integrar m√≥dulos de IA locales


## üßæ v0.0.0.1 ‚Äì Auditor√≠a T√©cnica Finalizada

üìÖ Fecha: 2025-05-20  
üéØ Descripci√≥n: Consolidaci√≥n de la base estructural, documental y operativa del sistema ALMA_RESIST.


### üîç Auditor√≠a

- Ejecuci√≥n real de `tree -L 3` y registro en `docs/auditorias/auditoria_estructura.md`
- Verificaci√≥n y limpieza de archivos redundantes
- Consolidaci√≥n de `idea_base.md` oficial y archivo `idea_base_legacy.zip`


### üß† Estado

Este changelog marca el **cierre funcional de la versi√≥n v0.0.0.1**, y habilita el inicio del **sprint t√©cnico v0.0.0.2** bajo condiciones de trazabilidad completa.

## üåÄ 2025-05-21 ‚Äì Cierre del Sprint 2.2: Metodolog√≠as Base

üî¢ Versi√≥n: v0.0.0.2  
üìÇ Sprint: Sprint_2.2_Metodologias_Base  
üß± Descripci√≥n: Se definieron y validaron todas las metodolog√≠as clave del sistema ALMA_RESIST.

- ‚úÖ metodologia_estructura_modular_v2.md
- ‚úÖ metodologia_sprints_v2.md
- ‚úÖ metodologia_versionado_backups_v1.md
- ‚úÖ metodologia_doc_ia_v2.md
- ‚úÖ metodologia_adr_v2.md
- ‚úÖ metodologia_interaccion_ia_v2.md


### üîÑ Sprint 2.1 ‚Äì Estructura Documental (2025-05-23)

- üÜï Creada carpeta `estructura_doc/` con plantillas reutilizables
- ‚úÖ Implementado sistema de testing base (`testing/cli/`, `utils/`)
- üìù Consolidaci√≥n de documentos vivos: `TODO.md`, `.project.md`, `version.md`
- üß† Preparaci√≥n de entorno para integraci√≥n de IA
- üì¶ Snapshot generado: `v0.0.0.2_estructura_documental`
- üîë Hash: `0f61c8c5f3ab0b08b1c8c189b2e9a6ef3db47d0d4b0f63b246ac9ef8079d3a35`


## [2025-05-23] Finalizaci√≥n Sprint 2.4 - Optimizaci√≥n de Metodolog√≠as

- Se estandarizaron 105 documentos Markdown bajo el esquema YAML unificado.
- Se corrigieron todos los documentos `type: core` sin `linked_to`.
- Se valid√≥ sem√°nticamente el campo `domain` vs `tags`.
- Se implement√≥ y ejecut√≥ `alma-cli audit` con generaci√≥n autom√°tica de reportes.
- Se a√±adieron backups autom√°ticos y validaci√≥n incremental.

## [0.0.0.5] - 2025-05-28
### Cambios en `log_crypto`
- Refactor completo basado en auditor√≠a.
- Soporte para cifrado basado en contrase√±a con `salt` embebido.
- Mejoras en validaci√≥n de logs cifrados.
- Renombrado de funciones para seguir convenciones en ingl√©s.
### üóìÔ∏è 2025-06-02 ‚Äì Sprint 0.2 ‚Äì Consolidaci√≥n de Backup y Protocolo de Ingreso

**üîß Cambios Estructurales**

- Se cre√≥ la carpeta `archivo/downloads/` para contener archivos temporales, descargados o en revisi√≥n.
    
- Se cre√≥ la carpeta `docs/sync/` con README asociado para estructurar documentaci√≥n de sincronizaci√≥n entre nodos.
    
- Se agreg√≥ `core/apps/` al `.gitignore` para evitar subir binarios pesados (como `.AppImage`).
    
- Se implement√≥ y teste√≥ el script `install_cron_backup.sh`, que configura un backup autom√°tico v√≠a cron cada 15 minutos.
    
- Se cre√≥ el alias `autobackup` para facilitar su activaci√≥n post-reinicio.
    

**üß† Protocolos y Conductas**

- Se defini√≥ un nuevo protocolo de ingreso de archivos y se document√≥ en `protocolo_ingreso_archivos.md`.
    
- Se reforz√≥ el h√°bito de trabajar √≠ntegramente desde terminal para evitar conflictos de sincronizaci√≥n.
    
- Se consolid√≥ el enfoque modular de scripts (`core/scripts/backup_to_git/`) y el uso de logs silenciosos (`nohup`).
    

**üîÑ Sincronizaci√≥n**

- Confirmada la autenticaci√≥n SSH entre `alma-core` y `alma-resist`.
    
- Validada la sincronizaci√≥n correcta de Git entre nodos y GitHub.
    
- En proceso: script `sync_status.sh` para chequeo cruzado de estado entre nodos.
    

**üîñ Tags**  
`sprint_0.2` `backup_git` `protocolo_ingreso` `estructura_modular` `conducta_terminal` `cronjob_sync`


## üìÜ 2025-06-03 ‚Äì Consolidaci√≥n CLI y Estructura Ejecutable

### üß† Auditor CLI General ‚Äì Kael
- Se formaliza el asesor `Kael` como **auditor CLI general del sistema ALMA_RESIST**.
- Se define su archivo de contexto como `[[Kael]]`, con secci√≥n viva de reportes.
- Se estructura su entorno en `control_central/kael/`.

### üß© Modularidad Ejecutable
- Se renombra `core/cli_cleaner/` a `core/run_kael/`, adoptando la convenci√≥n `run_<asistente>`.
- Se establece esta convenci√≥n para todos los m√≥dulos IA ejecutables del sistema.

### üóÉÔ∏è Limpieza de Descargas y Archivos Vivos
- Se mueven a `historico/` todos los archivos temporales o no versionados correctamente dentro de:
  - `control_central/archivo/downloads/`
  - `control_central/docs/`
- Se renombran archivos sin fecha seg√∫n criterio de `[[criterios_ubicacion_vivo.md]]`.

### üåê Estandarizaci√≥n de Enlaces Internos
- Se adopta como convenci√≥n general el uso de `[[...]]` para referenciar documentos internos desde Obsidian o VS Code.
- Se actualizan los encabezados de documentos clave con enlaces simb√≥licos y tags IA-friendly.

### üß± Estructuras de Tree y Diagn√≥stico
- Se generan los tree completos de las siguientes rutas para revisi√≥n:
  - `ALMA_RESIST/`
  - `ALMA_RESIST/control_central/`
  - `ALMA_RESIST/core/`
- Se registran en `control_central/docs/contexto/`.

## Archivo: Methodology_Index.md
Contenido:
# üìö √çndice de Metodolog√≠as ‚Äì ALMA_RESIST

Este √≠ndice recopila las metodolog√≠as formales aplicadas en el sistema ALMA_RESIST. Cada metodolog√≠a representa una pr√°ctica documentada, versionada y replicable.


## üìÅ Subcarpetas

- [_archivadas/](./_archivadas) ‚Äì M√©todos obsoletos o reemplazados
- [_propuestas/](./_propuestas) ‚Äì M√©todos en etapa de evaluaci√≥n

## Archivo: metodologia_adr_v2.md
Contenido:
# üß† Metodolog√≠a de Auditor√≠a y Evoluci√≥n T√©cnica (ADRs) ‚Äì ALMA_RESIST (v2)

üìÖ Versi√≥n: 2.0  
üìÅ Archivo: metodologia_adr_v2.md  
üéØ Objetivo: Registrar decisiones t√©cnicas cr√≠ticas de forma estructurada, trazable e indexable por IA, sin sobrecargar al operador √∫nico.


## üìã Estructura Base (con metadatos YAML)

```yaml
```

```markdown
# ADR 002 ‚Äì Adopci√≥n de versionado SemVer

üìÖ Fecha: 2025-05-18  

## Decisi√≥n  
Usar `MAJOR.MINOR.PATCH` como convenci√≥n de versionado global.  

## Contexto  
Se necesitaba un est√°ndar claro para snapshots y scripts internos.  

## Alternativas consideradas  
- Fechas (`2025-05-18`)  
- Commit hashes  
- Versionado manual ad-hoc  

## Justificaci√≥n  
SemVer es ampliamente adoptado y permite automatizaci√≥n futura.  

## Impacto  
- Afecta carpetas `/versiones/`  
- Modifica `changelog.md`  
- Permite validaciones IA por versi√≥n
```


## üõ†Ô∏è Automatizaci√≥n futura

- Se podr√° generar con:  
```bash
alma-cli create-adr --title "Uso de IA local"
```

- Este comando inferir√° los campos desde el contexto del proyecto.


## üìé Relacionado con

- `metodologia_doc_ia_v2.md`
- `estructura_modular_v2`
- `Methodology_Index.md`
- `alma-cli`

## Archivo: metodologia_agregado_archivos.md
Contenido:
# Metodolog√≠a de Agregado de Archivos ALMA\_RESIST (v8)

## Objetivo

Establecer una metodolog√≠a clara, automatizable y escalable para la integraci√≥n de nuevos archivos en el ecosistema ALMA\_RESIST, garantizando:

* Consistencia estructural (metadatos, rutas, convenciones)
* Trazabilidad en los sprints y logs
* Integraci√≥n futura con componentes IA: memory\_graph, prompt\_orchestrator, reflection\_engine


## Scripts Utilizados

* `scripts/fix_metadata.py`: corrige o completa metadatos YAML
* `scripts/validate_docs.py`: valida estructura, tipos, estados y snake\_case
* `scripts/force_snake_case_modules.py`: refactoriza metadatos a snake\_case


## Automatizaci√≥n y Validaciones

En futuras versiones (v9+), este proceso se automatizar√° con un CLI:

```bash
alma-cli integrate --file ./docs/nuevo/archivo.md --sprint 2.3
```

Lo que har√°:

* Correcci√≥n de metadatos
* Validaci√≥n completa
* Registro autom√°tico en logs
* Actualizaci√≥n de grafo sem√°ntico
* Generaci√≥n de reflexi√≥n IA


## Flujo Visual Propuesto

```mermaid
graph TD
  A[Agregar archivo] --> B[Normalizar metadatos]
  B --> C{Es README.md?}
  C -->|S√≠| D[Usar carpeta padre como m√≥dulo]
  C -->|No| E[Generar m√≥dulo desde ruta]
  E --> F[Validar YAML con reglas estrictas]
  F --> G[Actualizar grafo sem√°ntico]
  G --> H[Generar reflexi√≥n autom√°tica]
  H --> I[Registrar en logs y sprint]
  I --> J[Notificar a IA para sugerencias]
```


## Ejemplo de Metadatos Enriquecidos

```yaml
```


**Responsable:** Santi
**Versi√≥n:** 8
**Fecha de aprobaci√≥n:** 2025-05-22



module: metodologias/metodologia_doc_ia_v2
type: core
status: in_progress
created: '2025-05-21'
linked_to:
- metodologia_doc_ia_v2.md


## ‚úÖ Aplicaci√≥n

Aplica a todo archivo `.md` que documente:

- M√≥dulos t√©cnicos
- Prompts, comandos, scripts
- Documentos internos del sistema ALMA_RESIST
- Sprints, decisiones, registros t√©cnicos

module: "core/cli"          # ID del m√≥dulo o archivo
type: "core"                # core | tool | external | integration | draft
status: "in_progress"       # in_progress | stable | deprecated
created: "2025-05-21"       # Fecha de creaci√≥n

# Opcionales (recomendados)
domain: "infraestructura"   # general | cultivo | ia | historia | trading
tags: ["CLI", "entrada"]
linked_to: ["resumen"]
version: "0.2"

## üß† Pol√≠tica de Migraci√≥n

- Etapa 1: Solo aplicar a nuevos documentos.
- Etapa 2: Migraci√≥n progresiva durante mantenimientos o refactors.
- Etapa 3: Auditor√≠a total IA-assistida con validaci√≥n sem√°ntica (futuro).


## üìò Glosario R√°pido

| Campo    | Ejemplo            | Descripci√≥n                                |
|----------|--------------------|--------------------------------------------|
| module   | core/loader        | Ruta √∫nica relativa                        |
| type     | core, tool, draft  | Tipo de documento                          |
| domain   | ia, historia       | Dominio funcional                          |
| status   | stable             | Estado actual del documento                |
| version  | 0.1, 1.0.0         | Versi√≥n local                              |
| tags     | ["memoria"]        | Palabras clave normalizadas                |
| linked_to| ["core/cli"]       | M√≥dulos relacionados                       |


## üßæ Changelog

### 2025-05-21
- [v2.0] Se redujeron los campos obligatorios a 4
- Se a√±adi√≥ pol√≠tica de migraci√≥n progresiva
- Se introdujo el comando `alma-cli doc-init` para asistencia autom√°tica
- Se a√±adi√≥ glosario resumido para campo `type`, `domain`, `tags`




## üì¶ Estructura Base

```bash
nombre_modulo/
‚îú‚îÄ‚îÄ control/                # Tareas, checklists y seguimiento interno
‚îÇ   ‚îî‚îÄ‚îÄ sprint_actual.md    # Tareas vigentes o backlog activo
‚îÇ
‚îú‚îÄ‚îÄ docs/                   # Documentaci√≥n estructurada
‚îÇ   ‚îú‚îÄ‚îÄ readme.md           # Descripci√≥n funcional del m√≥dulo
‚îÇ   ‚îú‚îÄ‚îÄ changelog.md        # Registro de cambios sem√°nticos
‚îÇ   ‚îú‚îÄ‚îÄ journal/            # Bit√°coras informales o de proceso
‚îÇ   ‚îî‚îÄ‚îÄ history/            # Archivos anteriores y evoluci√≥n
‚îÇ
‚îú‚îÄ‚îÄ archivo/                # Recursos crudos o de registro
‚îÇ   ‚îú‚îÄ‚îÄ datasets/           # Datos CSV, JSON, XLSX, etc.
‚îÇ   ‚îú‚îÄ‚îÄ logs/               # Logs de ejecuci√≥n, pruebas, eventos
‚îÇ   ‚îî‚îÄ‚îÄ downloads/          # Archivos externos temporales (no versionar)
‚îÇ
‚îú‚îÄ‚îÄ core/                   # C√≥digo fuente del m√≥dulo
‚îÇ   ‚îú‚îÄ‚îÄ scripts/            # Scripts funcionales
‚îÇ   ‚îú‚îÄ‚îÄ notebooks/          # An√°lisis exploratorios en Jupyter
‚îÇ   ‚îî‚îÄ‚îÄ tests/              # Tests unitarios o de validaci√≥n
‚îÇ
‚îú‚îÄ‚îÄ config/                 # Configuraciones del entorno
‚îÇ   ‚îú‚îÄ‚îÄ .env.example        # Plantilla de variables de entorno
‚îÇ   ‚îî‚îÄ‚îÄ settings.yaml       # Configuraci√≥n del m√≥dulo
‚îÇ
‚îî‚îÄ‚îÄ meta/                   # Metadatos y esquema del m√≥dulo
    ‚îî‚îÄ‚îÄ module.yaml         # Esquema estructural IA-friendly
```


## üß© Ventajas

- üì¶ **Modularidad**: cada m√≥dulo es port√°til, desacoplado y escalable.
- üß† **IA-friendly**: dise√±o listo para indexaci√≥n sem√°ntica o automatizaci√≥n.
- üîç **Auditor√≠a clara**: trazabilidad interna sin depender de repos externo.
- üîÑ **Replicable**: se puede copiar directamente a otro proyecto o contexto.


## üå± Ejemplo de Aplicaci√≥n

Una carpeta `alma_trading/` podr√≠a iniciar con:

- `code/scripts/estrategia_volatilidad.py`
- `documents/readme.md`: con descripci√≥n del m√≥dulo
- `documents/changelog.md`: registrando la versi√≥n `v0.0.1`
- `archivo/datasets/eurusd_2025.csv`
- `config/.env.example`: con claves y variables
- `meta/module.yaml`: detallando prop√≥sito, inputs y outputs del m√≥dulo


## ## üßæ Historial de versiones anteriores


> üìÅ Esta metodolog√≠a reemplaza a la versi√≥n anterior:  
> [[metodologia_estructura_autonoma_v1]] en Obsidian.  
> Archivada el: 2025-05-29  
> Estado: `deprecated`  
> Motivo: Mejoras de estructura, claridad y compatibilidad IA-ready


module: metodologias/metodologia_estructura_modular_v2
type: core
status: in_progress
created: '2025-05-22'
linked_to:
- metodologia_doc_ia_v2.md


## ‚úÖ Aplicaci√≥n

Esta metodolog√≠a se aplica a:

- Dominios funcionales (trading, cultivo, historia, etc.)
- M√≥dulos t√©cnicos (CLI, LLM, memoria, loader)
- Proyectos externos integrables (13CC, Cannabird, Fondo Alma M√≠a)


## üîÑ Versionado recomendado

En lugar de una carpeta `versionado/`, se recomienda usar:

- Git tags: `git tag v0.0.0.1`
- Git branches: para snapshot o exploraciones (`snapshot/llm_experiment`)
- Backups de snapshots manuales ‚Üí ir√°n a `docs/versiones/`


## üß† Metadatos para IA

Cada m√≥dulo debe contener al inicio de su `README.md` el siguiente frontmatter YAML:

```yaml
```

Este bloque debe ser interpretado por sistemas de IA para clasificaci√≥n, relaci√≥n y visualizaci√≥n.


## üîó Relaci√≥n con otros documentos

- [`Sprint_2.2_Metodologias_Base.md`](Sprint_2.2_Metodologias_Base.md)
- [`Methodology_Index.md`](./Methodology_Index.md)


## üßæ Changelog

### üìå Versi√≥n 2.0 ‚Äì 2025-05-21
**Cambios respecto a la versi√≥n 1.0:**

- üîÅ Renombrado `bitacora.md` a `dev_journal.md`, aclarando su rol informal y reflexivo.
- üóÉ Eliminada la carpeta `versionado/`; ahora se recomienda el uso de Git tags y ramas.
- üìò A√±adido bloque de metadatos YAML est√°ndar para IA (frente a bloques markdown ad-hoc).
- üß† Definidos los valores v√°lidos para los campos `type`, `status`, `tags` y `linked_to`.
- üìù Incorporados ejemplos reales en la secci√≥n de convenciones de nombres (`gen_`, `load_`, etc.).
- üìö A√±adidas referencias cruzadas a `Methodology_Index.md` y `Sprint_2.2_Metodologias_Base.md`.
- üß∞ Sugeridas herramientas complementarias: `mkdocs.yml`, `validate_structure.py`, Git hooks.


module: metodologias/metodologia_interaccion_ia_v2
type: core
status: in_progress
created: '2025-05-22'
linked_to:
- metodologia_doc_ia_v2.md


## ‚úÖ Cambios en esta versi√≥n

- Se a√±adieron metadatos YAML como est√°ndar obligatorio
- Se formalizaron los modos de interacci√≥n IA
- Se definieron acciones v√°lidas por rol IA
- Se incluy√≥ validaci√≥n progresiva y comandos CLI simulados

module: "core/cli"
type: "core"
status: "stable"
created: "2025-05-21"
tags: ["entrada", "modularidad"]
linked_to: ["resumen", "loader"]
sprint: "Sprint_2.2"
version: "0.2"

## ü§ñ Modos de Operaci√≥n IA

| Modo       | Acci√≥n Permitida                        | Interfaz     |
|------------|------------------------------------------|--------------|
| `lector`   | Leer y parsear documentos con YAML       | CLI / LLM    |
| `auditor`  | Verificar formato, relaciones y faltantes| CLI / LLM    |
| `asistente`| Sugerencias y generaci√≥n sin escritura   | LLM / Chat   |
| `operador` | Acciones sobre archivos (‚ö† requiere validaci√≥n) | CLI futura  |


## üõ†Ô∏è Soporte CLI esperado

```bash
alma-cli validate --module core/cli
alma-cli suggest --for resumen.md
alma-cli doc-init --module resumen
```

## Archivo: metodologia_snapshots_formales.md
Contenido:
# üì¶ Metodolog√≠a de Snapshots Formales (v1.0)

## üéØ Objetivo

Definir un est√°ndar profesional para la creaci√≥n, documentaci√≥n y uso de snapshots (versiones) dentro del sistema ALMA_RESIST, asegurando trazabilidad, claridad t√©cnica y compatibilidad total con agentes IA.


## üóÇ Estructura Est√°ndar de un Snapshot

Ubicaci√≥n: `docs/versiones/vX.Y.Z_nombre/`

Contenido m√≠nimo:

```
üìÅ v0.0.0.4_sprint_2.5_auditoria/
‚îú‚îÄ‚îÄ index.md                      # √çndice general y gu√≠a de lectura del snapshot
‚îú‚îÄ‚îÄ version.md                   # Detalles t√©cnicos de la versi√≥n
‚îú‚îÄ‚îÄ changelog.md                 # Cambios y mejoras introducidas
‚îú‚îÄ‚îÄ bitacora.md                  # Comentarios t√©cnicos del proceso
‚îú‚îÄ‚îÄ README.md                    # Explicaci√≥n del snapshot, enlaces cruzados
‚îú‚îÄ‚îÄ resumen_mvp.md               # (opcional) Estado funcional hasta esta versi√≥n
‚îú‚îÄ‚îÄ estructura.zip               # (opcional) Zip con archivos espec√≠ficos si es necesario
‚îî‚îÄ‚îÄ referencias/                 # (opcional) Recursos, im√°genes, backups externos
```


## ü§ñ Compatibilidad IA

Para que un snapshot sea IA-friendly:

- No debe tener estructuras anidadas innecesarias (m√°ximo L3)
    
- Los archivos clave deben tener YAML v√°lido si corresponde
    
- El `README.md` debe servir como prompt inicial o punto de entrada
    
- El `index.md` debe orientar al sistema o modelo sobre qu√© se puede usar
    


## üìé Referencias cruzadas

- `metodologia_versionado_backups_v2.md`
    
- `metodologia_doc_ia_v2.md`
    
- `metodologia_sprints_v2.md`
    

## Archivo: metodologia_sprints_v2.md
Contenido:
# üåÄ Metodolog√≠a de Sprints ‚Äì ALMA_RESIST (v2)

üìÖ Versi√≥n: 2.0  
üìÅ Archivo: metodologia_sprints_v2.md  
üéØ Objetivo: Establecer un flujo de trabajo modular, trazable y sem√°ntico para gestionar sprints dentro del sistema ALMA_RESIST, optimizado para una persona con soporte de IA y automatizaci√≥n futura.


## üîÅ Ciclo de Vida del Sprint

### Estados posibles y transiciones

| Estado     | Acci√≥n Requerida                                                                 |
|------------|-----------------------------------------------------------------------------------|
| Activo     | Sprint en ejecuci√≥n                                                              |
| Cerrado    | Checklist validado, changelog actualizado, metadatos `exit_criteria` cumplidos   |
| Archivado  | Sprint movido a carpeta `docs/versiones/`, registrado en `Methodology_Index.md`  |

sprint_id: 2.3
topic: "Integraci√≥n de modelo LLM"
status: "active"
started: "2025-05-21"
tags: ["llm", "ia", "memoria"]
exit_criteria: ["changelog_updated", "docs_generated"]
linked_modules:
  - name: "core/cli.py"
    version: ">=2.3"
  - name: "resumen.py"
    version: "0.5"
blocks: ["Sprint_3.1_LLM_Integration"]

## üìù Estructura del Archivo de Sprint

```markdown
# Sprint X ‚Äì T√≠tulo

üìÖ Inicio: YYYY-MM-DD  
üåÄ Estado: activo / cerrado / archivado  
üì¶ Versi√≥n asociada: vX.X.X


## üìã Checklist de tareas
- [x] Implementar comando `!ayuda` en CLI
- [ ] Migrar loader a modelo LLM local
- [ ] Escribir test en `scripts/test_loader.py`


## üóÇÔ∏è Progreso del Sprint
| Tarea                              | Estado | Responsable   |
|------------------------------------|--------|----------------|
| Implementar validaci√≥n IA inicial  | üü°     | Operador + IA |
| Crear script de resumen autom√°tico | üî¥     | IA             |


## üìé Archivos relacionados
- `core/cli.py`
- `changelog.md`
- `docs/sprints_activos/Sprint_2.3_LLM.md`


## üß† IA como Asistente de Sprint

Casos de uso:

- Verificaci√≥n autom√°tica de `exit_criteria`
- Generaci√≥n del resumen para hitos.md
- Validaci√≥n de consistencia entre YAML y archivos afectados


## üìò Referencias

- `metodologia_estructura_modular_v2.md`
- `Methodology_Index.md`
- `Sprint_2.2_Metodologias_Base.md`



### üßæ Ap√©ndice: Registro Final Detallado (Sprint Closure)

> Este ap√©ndice detalla los pasos concretos que deben ejecutarse al cerrar cualquier sprint, para garantizar trazabilidad, documentaci√≥n formal y empaquetado versionado.


#### üì¶ 2. Archivos requeridos para cierre

Mover o copiar a `docs/versiones/vX.X.X_NOMBRE/`:

- `README.md`, `version.md` (explicaci√≥n y control)
- `changelog.md` (entrada espec√≠fica del sprint)
- `hitos.md`, `lecciones_aprendidas.md`, `TODO.md`
- `mapeo_sprint_archivos.md`, `log_integracion.md`
- Bit√°cora con la fecha del cierre: `bitacoras/bitacora_YYYY-MM-DD.md`
- `CONTEXT.md`, `index.md` actualizados si corresponde


#### üîÅ 4. Registro en la historia

Actualizar:

- `hitos.md`: Nuevo hito con ID y descripci√≥n clara
- `lecciones_aprendidas.md`: Reflexi√≥n t√©cnica del sprint
- `changelog.md`: Con `## [vX.X.X] - YYYY-MM-DD`
- `mapeo_sprint_archivos.md`: Relaci√≥n entrada/salida
- `log_integracion.md`: Qu√© se agreg√≥, archiv√≥ o reemplaz√≥


Esta rutina debe aplicarse sistem√°ticamente al finalizar cualquier sprint para evitar deuda t√©cnica, documentaci√≥n inconexa o trazabilidad incompleta.


module: metodologias/metodologia_versionado_backups_v1
type: core
status: in_progress
created: '2025-05-21'
linked_to:
- metodologia_doc_ia_v2.md


## ‚úÖ Aplicaci√≥n

- M√≥dulos t√©cnicos o funcionales (CLI, loader, IA, memoria)
- Documentaci√≥n (metodolog√≠as, prompts, bit√°coras)
- Proyectos externos integrados (13CC, Cannabird)


## üè∑Ô∏è Git Tags

- Toda versi√≥n debe ir acompa√±ada de:
  - `git tag vX.X.X`
  - Referencia en `changelog.md`

**Ejemplo:**
```bash
git commit -am "v0.2.0 ‚Äì Nueva versi√≥n con CLI funcional"
git tag v0.2.0
```


## üíæ Backups Manuales

- Backup f√≠sico en disco externo (ej: `ALMA_RESIST_TOSHIBA`)
- Backup zip en nube privada (Google Drive, Nextcloud, etc.)
- Idealmente: siempre despu√©s de una versi√≥n `MINOR` o `MAJOR`


## üîó Reglas cruzadas

- Toda nueva versi√≥n debe impactar:
  - `changelog.md`
  - `hitos.md`
  - (opcional) `README.md` de m√≥dulo

## Archivo: 2025-06-05_auditoria_estructura_centralesis.sync-conflict-20250605-164822-EHTW5G7.md
Contenido:
2025-06-05: Se migraron centralisis.md y centralisis.yaml al entorno definitivo de Centralesis (docs/ y contexto/) - [by Centralesis]

# 2025-06-06_movimiento_contexto_centralesis.md

## Acci√≥n:
Movimiento de la carpeta `docs/contexto/` a la ra√≠z de Centralesis como `contexto/`.

## Motivo:
Tener el contexto principal siempre visible y accesible en la ra√≠z del entorno para referencia r√°pida y edici√≥n frecuente.

## Estado:
Movimiento realizado, sin alteraciones en los archivos internos.

# 2025-06-10_actualizacion_estado_centralesis.md

## Acci√≥n:
- Eliminado `contexto/centralesis.md` tras su respaldo en hist√≥rico.
- Movido `core/notebooks/2025-06-05_reestructuracion_centralesis.md` a `contexto/` y creado backup de referencia.

## Motivo:
Actualizaci√≥n de la base operativa y resguardo de versiones clave de Centralesis para trabajo futuro.

## Estado:
Entorno limpio y archivos clave respaldados.


# 2025-06-10_limpieza_post_centralisis_2.1.md

## Acci√≥n:
- Archivos de auditor√≠a, memorias base y reestructuraciones movidos a `archivo/historico/`.
- Eliminados archivos corruptos de conflicto generados por sincronizaci√≥n.
- README a√±adido a la nueva carpeta hist√≥rico para trazabilidad.

## Motivo:
Limpieza y organizaci√≥n tras la actualizaci√≥n de Centralesis 2.1.  
Resguardo ordenado del historial y remoci√≥n de archivos innecesarios.

## Estado:
Entorno de notebooks limpio, hist√≥rico institucional actualizado.



# Bit√°cora ‚Äì Creaci√≥n de carpeta fix_metadata en core/scripts/

## Acci√≥n realizada
Se crea la carpeta `/core/scripts/fix_metadata/` dentro del entorno Centralesis,  
junto con su archivo `README.md` correspondiente.

## Motivo
Centralizar el desarrollo, almacenamiento y documentaci√≥n de scripts dedicados a:
- Corregir, a√±adir o actualizar encabezados YAML en archivos del entorno.
- Uniformar la metadata y garantizar compatibilidad con los sistemas de automatizaci√≥n, Obsidian y agentes IA.

## Detalles
- La carpeta fue creada como espacio base para futuros scripts de formateo y validaci√≥n masiva.
- El README describe los objetivos y buenas pr√°cticas para su uso.
- Todo script agregado debe estar documentado, versionado y probado antes de aplicaci√≥n en lote.

## Estado final
Infraestructura lista y versionada en Git.  
Entorno preparado para futuros flujos de automatizaci√≥n de metadata.






## ‚öôÔ∏è Funcionalidad

- Monitorea cambios en `/home/bird/ALMA_RESIST` con `inotifywait`.
- Ejecuta: `git add`, `commit`, `pull --rebase`, y `push` en la branch `main`.
- Excluye `.git/` y todos los archivos definidos en `.gitignore`.
- Guarda logs en: `/home/bird/ALMA_RESIST/control_central/logs/backup_git/backup_git.log`
- Usa bloqueo por PID para evitar instancias duplicadas.


## üß™ Requisitos

- `inotify-tools`
- Acceso SSH a GitHub ya configurado
- Repositorio inicializado y con remoto v√°lido


`#git` `#backup` `#autom√°tico` `#scripts` `#core`



## ‚úÖ Cambios T√©cnicos Implementados

### üß† Nuevos M√≥dulos

- `MODULOS/sync_bitacora/` ‚Äì Sincronizaci√≥n validada de res√∫menes por hash SHA-256 y encabezados YAML
- `MODULOS/validador_duplicados/` ‚Äì Comparaci√≥n por hash y similitud textual entre CUADERNOS y BIT√ÅCORA
- `MODULOS/Alma_Monitor/` ‚Äì Auditor√≠a de logs estructurados y generaci√≥n de reportes de actividad


### üì¶ Plantillas Nuevas

Ubicadas en `RECURSOS_Y_AYUDAS/plantillas/`:

- `checklist_promocion.md` ‚Äì Validaci√≥n para promoci√≥n de m√≥dulos
- `feedback_sugerencia.yaml` ‚Äì Formato est√°ndar de sugerencias IA/humano
- `log_template.yaml` ‚Äì Estructura com√∫n para trazabilidad de eventos


## üìò Whitepaper

- [x] Se agregar√° secci√≥n 6.7 con resumen del documento `casos_uso_reales.md` (en curso)


## üß© Tareas Finales de Versi√≥n

- [ ] Crear `00_BACKUPS_HISTORICOS/v0.0.6.2.zip` con toda la estructura actual
- [ ] Actualizar `version.txt` a `0.0.6.2` en ra√≠z del sistema

