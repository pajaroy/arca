# üß† Prompt T√©cnico ALMA_LOADER v3.0

## 1. Prop√≥sito del Sistema
Este prompt define todas las funciones t√©cnicas, estructuras internas y flujos de interacci√≥n del sistema ALMA_LOADER. Su objetivo es que cualquier modelo IA o humano t√©cnico pueda ejecutar, extender o auditar el sistema con claridad total. Consolidado a partir de versiones 2.1.1 y 2.2.0.

## 2. M√≥dulos Funcionales
- `core_nl.py` ‚Äì Conversi√≥n NL ‚Üí JSON mediante reglas y patrones
- `validador.py` ‚Äì Validaci√≥n con `schema_base.json` y normalizaci√≥n de campos
- `sqlite_storage.py` ‚Äì Almacenamiento actual, optimizado con JSON1 para consultas internas
- `base_storage.py` ‚Äì Interfaz abstracta de almacenamiento compatible con m√∫ltiples motores
- `vector_storage.py` ‚Äì B√∫squeda sem√°ntica con embeddings v√≠a FAISS (alpha)
- `router_atencional.py` ‚Äì Enrutamiento seg√∫n intenci√≥n detectada (acci√≥n, reflexi√≥n, memoria)
- `resumenes.py` ‚Äì Generaci√≥n de resumen en Markdown diario o semanal
- `alma_analytics.py` ‚Äì Detecci√≥n de patrones, correlaciones y disparadores
- `gamificacion.py` ‚Äì Sistema de motivaci√≥n por puntos, niveles y h√°bitos (fase 3)

## 3. JSON Schema de Memoria
```json
{
  "id": "MEM-TRD-2025-XXXX",
  "categoria": "TRD",
  "contenido": "texto plano",
  "tags": ["#btc", "#reflexi√≥n"],
  "resumen_inferido": "...",
  "embedding_id": "EMB-abc123",
  "vector": [0.123, 0.987, ...],
  "intencion_detectada": "registro",
  "origen_input": "usuario",
  "relaciones": [
    { "tipo": "temporal", "target_id": "MEM-TRD-2025-XXXX", "peso": 0.8 }
  ]
}
```

## 4. Interfaces y Abstracciones
- `BaseStorage`: permite intercambiar SQLite por FAISS, Neo4j u otros sin modificar el flujo general
- `router_atencional`: enruta el input al m√≥dulo correcto seg√∫n an√°lisis r√°pido de intenci√≥n

## 5. Flujo Conversacional Esperado
1. Entrada NL del usuario o API
2. Conversi√≥n a JSON con `core_nl.py`
3. Validaci√≥n sem√°ntica con `validador.py`
4. Almacenamiento (`sqlite_storage` o `vector_storage` seg√∫n configuraci√≥n)
5. Generaci√≥n de resumen en `resumenes.py`
6. Activaci√≥n de reglas autom√°ticas en `alma_analytics.py`

## 6. Automatizaciones
- Generaci√≥n diaria/semanal de res√∫menes en Markdown
- Backups autom√°ticos del `memorias.db` o vector_index
- Alertas sem√°nticas seg√∫n `reglas_dinamicas.json`

## 7. Roadmap T√©cnico (por fases)
### Fase 1 ‚Äì Core estable
- Registro estructurado
- Validaci√≥n con JSON Schema
- Guardado en SQLite
- Res√∫menes diarios

### Fase 2 ‚Äì Sem√°ntico
- Embeddings de contenido + FAISS
- Router atencional
- An√°lisis predictivo simple
- Relaciones entre memorias

### Fase 3 ‚Äì Expansi√≥n
- Gamificaci√≥n, metas y refuerzos
- Sistema de reglas con acciones encadenadas
- Integraci√≥n con apps externas (API REST, Telegram, Shortcuts, voz)

## 8. Instrucciones de Integraci√≥n
- Todo input debe ser procesado con `core_nl.py`
- Las memorias deben validarse contra `schema_base.json`
- Toda salida debe ser JSON v√°lido, o Markdown estructurado si es resumen
- DeepSeek, GPT o terminales pueden interactuar directamente con cada m√≥dulo

