# test_sync.py ‚Äì Verificaci√≥n de integridad b√°sica para ALMA LIBRE

import sqlite3
import os
import yaml

DB_PATH = "99_Sync/memorias.db"
CONFIG_PATH = "00_ALMA_LIBRE/ALMA_CONFIG.yaml"

def test_db_connection():
    print("üîç Verificando base de datos...")
    if not os.path.exists(DB_PATH):
        print(f"‚ùå Error: No se encontr√≥ la base de datos en {DB_PATH}")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='memorias'")
        result = cursor.fetchone()
        if not result:
            print("‚ùå Error: La tabla 'memorias' no existe")
            return False
        cursor.execute("SELECT COUNT(*) FROM memorias")
        count = cursor.fetchone()[0]
        print(f"‚úÖ Base de datos conectada. Registros encontrados: {count}")
        return True
    except Exception as e:
        print(f"‚ùå Error al conectar con la base de datos: {e}")
        return False
    finally:
        conn.close()

def test_config_file():
    print("üîç Verificando archivo de configuraci√≥n...")
    if not os.path.exists(CONFIG_PATH):
        print(f"‚ùå Error: No se encontr√≥ el archivo de configuraci√≥n en {CONFIG_PATH}")
        return False

    try:
        with open(CONFIG_PATH, "r") as f:
            data = yaml.safe_load(f)
            print("‚úÖ Archivo de configuraci√≥n le√≠do correctamente:")
            print(f"   Versi√≥n: {data.get('version_actual')}")
            print(f"   Prompt activo: {data.get('prompt_activo')}")
            return True
    except Exception as e:
        print(f"‚ùå Error al leer archivo YAML: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Test de Integridad ‚Äì ALMA LIBRE")
    db_ok = test_db_connection()
    cfg_ok = test_config_file()

    if db_ok and cfg_ok:
        print("
‚úÖ El sistema pas√≥ el test b√°sico de integridad.")
    else:
        print("
‚ö†Ô∏è El sistema tiene errores. Revisar arriba.")
