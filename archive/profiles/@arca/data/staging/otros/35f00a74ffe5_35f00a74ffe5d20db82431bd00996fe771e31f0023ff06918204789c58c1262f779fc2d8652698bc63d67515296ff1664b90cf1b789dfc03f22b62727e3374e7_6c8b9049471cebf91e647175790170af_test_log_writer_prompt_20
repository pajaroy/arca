---
module: prompts/test_log_writer_prompt
type: core
status: in_progress
created: '2025-05-26'
linked_to:
- metodologia_doc_ia_v2.md

---
# ‚úÖ Solicitud de Test ‚Äì `test_log_writer.py` ‚Äì ALMA_RESIST Sprint 2.6

Este test debe cubrir el m√≥dulo `log_writer.py`, el cual implementa un sistema de escritura de logs en formato JSONL con escritura at√≥mica, validaci√≥n de estructura y rotaci√≥n autom√°tica.

---

## üìò M√©todos clave a testear

- `write_log(event: dict) -> bool`
- `log_event(event_type: str, message: str, module: str, metadata: dict) -> dict`
- `secure_rotation(days: int) -> None`

---

## üß™ Casos de prueba sugeridos

| Caso                                             | Resultado esperado                                 |
|--------------------------------------------------|----------------------------------------------------|
| Escritura v√°lida                                 | Log creado con evento completo                     |
| Evento mal formado (sin campos requeridos)       | Retorna `False`, no se escribe                     |
| Escritura at√≥mica (uso de archivo temporal)      | Archivo `.tmp` renombrado a `.log` correctamente   |
| M√∫ltiples eventos                                | Se agregan en formato JSONL (una l√≠nea por evento) |
| Rotaci√≥n autom√°tica                              | Elimina logs m√°s antiguos que `N` d√≠as             |
| Validaci√≥n de tipos                              | Cada campo del evento es del tipo esperado         |
| Fallo en disco (simulado)                        | Manejo de excepci√≥n, retorna `False`               |
| Lectura del log resultante                       | Puede ser deserializado correctamente              |

---

## üîß Consideraciones t√©cnicas

- Usar `tmp_path` como directorio de logs
- Simular errores de disco renombrando o bloqueando archivos
- Verificar contenido del log generado (campos y tipos)
- Incluir prueba de eliminaci√≥n de logs antiguos (modificar timestamps si es necesario)

---

## üìÇ Archivos relacionados

- `log_writer.py` (m√≥dulo principal)
- `log_crypto.py` (relacionado pero se testea aparte)

---

¬øPod√©s generar el archivo `test_log_writer.py` con todos estos casos utilizando `pytest` y estructuras temporales?
