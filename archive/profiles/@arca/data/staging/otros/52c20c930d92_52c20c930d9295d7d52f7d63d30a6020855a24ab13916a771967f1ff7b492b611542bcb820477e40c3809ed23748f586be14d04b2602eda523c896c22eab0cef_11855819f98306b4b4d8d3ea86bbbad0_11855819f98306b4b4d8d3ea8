# üß† Prompt Maestro ALMA_LOADER Individual v2.0.2

## üéØ Prop√≥sito

Este prompt gu√≠a una IA (como GPT-4.5 o DeepSeek) para analizar, crear y gestionar memorias personales utilizando una infraestructura simplificada adecuada para uso individual, basada en los archivos existentes del proyecto ALMA_LOADER.


## üõ†Ô∏è Instrucciones Esenciales para la IA

### Lectura y Contexto

- Leer cada memoria utilizando campos: `id`, `fecha`, `tags`, `contenido`, `relacionadas`, `acciones` y `prioridad`.
    
- Priorizar memorias mediante:
    
    - N√∫mero de tags clave.
        
    - Impacto hist√≥rico detectado.
        

### Ejemplo de Memoria JSON Simplificado

```json
{
  "id": "MEMGEN-099",
  "fecha": "2025-09-15T14:30:00Z",
  "tags": ["#productividad", "#salud"],
  "contenido": "Reducir horas de trading tras detectar [fatiga>salud]",
  "relacionadas": ["MEMTRD-045"],
  "acciones": ["ajustar_horario"],
  "prioridad": 3
}
```

### Generaci√≥n Autom√°tica de Memorias

La IA debe generar memorias JSON siguiendo exactamente este formato.

### Manejo de Errores y Correcciones

Si una memoria falla la validaci√≥n:

- La IA debe corregir autom√°ticamente usando reglas en `schema_base.json`:
    

```json
"correcciones": {
  "fecha": "Usar ISO 8601 si est√° mal formateada",
  "tags": "Convertir a min√∫sculas y a√±adir # faltante"
}
```

- Registrar la memoria corregida nuevamente.
    


## ‚öôÔ∏è Configuraci√≥n T√©cnica Recomendada (Ejemplos Claros)

### SQLite con JSON1

```python
import sqlite3
conn = sqlite3.connect("alma.db")
conn.execute("CREATE TABLE memorias (data JSON)")
```

### NLP Local con spaCy

```python
import spacy
nlp = spacy.load("es_core_news_sm")
doc = nlp("Reducir horas de trading por fatiga.")
```

### Asignaci√≥n Autom√°tica de Prioridad

```python
def calcular_prioridad(memoria):
    return len(memoria["tags"]) + (1 if "#cr√≠tico" in memoria["tags"] else 0)
```

- **Caching**: Usar `@lru_cache` en Python para acelerar consultas frecuentes.
    
- **Logging**: Mantener logs simples (.log).
    


## üöÄ Implementar Ahora (Checklist Priorizado y Optimizado)

1. Implementar validador unificado en `schema_base.json`.
    
2. Migrar memorias al nuevo formato JSON simplificado.
    
3. Configurar NLP local con spaCy.
    
4. Implementar pipeline b√°sico NLP + SQLite.
    
5. Configurar `@lru_cache` para optimizar consultas.
    
6. Preparar estructura en clases para facilitar futuras migraciones.
    

