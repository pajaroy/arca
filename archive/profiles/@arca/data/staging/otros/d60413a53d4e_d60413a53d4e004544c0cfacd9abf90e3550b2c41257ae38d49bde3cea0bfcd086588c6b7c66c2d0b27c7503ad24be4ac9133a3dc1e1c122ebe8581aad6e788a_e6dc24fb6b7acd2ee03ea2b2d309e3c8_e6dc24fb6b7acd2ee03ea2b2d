# ðŸ“¤ Prompt Base Avanzado â€“ `exportar_feedback.py` (Fase 5.3 â€“ ALMA_FEEDBACK)

## ðŸŽ¯ Objetivo
Desarrollar un script que lea todas las memorias desde `memorias_json_actualizadas/`, extraiga las entradas del campo `retroalimentacion`, y genere archivos consolidados de feedback en JSON y Markdown.


## ðŸ“¤ Salidas esperadas

1. `logs/feedback_consolidado.json`
   - Contiene todas las entradas de retroalimentaciÃ³n extraÃ­das.

2. `logs/feedback_consolidado.md`
   - Resumen legible de todos los feedbacks encontrados.

3. `logs/feedback_{categoria}.md`
   - Un archivo `.md` separado por categorÃ­a (ej: `TRD`, `HEALTH`) si se usa la opciÃ³n `--por-categoria`.


## ðŸ§© Filtros opcionales por lÃ­nea de comandos

Implementar estos filtros con `argparse`:

| Argumento                | DescripciÃ³n                                                  |
|--------------------------|--------------------------------------------------------------|
| `--min-score 0.7`        | Solo feedback con score igual o superior a 0.7               |
| `--tipo-alerta XYZ`      | Solo feedback del tipo especificado                          |
| `--memoria-id MEM-XXX`   | Solo feedback dirigido a esa memoria                         |
| `--origen MEM-YYY`       | Solo feedback proveniente de una memoria especÃ­fica          |
| `--por-categoria`        | Divide la salida Markdown por categorÃ­a                      |
| `--json-only`            | No genera archivos Markdown, solo `.json`                    |


## ðŸ›  Requisitos tÃ©cnicos

- Python 3.9+
- MÃ³dulos: `pathlib`, `json`, `datetime`, `argparse`, `logging`, `collections`
- CÃ³digo limpio, modular, fÃ¡cil de extender a futuro
- Buen manejo de errores

