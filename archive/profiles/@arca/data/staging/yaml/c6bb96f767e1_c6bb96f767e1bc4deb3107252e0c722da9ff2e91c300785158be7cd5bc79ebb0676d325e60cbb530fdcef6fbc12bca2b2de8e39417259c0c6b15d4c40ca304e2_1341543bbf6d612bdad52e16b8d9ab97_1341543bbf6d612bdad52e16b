# =========================================
# ALMA_CLI_CLEANER v0.1.3 - Prompt Técnico para GENERACIÓN DE SCRIPT PYTHON CLI
# =========================================
# Este prompt tiene como propósito la generación de un **SCRIPT PYTHON** ejecutable como CLI robusta,
# cumpliendo exhaustivamente con toda la arquitectura, comandos y criterios de diseño aquí documentados.
# El resultado debe ser un único archivo Python preparado para ser ejecutado desde terminal (CLI local o remota),
# listo para integración futura con el ecosistema ALMA_RESIST y agentes IA (Kael, Centralesis).
# El script debe implementar toda la lógica, validaciones, logs, modularidad y robustez especificadas.
# Requiere docstrings claros, manejo de errores, salida consistente, código de retorno estándar, y preparación para auditar/migrar templates.
#
# OUTPUT ESPERADO: Script Python CLI completo y funcional, no solo diseño ni pseudo-código.
# =========================================

objetivos_de_implementacion: |
  - Generar un script Python ejecutable por CLI, autónomo y auditable.
  - Implementar la arquitectura modular interna y todos los subcomandos definidos.
  - Priorizar logs, manejo de errores, hooks, retrocompatibilidad y extensibilidad.
  - El resultado debe ser usable por humanos y agentes IA desde terminal, y listo para futuras migraciones o integración en un paquete mayor.

requisitos_de_generacion:
  - El output final debe ser código Python real y funcional.
  - Toda la estructura CLI y subcomandos debe estar implementada.
  - Soporte para logs (parquet/csv/yaml según configuración).
  - Código bien documentado, funciones separadas, flujo legible y fácil de testear.
  - Resiliencia ante errores, dry-run y --force.
  - Preparado para integración como módulo o script standalone.

titulo: "ALMA_CLI_CLEANER v0.1.3 - Prompt de Diseño y Especificación Mejorado"
descripcion: |
  CLI central para limpieza, validación, creación y auditoría de metadatos en ALMA_RESIST.
  El objetivo es proveer una herramienta robusta, auditable, extensible y lista para integración con agentes IA (Kael, Centralesis, etc).
  Diseñada para asegurar trazabilidad, compliance y automatización profesional en los flujos críticos del sistema.
autores:
  - nombre: Santi (Bird)
    rol: Arquitecto, usuario principal
  - nombre: Alma
    rol: IA soporte y documentación
mantenedores:
  - nombre: Kael
    rol: Agente IA de auditoría y CLI
  - nombre: Centralesis
    rol: Agente IA de control central
changelog:
  - version: 0.1.2
    fecha: 2025-07-10
    autor: Santi
    descripcion: Se agrega subcomando set_linked, template_version y robustez en metadatos.
  - version: 0.1.1
    fecha: 2025-07-10
    autor: Santi
    descripcion: Especificaciones avanzadas de contexto, roles y hooks.
  - version: 0.1.0
    fecha: 2025-07-10
    autor: Santi
    descripcion: Primera versión funcional.
objetivo_general: |
  Automatizar y profesionalizar el manejo de metadatos ALMA_RESIST, asegurando trazabilidad, control de cambios y cumplimiento de estándares en todos los archivos clave.

contexto_operativo:
  ejecutores_permitidos:
    - humano
    - IA (Kael)
    - IA (Centralesis)
  permisos_por_subcomando:
    crear: [humano, Kael]
    validar: [humano, Kael, Centralesis]
    limpiar: [humano, Kael]
    set_responsable: [humano, Kael]
    set_linked: [humano, Kael]
    log: [humano, Kael, Centralesis]
  compatibilidad_minima: 0.1.0
  templates_requeridos:
    - Meta/Metadatos_Template.yaml

archivos_soportados:
  - ".md"
  - ".yaml"
  - ".yml"
  - ".py"
  # Otros => warning + no ejecuta acción.

migraciones:
  politica_retrocompatibilidad: |
    Si el archivo tiene template viejo, sugerir migración automática o abortar con warning. Registrar toda migración en log.
  version_template_minima: 0.1.0

configuracion:
  archivo: alma_cleaner_config.yaml
  logs:
    ruta: /home/alma/Alma-Cli/Logs/Cleaner.parquet
    nivel: INFO # Configurable: DEBUG, INFO, WARNING, ERROR
    formato: parquet
    loguear_errores: true

politica_errores:
  modo: strict # Opciones: strict (aborta), relaxed (warning, sigue)
  log_si_fallo: true
  mensaje_usuario: "Error crítico, abortando. Ver logs."

hooks:
  pre_comando: null # Hooks reservados para backup, validaciones externas, etc.
  post_comando: null

template_version: "0.1.2"
template_metadatos:
  version: "0.1.2"
  template_version: "0.1.2"
  title: ""
  uuid: ""
  tipo: ""
  schema: ""
  estado: ""
  descripcion: ""
  estructura: []
  tags: []
  linked_to: []
  responsable: []
  hash_verificacion: ""
  historial:
    - fecha: ""
      usuario: ""
      accion: ""
      descripcion: ""
  last_modified: ""
  last_modified_by: ""
  created_at: ""
  created_by: ""
  proceso_origen: ""
  input_data: []
  output_data: []
  comentarios: ""
  ia_metadata: {}

subcomandos:
  - crear:
      descripcion: "Crear archivo nuevo con metadatos completos y formato estándar."
      argumentos:
        - archivo: "Ruta de archivo a crear."
        - --title: "Título inicial del archivo."
        - --responsable: "Responsable(s) inicial(es)."
        - --linked-to: "Archivos vinculados (opcional, separado por coma o flag repetido)."
      requisitos: "Si el archivo existe, aborta salvo que se use --force."
      resultado: "Archivo creado con metadatos completos: title, uuid, historial, etc."
      ejemplo: |
        alma_cli_cleaner crear /ruta/archivo.md --title "Bitácora 13CC" --responsable "Bird" --linked-to "/docs/base.md"
  - validar:
      descripcion: "Validar y/o reparar encabezado de metadatos (campos, tipos, valores)."
      argumentos:
        - archivo: "Ruta del archivo a validar."
      resultado: "Corrige y deja el archivo conforme al template. Reporta cambios y deja log."
      ejemplo: |
        alma_cli_cleaner validar /ruta/archivo.yaml
  - limpiar:
      descripcion: "Normalizar campos, remover espacios, estandarizar tipos y formatos."
      argumentos:
        - archivo: "Ruta del archivo a limpiar."
      resultado: "Archivo con metadatos limpios, sin basura ni valores inválidos."
      ejemplo: |
        alma_cli_cleaner limpiar /ruta/archivo.md
  - set_responsable:
      descripcion: "Asignar o modificar el/los responsable(s) y actualizar auditoría."
      argumentos:
        - archivo: "Ruta del archivo."
        - --responsable: "Nuevo(s) responsable(s)."
      resultado: "Campo responsable actualizado y log/auditoría de cambio."
      ejemplo: |
        alma_cli_cleaner set_responsable /ruta/archivo.md --responsable "Centralesis"
  - set_linked:
      descripcion: "Asignar o modificar el/los archivos vinculados (linked_to) y actualizar auditoría."
      argumentos:
        - archivo: "Ruta del archivo."
        - --linked-to: "Uno o varios archivos vinculados."
      resultado: "Campo linked_to actualizado y log/auditoría de cambio."
      ejemplo: |
        alma_cli_cleaner set_linked /ruta/archivo.md --linked-to "/docs/base.md,/docs/indice.md"
  - log:
      descripcion: "Mostrar historial/auditoría/log de cambios sobre el archivo."
      argumentos:
        - archivo: "Ruta del archivo."
      resultado: "Listado de operaciones previas, quién y cuándo realizó cambios."
      ejemplo: |
        alma_cli_cleaner log /ruta/archivo.md

features_extra:
  - "Soporte para .md, .yaml, .py (bloque YAML en docstring)."
  - "Logs centralizados y auditables en formato parquet/csv/yaml (según config)."
  - "Integración futura con CLI multiagente ALMA (Kael, Centralesis, etc)."
  - "Resiliencia ante errores, dry-run, y opción --force para operaciones críticas."
  - "Hooks pre/post comando para backups, validaciones externas, etc."
  - "Puede crecer modular: desde un solo script hasta un paquete completo."
  - "API de retorno: stdout estándar y opción de salida JSON para integración."
  - "Soporte a migración automática de templates viejos."
  - "Changelog autoincremental integrado."

ia_metadata:
  reservados_para_ia: true
  comentarios: |
    Espacio reservado para sugerencias, alertas o refactors automáticos generados por agentes IA de ALMA (Kael, Centralesis, LLMs, etc).
    TODO: Integrar feedback semántico de auditoría en el historial, y proponer mejoras automáticas de template cuando corresponda.

ejemplos_de_uso:
  - crear nuevo archivo: |
      alma_cli_cleaner crear /path/to/file.md --title "Bitácora" --responsable "Bird"
  - validar archivo existente: |
      alma_cli_cleaner validar /path/to/file.yaml
  - limpiar archivo: |
      alma_cli_cleaner limpiar /path/to/file.md
  - asignar responsable: |
      alma_cli_cleaner set_responsable /path/to/file.md --responsable "Kael"
  - vincular archivos (linked_to): |
      alma_cli_cleaner set_linked /path/to/file.md --linked-to "/docs/indice.md"
  - mostrar historial/log: |
      alma_cli_cleaner log /path/to/file.md

notas:
  - "No es necesario implementar toda la lógica compleja de entrada; el foco es la arquitectura y la trazabilidad."
  - "Documentar internamente (docstrings) cada función/acción de manera clara y profesional."
  - "El sistema debe ser usable tanto en CLI local como desde terminal remota/SSH."
  - "Si se detecta archivo binario o no soportado: warning y aborta sin modificar."
  - "Proveer siempre código de salida 0=OK, 1=error crítico."
  - "Si cambia el template, actualizar template_version y documentar en changelog."
pendientes:
  - Definir template de metadatos único y documentado.
  - Especificar estructura de logs y niveles de detalle.
  - Migrador automático para templates viejos.
  - Changelog documentado y autoincremental.
  - Pruebas de edge-cases y documentación de errores comunes.
  - Integrar feedback de agentes IA en auditoría.
